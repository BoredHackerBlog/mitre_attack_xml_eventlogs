<root>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:29.476531200Z" />
      <EventRecordID>160</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-5e9d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 22
        Command Name = PSConsoleHostReadLine
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 90
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadLine): "PSConsoleHostReadLine"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:29.479319200Z" />
      <EventRecordID>161</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b09d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">Start-Service sshd</Data>
      <Data Name="ScriptBlockId">5cc7cdc9-cad8-44e2-9161-f03661b8dcdb</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:30.035702000Z" />
      <EventRecordID>162</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b19d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 23
        Command Name = Start-Service
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 92
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Start-Service): "Start-Service"
ParameterBinding(Start-Service): name="Name"; value="sshd"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:30.036036700Z" />
      <EventRecordID>163</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b09d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 23
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 94
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:30.039618400Z" />
      <EventRecordID>164</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b69d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">a8e5ec5f-0dde-440b-88e7-fba686f005fb</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:30.041603300Z" />
      <EventRecordID>165</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-bb9d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 25
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\2.0.0\PSReadLine.psm1
        Command Path = 
        Sequence Number = 96
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:32.548660000Z" />
      <EventRecordID>166</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ba9d-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 25
        Command Name = PSConsoleHostReadLine
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 98
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadLine): "PSConsoleHostReadLine"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:32.559016100Z" />
      <EventRecordID>167</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-ffac-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">Set-Service -Name sshd -StartupType 'Automatic'</Data>
      <Data Name="ScriptBlockId">0956626f-29cb-43b5-bbd9-6f2850fd0971</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:32.590732900Z" />
      <EventRecordID>168</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-00ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 26
        Command Name = Set-Service
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 100
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-Service): "Set-Service"
ParameterBinding(Set-Service): name="Name"; value="sshd"
ParameterBinding(Set-Service): name="StartupType"; value="Automatic"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:32.590962600Z" />
      <EventRecordID>169</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-ffac-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 26
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 102
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:32.593742000Z" />
      <EventRecordID>170</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-469e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">af0addb1-46cf-4c3c-9e55-b7da49e2cff6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:32.595236100Z" />
      <EventRecordID>171</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-4b9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 28
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\2.0.0\PSReadLine.psm1
        Command Path = 
        Sequence Number = 104
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:36.172394300Z" />
      <EventRecordID>172</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-4a9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 28
        Command Name = PSConsoleHostReadLine
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 106
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadLine): "PSConsoleHostReadLine"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:36.183204400Z" />
      <EventRecordID>173</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-38ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">Get-NetFirewallRule -Name *ssh*</Data>
      <Data Name="ScriptBlockId">95a86ae8-8bb1-47c6-abe9-28d98c6b149e</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904613800Z" />
      <EventRecordID>174</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings </Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904644200Z" />
      <EventRecordID>175</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">= 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Direction')) {
          [object]$__cmdletization_value = ${Direction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Action')) {
          [object]$__cmdletization_value = ${Action}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
          [object]$__cmdletization_value = ${EdgeTraversalPolicy}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
          [object]$__cmdletization_value = ${LooseSourceMapping}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
          [object]$__cmdletization_value = ${LocalOnlyMapping}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Owner')) {
          [object]$__cmdletization_value = ${Owner}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParam</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904671300Z" />
      <EventRecordID>176</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">eter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpType')) {
          [object]$__cmdletization_value = ${IcmpType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
          [object]$__cmdletization_value = ${DynamicTarget}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Program')) {
          [object]$__cmdletization_value = ${Program}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Package')) {
          [object]$__cmdletization_value = ${Package}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Service')) {
          [object]$__cmdletization_value = ${Service}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; </Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904706300Z" />
      <EventRecordID>177</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalUser')) {
          [object]$__cmdletization_value = ${LocalUser}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteUser')) {
          [object]$__cmdletization_value = ${RemoteUser}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
          [object]$__cmdletization_value = ${RemoteMachine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Authentication')) {
          [object]$__cmdletization_value = ${Authentication}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Encryption')) {
          [object]$__cmdletization_value = ${Encryption}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
          [object]$__cmdletization_value = ${OverrideBlockRules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'
        

function Show-NetFirewallRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
     </Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904732100Z" />
      <EventRecordID>178</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">     $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'
        

function Get-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssoci</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904758800Z" />
      <EventRecordID>179</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">atedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Associ</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904798200Z" />
      <EventRecordID>180</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">atedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'
        

function Set-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Par</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904821300Z" />
      <EventRecordID>181</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">ameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)
</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904845800Z" />
      <EventRecordID>182</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Direction')) {
            [object]$__cmdletization_value = ${Direction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
            [object]$__cmdletization_value = ${EdgeTraversalPolicy}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
            [object]$__cmdletization_value = ${LooseSourceMapping}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
            [object]$__cmdletization_value = ${LocalOnlyMapping}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Owner')) {
            [object]$__cmdletization_value = ${Owner}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParame</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904873400Z" />
      <EventRecordID>183</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">ter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value </Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904896800Z" />
      <EventRecordID>184</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">11</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">= $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'
        

function Remove-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSet</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904922200Z" />
      <EventRecordID>185</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">12</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">Name='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904948300Z" />
      <EventRecordID>186</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">13</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'
        

function Rename-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904971500Z" />
      <EventRecordID>187</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">14</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSet</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.904996700Z" />
      <EventRecordID>188</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">15</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">Name='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdlet</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905023200Z" />
      <EventRecordID>189</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">16</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">ization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'
        

function Copy-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSet</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905046300Z" />
      <EventRecordID>190</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">17</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">Name='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuild</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905073600Z" />
      <EventRecordID>191</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">18</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">er.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdl</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905108000Z" />
      <EventRecordID>192</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">19</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">etization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'
        

function Enable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAp</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905131900Z" />
      <EventRecordID>193</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">20</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">plicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInter</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905160800Z" />
      <EventRecordID>194</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">21</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">face', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'
        

function Disable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
   </Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905187500Z" />
      <EventRecordID>195</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">22</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText"> ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    </Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905209900Z" />
      <EventRecordID>196</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">23</Data>
      <Data Name="MessageTotal">23</Data>
      <Data Name="ScriptBlockText">if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">66ea90b5-c136-486d-985d-cc2ad76dd8e1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.905777000Z" />
      <EventRecordID>197</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-849e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 108
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.925988700Z" />
      <EventRecordID>198</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-6dad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 110
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.926601600Z" />
      <EventRecordID>199</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-6ead-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 112
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.927006000Z" />
      <EventRecordID>200</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-6fad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 114
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.927590200Z" />
      <EventRecordID>201</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-70ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 116
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.928001900Z" />
      <EventRecordID>202</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-71ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 118
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.928395700Z" />
      <EventRecordID>203</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-72ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 120
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.928957500Z" />
      <EventRecordID>204</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-8a9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 122
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.929626500Z" />
      <EventRecordID>205</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-8b9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 124
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.930028500Z" />
      <EventRecordID>206</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-73ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 126
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:37.930863600Z" />
      <EventRecordID>207</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 128
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.080851100Z" />
      <EventRecordID>208</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [string]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${User},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {
          [object]$__cmdletization_value = ${IPsecRuleName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Mode')) {
          [object]$__cmdletization_value = ${Mode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
          [object]$__cmdletization_value = ${InboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
          [object]$__cmdletization_value = ${OutboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
          [object]$__cmdletization_value = ${QuickModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSe</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.080909700Z" />
      <EventRecordID>209</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">t')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
          [object]$__cmdletization_value = ${Phase2AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('KeyModule')) {
          [object]$__cmdletization_value = ${KeyModule}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
          [object]$__cmdletization_value = ${AllowWatchKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
          [object]$__cmdletization_value = ${AllowSetKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
          [object]$__cmdletization_value = ${LocalTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
          [object]$__cmdletization_value = ${RemoteTunnelHostname}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
          [object]$__cmdletization_value = ${ForwardPathLifetime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
          [object]$__cmdletization_value = ${EncryptedTunnelBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
          [object]$__cmdletization_value = ${RequireAuthorization}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('User')) {
          [object]$__cmdletization_value = ${User}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Machine')) {
          [object]$__cmdletization_value = ${Machine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
        

function Show-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.080958100Z" />
      <EventRecordID>210</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
        

function Find-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Find2')]
    [string]
    ${LocalAddress},

    [Parameter(ParameterSetName='Find2', Mandatory=$true)]
    [string]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Find2')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${LocalPort},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${RemotePort},

    [Parameter(ParameterSetName='Find2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Find2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Find2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
        

function Get-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeli</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081020400Z" />
      <EventRecordID>211</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">ne=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery',</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081061500Z" />
      <EventRecordID>212</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText"> 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
        

function Set-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${User},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'En</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081115200Z" />
      <EventRecordID>213</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">abled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Mode')) {
            [object]$__cmdletization_value = ${Mode}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
            [object]$__cmdletization_value = ${InboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
            [object]$__cmdletization_value = ${OutboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
            [object]$__cmdletization_value = ${QuickModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
            [object]$__cmdletization_value = ${Phase2AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyModule')) {
            [object]$__cmdletization_value = ${KeyModule}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
            [object]$__cmdletization_value = ${AllowWatchKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
            [object]$__cmdletization_value = ${AllowSetKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
            [object]$__cmdletization_value = ${LocalTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
            [object]$__cmdletization_value = ${RemoteTunnelHostname}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
            [object]$__cmdletization_value = ${ForwardPathLifetime}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
            [object]$__cmdletization_value = ${EncryptedTunnelBypass}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
            [object]$__cmdletization_value = ${RequireAuthorization}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('User')) {
            [object]$__cmdletization_value = ${User}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Machine')) {
            [object]$__cmdletization_value = ${Machine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In';</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081168900Z" />
      <EventRecordID>214</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText"> Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
        

function Remove-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPh</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081217000Z" />
      <EventRecordID>215</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">ase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
        

function Rename-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    $</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081262100Z" />
      <EventRecordID>216</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">{Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_quer</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081311500Z" />
      <EventRecordID>217</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">yBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
        

function Copy-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession}</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081373300Z" />
      <EventRecordID>218</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">11</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">,

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewP</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081427000Z" />
      <EventRecordID>219</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">12</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">olicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
        

function Enable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081481200Z" />
      <EventRecordID>220</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">13</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
        

function Disable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Manage</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081544100Z" />
      <EventRecordID>221</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">14</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">ment.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewa</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081607600Z" />
      <EventRecordID>222</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">15</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">llProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
        

function Sync-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Servers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Domains},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]
    ${AddressType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DnsServers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081662400Z" />
      <EventRecordID>223</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">16</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Servers')) {
            [object]$__cmdletization_value = ${Servers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Domains')) {
            [object]$__cmdletization_value = ${Domains}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AddressType')) {
            [object]$__cmdletization_value = ${AddressType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.081705300Z" />
      <EventRecordID>224</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-74ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">17</Data>
      <Data Name="MessageTotal">17</Data>
      <Data Name="ScriptBlockText">; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DnsServers')) {
            [object]$__cmdletization_value = ${DnsServers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
        

function Update-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]
    ${Action},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv6Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv4Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {
            [object]$__cmdletization_value = ${IPv6Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {
            [object]$__cmdletization_value = ${IPv4Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PassThru')) {
            [object]$__cmdletization_value = ${PassThru}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">65128610-e603-4667-b94f-f7077889aaad</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.082267700Z" />
      <EventRecordID>225</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a69e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 130
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.082677400Z" />
      <EventRecordID>226</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a79e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 132
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.083086000Z" />
      <EventRecordID>227</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 134
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.083474500Z" />
      <EventRecordID>228</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a99e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 136
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.083871300Z" />
      <EventRecordID>229</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-aa9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 138
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.084240500Z" />
      <EventRecordID>230</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ab9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 140
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.084674000Z" />
      <EventRecordID>231</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ac9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 142
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.085052400Z" />
      <EventRecordID>232</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ad9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 144
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.085428400Z" />
      <EventRecordID>233</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ae9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 146
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.091279400Z" />
      <EventRecordID>234</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-af9e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 148
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.091801800Z" />
      <EventRecordID>235</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b59e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 150
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.092205400Z" />
      <EventRecordID>236</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b69e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 152
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.092611700Z" />
      <EventRecordID>237</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b79e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 154
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.092979200Z" />
      <EventRecordID>238</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 156
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215202000Z" />
      <EventRecordID>239</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
          [object]$__cmdletization_value = ${MainModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'c</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215226200Z" />
      <EventRecordID>240</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">im:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
        

function Get-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRec</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215253200Z" />
      <EventRecordID>241</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">ord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
        

function Set-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
            [object]$__cmdletization_value = ${MainModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; V</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215276600Z" />
      <EventRecordID>242</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">alue = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
        

function Remove-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Polic</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215301600Z" />
      <EventRecordID>243</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">yStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
        

function Rename-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Gr</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215323000Z" />
      <EventRecordID>244</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">oup})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
        

function Copy-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSe</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215344000Z" />
      <EventRecordID>245</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">tName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
        

function Enable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215364800Z" />
      <EventRecordID>246</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
        

function Disable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [Validate</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215385500Z" />
      <EventRecordID>247</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">NotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) </Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215390700Z" />
      <EventRecordID>248</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b89e-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">{
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">37c41013-822e-4777-85a7-4cf0b39501a6</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.215906600Z" />
      <EventRecordID>249</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-0c9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 158
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.216244800Z" />
      <EventRecordID>250</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-0d9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 160
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.216594200Z" />
      <EventRecordID>251</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-0e9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 162
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.216924700Z" />
      <EventRecordID>252</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-0f9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 164
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.217244900Z" />
      <EventRecordID>253</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-109f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 166
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.220752400Z" />
      <EventRecordID>254</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-119f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 168
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.221272800Z" />
      <EventRecordID>255</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-baad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 170
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.221608700Z" />
      <EventRecordID>256</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-bbad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 172
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.221984500Z" />
      <EventRecordID>257</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-bcad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 174
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.222430400Z" />
      <EventRecordID>258</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-149f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 176
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.250602200Z" />
      <EventRecordID>259</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-149f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
        

function Set-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LocalIP')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('RemoteIP')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">1d4522b2-5776-4158-9a4b-6bddaa500832</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.251977200Z" />
      <EventRecordID>260</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-01ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 178
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.252885100Z" />
      <EventRecordID>261</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-02ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 180
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.253511900Z" />
      <EventRecordID>262</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-269f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 182
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.253861700Z" />
      <EventRecordID>263</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-279f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 184
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.299940800Z" />
      <EventRecordID>264</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-279f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Program},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Package},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Program})
        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Package})
        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
        

function Set-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">ed5d2fc4-48c8-4ed1-b0a2-a12fa92ec0cd</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.300472700Z" />
      <EventRecordID>265</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-439f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 186
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.301273200Z" />
      <EventRecordID>266</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-449f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 188
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.302210200Z" />
      <EventRecordID>267</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-459f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 190
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.302791600Z" />
      <EventRecordID>268</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-31ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 192
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.338146900Z" />
      <EventRecordID>269</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-31ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
        

function Set-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">f2ad1df8-a449-4d2c-821a-f4dad3033dc9</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.338739900Z" />
      <EventRecordID>270</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-4bae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 194
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.339129300Z" />
      <EventRecordID>271</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-5f9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 196
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.339605500Z" />
      <EventRecordID>272</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-609f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 198
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.340098700Z" />
      <EventRecordID>273</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-619f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 200
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.370814100Z" />
      <EventRecordID>274</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-619f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceType})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
        

function Set-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">dcf11935-c47f-426c-b702-fe3bb044a56c</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.371403400Z" />
      <EventRecordID>275</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-719f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 202
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.371760300Z" />
      <EventRecordID>276</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-729f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 204
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.372156600Z" />
      <EventRecordID>277</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-739f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 206
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.372515700Z" />
      <EventRecordID>278</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-749f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 208
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.401123400Z" />
      <EventRecordID>279</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-749f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication[]]
    ${Authentication},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption[]]
    ${Encryption},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${LocalUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Authentication') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Authentication})
        $__cmdletization_queryBuilder.FilterByProperty('Authentication', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Encryption') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Encryption})
        $__cmdletization_queryBuilder.FilterByProperty('Encryption', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OverrideBlockRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OverrideBlockRules})
        $__cmdletization_queryBuilder.FilterByProperty('OverrideBlockRules', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalUser})
        $__cmdletization_queryBuilder.FilterByProperty('LocalUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteUser})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteMachine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteMachine})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteMachines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterBySecurity', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'
        

function Set-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
 </Data>
      <Data Name="ScriptBlockId">34959f86-fd86-4cf4-be03-43a1c77b157a</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.401149400Z" />
      <EventRecordID>280</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-749f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">       

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">34959f86-fd86-4cf4-be03-43a1c77b157a</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.401653100Z" />
      <EventRecordID>281</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-809f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 210
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.403294700Z" />
      <EventRecordID>282</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-819f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 212
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.403799300Z" />
      <EventRecordID>283</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-829f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 214
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.404345100Z" />
      <EventRecordID>284</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-58ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 216
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.434032900Z" />
      <EventRecordID>285</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-58ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetProtocolPortFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('DynamicTransport')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport[]]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DynamicTarget') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DynamicTarget})
        $__cmdletization_queryBuilder.FilterByProperty('DynamicTransport', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'
        

function Set-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">2b862cbc-c7dd-482f-a45b-96ff76ccee20</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.434572200Z" />
      <EventRecordID>286</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a59f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 218
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.434906200Z" />
      <EventRecordID>287</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a69f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 220
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.435771000Z" />
      <EventRecordID>288</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-a79f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 222
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.436193200Z" />
      <EventRecordID>289</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-5bae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 224
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.472231600Z" />
      <EventRecordID>290</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-5bae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Service},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Service})
        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
        

function Set-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">babdd0fb-1ff9-460c-b722-9eeac4447d49</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.472844800Z" />
      <EventRecordID>291</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b19f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 226
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.473242800Z" />
      <EventRecordID>292</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-85ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 228
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.473642500Z" />
      <EventRecordID>293</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-86ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 230
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.473999400Z" />
      <EventRecordID>294</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-87ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 232
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.514579000Z" />
      <EventRecordID>295</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-87ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP1AuthSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'
        

function Get-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exc</Data>
      <Data Name="ScriptBlockId">521ed72e-41bd-4e03-b67b-fff357e2ad6d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.514611500Z" />
      <EventRecordID>296</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-87ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">eptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'
        

function Set-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'
        

function Remove-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/stand</Data>
      <Data Name="ScriptBlockId">521ed72e-41bd-4e03-b67b-fff357e2ad6d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.514640800Z" />
      <EventRecordID>297</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-87ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">ardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'
        

function Rename-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    </Data>
      <Data Name="ScriptBlockId">521ed72e-41bd-4e03-b67b-fff357e2ad6d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.514669600Z" />
      <EventRecordID>298</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-87ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">[Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'
        

function Copy-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcess</Data>
      <Data Name="ScriptBlockId">521ed72e-41bd-4e03-b67b-fff357e2ad6d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.514685100Z" />
      <EventRecordID>299</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-87ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">ing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">521ed72e-41bd-4e03-b67b-fff357e2ad6d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.515167100Z" />
      <EventRecordID>300</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b59f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 234
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.515621300Z" />
      <EventRecordID>301</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b69f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 236
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.518998900Z" />
      <EventRecordID>302</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-91ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 238
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.520000400Z" />
      <EventRecordID>303</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-b79f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 240
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.520351000Z" />
      <EventRecordID>304</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-96ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 242
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.520696300Z" />
      <EventRecordID>305</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-97ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 244
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.521118200Z" />
      <EventRecordID>306</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-98ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 246
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.523016400Z" />
      <EventRecordID>307</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-99ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 248
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.561531600Z" />
      <EventRecordID>308</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-99ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP2AuthSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'
        

function Get-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName'</Data>
      <Data Name="ScriptBlockId">0f960772-b983-4f32-a47f-30117778ef85</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.561568000Z" />
      <EventRecordID>309</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-99ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">) -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'
        

function Set-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'
        

function Remove-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
</Data>
      <Data Name="ScriptBlockId">0f960772-b983-4f32-a47f-30117778ef85</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.561611500Z" />
      <EventRecordID>310</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-99ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'
        

function Rename-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQ</Data>
      <Data Name="ScriptBlockId">0f960772-b983-4f32-a47f-30117778ef85</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.561655300Z" />
      <EventRecordID>311</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-99ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">uery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'
        

function Copy-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParam</Data>
      <Data Name="ScriptBlockId">0f960772-b983-4f32-a47f-30117778ef85</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.561671400Z" />
      <EventRecordID>312</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-99ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">eter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">0f960772-b983-4f32-a47f-30117778ef85</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.562167700Z" />
      <EventRecordID>313</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d2ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 250
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.565881800Z" />
      <EventRecordID>314</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d3ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 252
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.566342600Z" />
      <EventRecordID>315</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d5ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 254
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.566684200Z" />
      <EventRecordID>316</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d6ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 256
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.567441600Z" />
      <EventRecordID>317</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d7ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 258
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.567812600Z" />
      <EventRecordID>318</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d8ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 260
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.568449500Z" />
      <EventRecordID>319</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-d9ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 262
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.568830700Z" />
      <EventRecordID>320</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 264
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611114500Z" />
      <EventRecordID>321</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEMMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
          [object]$__cmdletization_value = ${MaxMinutes}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxSessions')) {
          [object]$__cmdletization_value = ${MaxSessions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
          [object]$__cmdletization_value = ${ForceDiffieHellman}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodPa</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611144300Z" />
      <EventRecordID>322</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">rameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Get-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Set-NetIPsecMainModeCryptoSe</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611180100Z" />
      <EventRecordID>323</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">t
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
            [object]$__cmdletization_value = ${MaxMinutes}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSessions')) {
            [object]$__cmdletization_value = ${MaxSessions}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
            [object]$__cmdletization_value = ${ForceDiffieHellman}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPrese</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611204600Z" />
      <EventRecordID>324</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">nt}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Remove-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_retur</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611273100Z" />
      <EventRecordID>325</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">nValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Rename-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParam</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611297100Z" />
      <EventRecordID>326</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">eters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Copy-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetNam</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611354300Z" />
      <EventRecordID>327</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c99f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">e )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">d475d04e-1994-459f-bc43-699462be0eef</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.611862000Z" />
      <EventRecordID>328</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-e7ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 266
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.612206400Z" />
      <EventRecordID>329</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-e8ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 268
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.612561300Z" />
      <EventRecordID>330</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-e9ae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 270
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.614424900Z" />
      <EventRecordID>331</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-eaae-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 272
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.615338500Z" />
      <EventRecordID>332</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e19f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 274
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.615838200Z" />
      <EventRecordID>333</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e29f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 276
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.616179200Z" />
      <EventRecordID>334</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e39f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 278
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.616520400Z" />
      <EventRecordID>335</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e49f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 280
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.659763600Z" />
      <EventRecordID>336</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e49f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Get-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -con</Data>
      <Data Name="ScriptBlockId">24433d6f-0eff-41b7-aa1b-ebf473853389</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.660238200Z" />
      <EventRecordID>337</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e49f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">tains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Set-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Remove-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
</Data>
      <Data Name="ScriptBlockId">24433d6f-0eff-41b7-aa1b-ebf473853389</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.660735800Z" />
      <EventRecordID>338</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e49f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Rename-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery')</Data>
      <Data Name="ScriptBlockId">24433d6f-0eff-41b7-aa1b-ebf473853389</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.660834700Z" />
      <EventRecordID>339</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e49f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText"> -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Copy-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}</Data>
      <Data Name="ScriptBlockId">24433d6f-0eff-41b7-aa1b-ebf473853389</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.660850200Z" />
      <EventRecordID>340</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-e49f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">24433d6f-0eff-41b7-aa1b-ebf473853389</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.661430900Z" />
      <EventRecordID>341</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-eb9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 282
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.661790800Z" />
      <EventRecordID>342</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ec9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 284
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.662202700Z" />
      <EventRecordID>343</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ed9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 286
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.662552800Z" />
      <EventRecordID>344</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ee9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 288
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.662922400Z" />
      <EventRecordID>345</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-ef9f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 290
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.663260400Z" />
      <EventRecordID>346</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-f09f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 292
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.663661800Z" />
      <EventRecordID>347</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-f19f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 294
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.664324200Z" />
      <EventRecordID>348</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-f29f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 296
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.700065900Z" />
      <EventRecordID>349</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-f29f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallProfile'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallProfile
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'
        

function Set-NetFirewallProfile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowInboundRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalIPsecRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserApps},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserPorts},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUnicastResponseToMulticast},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${NotifyOnListen},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStealthModeForIPsec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LogFileName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint64]
    ${LogMaxSizeKilobytes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogAllowed},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogBlocked},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogIgnored},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DisabledInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSet</Data>
      <Data Name="ScriptBlockId">504fcfc2-39b5-47fc-a78d-5066cfd4f795</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.700088900Z" />
      <EventRecordID>350</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-f29f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">Name='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
            [object]$__cmdletization_value = ${DefaultInboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
            [object]$__cmdletization_value = ${DefaultOutboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowInboundRules')) {
            [object]$__cmdletization_value = ${AllowInboundRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {
            [object]$__cmdletization_value = ${AllowLocalFirewallRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalIPsecRules')) {
            [object]$__cmdletization_value = ${AllowLocalIPsecRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserApps')) {
            [object]$__cmdletization_value = ${AllowUserApps}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserPorts')) {
            [object]$__cmdletization_value = ${AllowUserPorts}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUnicastResponseToMulticast')) {
            [object]$__cmdletization_value = ${AllowUnicastResponseToMulticast}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NotifyOnListen')) {
            [object]$__cmdletization_value = ${NotifyOnListen}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStealthModeForIPsec')) {
            [object]$__cmdletization_value = ${EnableStealthModeForIPsec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cm</Data>
      <Data Name="ScriptBlockId">504fcfc2-39b5-47fc-a78d-5066cfd4f795</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.700119200Z" />
      <EventRecordID>351</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-f29f-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">dletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogFileName')) {
            [object]$__cmdletization_value = ${LogFileName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogMaxSizeKilobytes')) {
            [object]$__cmdletization_value = ${LogMaxSizeKilobytes}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogAllowed')) {
            [object]$__cmdletization_value = ${LogAllowed}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogBlocked')) {
            [object]$__cmdletization_value = ${LogBlocked}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogIgnored')) {
            [object]$__cmdletization_value = ${LogIgnored}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DisabledInterfaceAliases')) {
            [object]$__cmdletization_value = ${DisabledInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">504fcfc2-39b5-47fc-a78d-5066cfd4f795</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.700612700Z" />
      <EventRecordID>352</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-00a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 298
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.701339200Z" />
      <EventRecordID>353</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-01a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 300
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.701960000Z" />
      <EventRecordID>354</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-3baf-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 302
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.702363900Z" />
      <EventRecordID>355</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-05a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 304
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.733549100Z" />
      <EventRecordID>356</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-05a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                
</Data>
      <Data Name="ScriptBlockId">26bbceeb-7967-4540-b0e9-5ee32392605f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.740967900Z" />
      <EventRecordID>357</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-1aa0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 306
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.741684700Z" />
      <EventRecordID>358</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 308
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779121200Z" />
      <EventRecordID>359</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuth</Data>
      <Data Name="ScriptBlockId">320e8076-0a8b-447a-b05e-593217b95a56</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779147500Z" />
      <EventRecordID>360</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">Dscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
          [object]$__cmdletization_value = ${IcmpV6Dscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
          [object]$__cmdletization_value = ${DefBlockExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
          [object]$__cmdletization_value = ${MaxStateEntries}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
          [object]$__cmdletization_value = ${EnabledKeyingModules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
          [object]$__cmdletization_value = ${FilteringFlags}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
          [object]$__cmdletization_value = ${PublicInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmd</Data>
      <Data Name="ScriptBlockId">320e8076-0a8b-447a-b05e-593217b95a56</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779166100Z" />
      <EventRecordID>361</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">letization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
          [object]$__cmdletization_value = ${PrivateInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
          [object]$__cmdletization_value = ${PublicV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
          [object]$__cmdletization_value = ${PrivateV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
        

function Get-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
        

function Set-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetNa</Data>
      <Data Name="ScriptBlockId">320e8076-0a8b-447a-b05e-593217b95a56</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779187300Z" />
      <EventRecordID>362</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">me='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
            [object]$__cmdletization_value = ${IcmpV6Dscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterEx</Data>
      <Data Name="ScriptBlockId">320e8076-0a8b-447a-b05e-593217b95a56</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779205100Z" />
      <EventRecordID>363</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">emptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
            [object]$__cmdletization_value = ${DefBlockExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
            [object]$__cmdletization_value = ${MaxStateEntries}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
            [object]$__cmdletization_value = ${EnabledKeyingModules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
            [object]$__cmdletization_value = ${FilteringFlags}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
            [object]$__cmdletization_value = ${PublicInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
            [object]$__cmdletization_value = ${PrivateInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
            [object]$__cmdletization_value = ${PublicV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
            [object]$__cmdletization_value = ${PrivateV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
        

function Remove-NetIPsecDospSetting
{
    [Cmdlet</Data>
      <Data Name="ScriptBlockId">320e8076-0a8b-447a-b05e-593217b95a56</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779215200Z" />
      <EventRecordID>364</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-49af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">Binding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">320e8076-0a8b-447a-b05e-593217b95a56</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.779760900Z" />
      <EventRecordID>365</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-7baf-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 310
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.781109800Z" />
      <EventRecordID>366</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-7caf-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 312
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.781499000Z" />
      <EventRecordID>367</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-1ea0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 314
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.781863900Z" />
      <EventRecordID>368</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-1fa0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 316
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.782260800Z" />
      <EventRecordID>369</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-20a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 318
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.782687000Z" />
      <EventRecordID>370</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-7daf-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 320
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.807680400Z" />
      <EventRecordID>371</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-7daf-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                
</Data>
      <Data Name="ScriptBlockId">c91105e5-4b5f-469a-b03e-a43d3b193e42</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.808416000Z" />
      <EventRecordID>372</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-b6af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 322
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.808785900Z" />
      <EventRecordID>373</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-28a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 324
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.833190200Z" />
      <EventRecordID>374</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-28a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
        

function Remove-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">17cbb2da-cd76-4f1e-9656-de2dc5cd1bb2</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.833702100Z" />
      <EventRecordID>375</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-b8af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 326
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.834079600Z" />
      <EventRecordID>376</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-33a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 328
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.834434700Z" />
      <EventRecordID>377</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-34a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 330
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.834831000Z" />
      <EventRecordID>378</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-35a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 332
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.859721000Z" />
      <EventRecordID>379</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-35a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
        

function Remove-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">0eff5233-bf05-42bf-86e0-94573ab87358</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.860242400Z" />
      <EventRecordID>380</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-37a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 334
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.860577400Z" />
      <EventRecordID>381</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-38a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 336
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.860987200Z" />
      <EventRecordID>382</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-39a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 338
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.861937100Z" />
      <EventRecordID>383</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-c4af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 340
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.893827700Z" />
      <EventRecordID>384</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-c4af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
        

function Set-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]
    ${Exemptions},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulFtp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulPptp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${RequireFullAuthSupport},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]
    ${CertValidationLevel},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]
    ${AllowIPsecThroughNAT},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSAIdleTimeSeconds},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]
    ${KeyEncoding},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]
    ${EnablePacketQueuing},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Exemptions')) {
            [object]$__cmdletization_value = ${Exemptions}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {
            [object]$__cmdletization_value = ${EnableStatefulFtp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {
            [object]$__cmdletization_value = ${EnableStatefulPptp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {
          </Data>
      <Data Name="ScriptBlockId">8cc90aaa-de92-4883-b540-81b1ae01c8e0</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.893870400Z" />
      <EventRecordID>385</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-c4af-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">  [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {
            [object]$__cmdletization_value = ${RequireFullAuthSupport}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {
            [object]$__cmdletization_value = ${CertValidationLevel}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {
            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {
            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {
            [object]$__cmdletization_value = ${KeyEncoding}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {
            [object]$__cmdletization_value = ${EnablePacketQueuing}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">8cc90aaa-de92-4883-b540-81b1ae01c8e0</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.894413000Z" />
      <EventRecordID>386</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-3aa0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 342
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.896468300Z" />
      <EventRecordID>387</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-3ba0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 344
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.897548100Z" />
      <EventRecordID>388</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-3ca0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 346
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.898712800Z" />
      <EventRecordID>389</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-3da0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 348
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.922713800Z" />
      <EventRecordID>390</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-3da0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Open-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([System.String])]
    param(
    
    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Open0')]
    [string]
    ${DomainController},

    [Parameter(ParameterSetName='Open0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Open0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Open0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DomainController')) {
          [object]$__cmdletization_value = ${DomainController}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
        

function Save-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='Save1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Save1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Save1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">c4f99658-5a14-4a49-9381-fcc9db8ba090</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.923287900Z" />
      <EventRecordID>391</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-61a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 350
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.923661700Z" />
      <EventRecordID>392</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-62a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 352
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.924062500Z" />
      <EventRecordID>393</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-63a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 354
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:38.924434200Z" />
      <EventRecordID>394</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-64a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 38
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 356
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:39.096783800Z" />
      <EventRecordID>395</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-66a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">f3001c78-1aea-42f3-959d-a75a02d2cf41</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:43.030337000Z" />
      <EventRecordID>396</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-65a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 29
        Command Name = Get-NetFirewallRule
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 358
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-NetFirewallRule): "Get-NetFirewallRule"
ParameterBinding(Get-NetFirewallRule): name="Name"; value="*ssh*"
ParameterBinding(Get-NetFirewallRule): name="All"; value="False"
ParameterBinding(Get-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallRule): name="TracePolicyStore"; value="False"
ParameterBinding(Get-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallRule): name="AsJob"; value="False"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:43.031197500Z" />
      <EventRecordID>397</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0000-38ad-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 29
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 360
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?OpenSSH-Server-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:43.034062800Z" />
      <EventRecordID>398</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c1a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">041125e1-c454-4a19-9fd5-4456d73b70dd</Data>
      <Data Name="Path">
      </Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-22T10:19:43.035422700Z" />
      <EventRecordID>399</EventRecordID>
      <Correlation ActivityID="{1c911fe1-375e-0001-c6a0-911c5e37d701}" />
      <Execution ProcessID="6012" ThreadID="5140" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>win10-02.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.19041.906
        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.19041.906
        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0
        Pipeline ID = 40
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\2.0.0\PSReadLine.psm1
        Command Path = 
        Sequence Number = 362
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
</root>