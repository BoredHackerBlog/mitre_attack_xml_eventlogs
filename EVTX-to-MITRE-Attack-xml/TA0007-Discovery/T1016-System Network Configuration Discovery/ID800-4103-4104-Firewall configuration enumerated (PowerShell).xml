<root>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>740</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=21

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>741</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=23

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>742</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=25

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>743</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=27

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>744</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=29

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>745</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=31

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>746</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=33

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>747</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=35

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>748</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=37

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>749</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=39

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>750</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=41

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>751</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=43

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>752</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=45

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>753</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=47

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>754</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=49

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>755</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=51

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>756</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=53

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>757</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=55

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>758</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=57

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>759</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=59

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>760</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=61

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>761</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=63

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>762</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=65

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>763</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=67

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>764</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=69

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>765</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=71

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>766</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=73

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>767</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=75

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>768</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=77

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>769</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=79

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>770</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=81

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>771</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=83

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>772</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=85

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>773</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=87

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>774</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=89

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>775</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=91

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>776</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=93

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>777</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=95

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>778</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=97

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>779</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=99

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>780</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=101

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>781</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=103

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>782</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=105

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>783</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=107

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>784</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=109

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>785</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=111

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>786</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=113

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>787</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=115

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>788</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=117

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>789</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=119

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>790</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=121

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>791</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=123

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>792</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=125

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>793</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=127

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>794</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=129

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>795</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=131

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>796</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=133

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>797</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=135

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>798</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=137

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>799</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=139

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>800</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=141

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>801</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=143

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>802</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=145

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>803</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=147

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>804</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=149

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>805</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=151

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>806</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=153

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>807</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=155

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>808</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=157

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>809</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=159

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>810</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=161

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>811</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=163

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>812</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=165

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>813</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=167

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>814</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=169

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>815</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=171

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>816</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=173

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>817</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=175

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>818</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=177

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>819</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=179

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>820</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=181

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>821</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=183

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>822</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=185

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>823</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=187

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>824</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=189

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>825</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=191

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>826</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=193

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>827</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=195

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>828</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=197

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>829</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=199

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>830</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=201

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>831</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=203

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>832</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=205

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>833</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=207

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>834</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=209

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>835</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=211

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>836</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=213

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>837</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=215

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>838</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=217

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>839</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=219

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>840</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=221

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>841</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=223

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.000000000Z" />
      <EventRecordID>842</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=225

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.426685700Z" />
      <EventRecordID>2453</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-57cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">Get-NetFirewallProfile</Data>
      <Data Name="ScriptBlockId">0a110051-9686-4110-8b8a-e83a15674832</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.457918900Z" />
      <EventRecordID>2454</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">@{
    ModuleVersion = '2.0.0.0'
    FormatsToProcess = 'NetSecurity.formats.ps1xml'
    TypesToProcess = 'NetSecurity.types.ps1xml'
    NestedModules = @(
        "Microsoft.Windows.Firewall.Commands.dll",
        "NetFirewallRule.cmdletDefinition.cdxml",
        "NetIPsecRule.cmdletDefinition.cdxml",
        "NetIPsecMainModeRule.cmdletDefinition.cdxml",
        "NetFirewallAddressFilter.cmdletDefinition.cdxml",
        "NetFirewallApplicationFilter.cmdletDefinition.cdxml",
        "NetFirewallInterfaceFilter.cmdletDefinition.cdxml",
        "NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml",
        "NetFirewallSecurityFilter.cmdletDefinition.cdxml",
        "NetFirewallPortFilter.cmdletDefinition.cdxml",
        "NetFirewallServiceFilter.cmdletDefinition.cdxml",
        "NetIPsecPhase1AuthSet.cmdletDefinition.cdxml",
        "NetIPsecPhase2AuthSet.cmdletDefinition.cdxml",
        "NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml",
        "NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml",
        "NetFirewallProfile.cmdletDefinition.cdxml",
        "NetIPsecPolicyChange.cmdletDefinition.cdxml",
        "NetIPsecDospSetting.cmdletDefinition.cdxml",
        "NetIPsecIdentity.cmdletDefinition.cdxml",
        "NetIPsecMainModeSA.cmdletDefinition.cdxml",
        "NetIPsecQuickModeSA.cmdletDefinition.cdxml",
        "NetFirewallSetting.cmdletDefinition.cdxml",
        "NetGPO.cmdletDefinition.cdxml"
    )
    GUID = '{4B26FF51-7AEE-4731-9CF7-508B82532CBF}'
    Author = 'Microsoft Corporation'
    CompanyName = 'Microsoft Corporation'
    PowerShellVersion = '3.0'
    ClrVersion = '4.0'
    Copyright = '⌐ Microsoft Corporation. All rights reserved.'
    HelpInfoUri = "http://go.microsoft.com/fwlink/?linkid=285764"

    FunctionsToExport = @(
        "Copy-NetFirewallRule",
        "Copy-NetIPsecMainModeCryptoSet",
        "Copy-NetIPsecMainModeRule",
        "Copy-NetIPsecPhase1AuthSet",
        "Copy-NetIPsecPhase2AuthSet",
        "Copy-NetIPsecQuickModeCryptoSet",
        "Copy-NetIPsecRule",
        "Disable-NetFirewallRule",
        "Disable-NetIPsecMainModeRule",
        "Disable-NetIPsecRule",
        "Enable-NetFirewallRule",
        "Enable-NetIPsecMainModeRule",
        "Enable-NetIPsecRule",
        "Get-NetFirewallAddressFilter",
        "Get-NetFirewallApplicationFilter",
        "Get-NetFirewallInterfaceFilter",
        "Get-NetFirewallInterfaceTypeFilter",
        "Get-NetFirewallPortFilter",
        "Get-NetFirewallProfile",
        "Get-NetFirewallRule",
        "Get-NetFirewallSecurityFilter",
        "Get-NetFirewallServiceFilter",
        "Get-NetFirewallSetting",
        "Get-NetIPsecDospSetting",
        "Get-NetIPsecMainModeCryptoSet",
        "Get-NetIPsecMainModeRule",
        "Get-NetIPsecMainModeSA",
        "Get-NetIPsecPhase1AuthSet",
        "Get-NetIPsecPhase2AuthSet",
        "Get-NetIPsecQuickModeCryptoSet",
        "Get-NetIPsecQuickModeSA",
        "Get-NetIPsecRule",
        "New-NetFirewallRule",
        "New-NetIPsecDospSetting",
        "New-NetIPsecMainModeCryptoSet",
        "New-NetIPsecMainModeRule",
        "New-NetIPsecPhase1AuthSet",
        "New-NetIPsecPhase2AuthSet",
        "New-NetIPsecQuickModeCryptoSet",
        "New-NetIPsecRule",
        "Open-NetGPO",
        "Remove-NetFirewallRule",
        "Remove-NetIPsecDospSetting",
        "Remove-NetIPsecMainModeCryptoSet",
        "Remove-NetIPsecMainModeRule",
        "Remove-NetIPsecMainModeSA",
        "Remove-NetIPsecPhase1AuthSet",
        "Remove-NetIPsecPhase2AuthSet",
        "Remove-NetIPsecQuickModeCryptoSet",
        "Remove-NetIPsecQuickModeSA",
        "Remove-NetIPsecRule",
        "Rename-NetFirewallRule",
        "Rename-NetIPsecMainModeCryptoSet",
        "Rename-NetIPsecMainModeRule",
        "Rename-NetIPsecPhase1AuthSet",
        "Rename-NetIPsecPhase2AuthSet",
        "Rename-NetIPsecQuickModeCryptoSet",
        "Rename-NetIPsecRule",
        "Save-NetGPO",
        "Find-NetIPsecRule",
        "Set-NetFirewallAddressFilter",
        "Set-NetFirewallApplicationFilter",
        "Set-NetFirewallInterfaceFilter",
        "Set-NetFirewallInterfaceTypeFilter",
        "Set-NetFirewallPortFilter",
        "Set-NetFirewallProfile",
        "Set-NetFirewallRule",
        "Set-NetFirewallSecurityFilter",
        "Set-NetFirewallServiceFilter",
        "Set-NetFirewallSetting",
        "Set-NetIPsecDospSetting",
        "Set-NetIPsecMainModeCryptoSet",
        "Set-NetIPsecMainModeRule",
        "Set-NetIPsecPhase1AuthSet",
        "Set-NetIPsecPhase2AuthSet",
        "Set-NetIPsecQuickModeCryptoSet",
        "Set-NetIPsecRule",
        "Show-NetFirewallRule",
        "Show-NetIPsecRule",
        "Sync-NetIPsecRule",
        "Update-NetIPsecRule"
    )
    CmdletsToExport = @(
        "Get-DAPolicyChange",
        "New-NetIPsecAuthProposal",
        "New-NetIPsecMainModeCryptoProposal",
        "New-NetIPsecQuickModeCryptoProposal"
    )
    AliasesToExport = @(
    )
}

</Data>
      <Data Name="ScriptBlockId">2d355c1b-5107-4c29-91a7-0dbbc52878c9</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.536050300Z" />
      <EventRecordID>2455</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetFirewallRule" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallRule&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Enabled"&gt;
            &lt;Type PSType="NetSecurity.Enabled"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Direction"&gt;
            &lt;Type PSType="NetSecurity.Direction"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Action"&gt;
            &lt;Type PSType="NetSecurity.Action"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="EdgeTraversalPolicy"&gt;
            &lt;Type PSType="NetSecurity.EdgeTraversal"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="LooseSourceMapping"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery" Aliases="LSM"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="LocalOnlyMapping"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Owner"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByAddress" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallAddressFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallAddressFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByApplication" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallApplicationFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallApplicationFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByInterface" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallInterfaceFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallInterfaceFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByInterfaceType" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallInterfaceTypeFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallInterfaceTypeFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByProtocolPort" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallPortFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallPortFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterBySecurity" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallSecurityFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallSecurityFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByService" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallServiceFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallServiceFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetFirewallRuleInProfile" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallProfile" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallProfile"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.Enabled"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Profiles"&gt;
              &lt;Type PSType="NetSecurity.Profile"/&gt;
              &lt;CmdletParameterMetadata PSName="Profile"/&gt;
          </Data>
      <Data Name="ScriptBlockId">38d51585-8aae-4afa-9c91-1f1d6ed7d0b6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.536050300Z" />
      <EventRecordID>2456</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">  &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Platforms"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Platform"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Direction"&gt;
              &lt;Type PSType="NetSecurity.Direction"/&gt;
              &lt;CmdletParameterMetadata PSName="Direction"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Action"&gt;
              &lt;Type PSType="NetSecurity.Action"/&gt;
              &lt;CmdletParameterMetadata PSName="Action"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EdgeTraversalPolicy"&gt;
              &lt;Type PSType="NetSecurity.EdgeTraversal"/&gt;
              &lt;CmdletParameterMetadata PSName="EdgeTraversalPolicy"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LooseSourceMapping"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata Aliases="LSM" PSName="LooseSourceMapping"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalOnlyMapping"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalOnlyMapping"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Owner"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Owner"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Protocol"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Protocol"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalPort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalPort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemotePort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemotePort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:IcmpType"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:DynamicTransport"&gt;
              &lt;Type PSType="NetSecurity.DynamicTransport"/&gt;
              &lt;CmdletParameterMetadata Aliases="DynamicTransport" PSName="DynamicTarget"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Program"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Program"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Package"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Package"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Service"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Service"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceAlias"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceAlias"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceType"&gt;
              &lt;Type PSType="NetSecurity.InterfaceType"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalUser"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalUser"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteUser"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteUser"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteMachine"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteMachine"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Authentication"&gt;
              &lt;Type PSType="NetSecurity.Authentication"/&gt;
              &lt;CmdletParameterMetadata PSName="Authentication"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Encryption"&gt;
              &lt;Type PSType="NetSecurity.Encryption"/&gt;
              &lt;CmdletParameterMetadata PSName="Encryption"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:OverrideBlockRules"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="OverrideBlockRules"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="ID" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Enable" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Enable"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Disable" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Disable"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata Aliases="ID" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.Enabled"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Profiles"&gt;
              &lt;Type PSType="NetSecurity.Profile"/&gt;
              &lt;CmdletParameterMetadata PSName="Profile"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Platforms"&gt;
              &lt;Type PSType="string[]"/&gt;
         </Data>
      <Data Name="ScriptBlockId">38d51585-8aae-4afa-9c91-1f1d6ed7d0b6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.536050300Z" />
      <EventRecordID>2457</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">     &lt;CmdletParameterMetadata PSName="Platform"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Direction"&gt;
              &lt;Type PSType="NetSecurity.Direction"/&gt;
              &lt;CmdletParameterMetadata PSName="Direction"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Action"&gt;
              &lt;Type PSType="NetSecurity.Action"/&gt;
              &lt;CmdletParameterMetadata PSName="Action"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EdgeTraversalPolicy"&gt;
              &lt;Type PSType="NetSecurity.EdgeTraversal"/&gt;
              &lt;CmdletParameterMetadata PSName="EdgeTraversalPolicy"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LooseSourceMapping"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata Aliases="LSM" PSName="LooseSourceMapping"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalOnlyMapping"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalOnlyMapping"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Owner"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Owner"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Protocol"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Protocol"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalPort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalPort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemotePort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemotePort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:IcmpType"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:DynamicTransport"&gt;
              &lt;Type PSType="NetSecurity.DynamicTransport"/&gt;
              &lt;CmdletParameterMetadata Aliases="DynamicTransport" PSName="DynamicTarget"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Program"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Program"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Package"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Package"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Service"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Service"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceAlias"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceAlias"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceType"&gt;
              &lt;Type PSType="NetSecurity.InterfaceType"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalUser"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalUser"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteUser"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteUser"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteMachine"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteMachine"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Authentication"&gt;
              &lt;Type PSType="NetSecurity.Authentication"/&gt;
              &lt;CmdletParameterMetadata PSName="Authentication"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Encryption"&gt;
              &lt;Type PSType="NetSecurity.Encryption"/&gt;
              &lt;CmdletParameterMetadata PSName="Encryption"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:OverrideBlockRules"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="OverrideBlockRules"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Show"/&gt;
        &lt;Method MethodName="EnumerateFull"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Dependents"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement"/&gt;
              &lt;CmdletOutputMetadata PSName="Dependents"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.Enabled" UnderlyingType="uint16"&gt;
      &lt;Value Name="True" Value="1"/&gt;
      &lt;Value Name="False" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Profile" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Public" Value="4"/&gt;
      &lt;Value Name="Private" Value="2"/&gt;
      &lt;Value Name="Domain" Value="1"/&gt;
      &lt;Value Name="NotApplicable" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Direction" UnderlyingType="uint16"&gt;
      &lt;Value Name="Inbound" Value="1"/&gt;
      &lt;Value Name="Outbound" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Action" UnderlyingType="uint16"&gt;
      &lt;Value Name="NotConfigured" Value="0"/&gt;
      &lt;Value Name="Allow" Value="2"/&gt;
      &lt;Value Name="Block" Value="4"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.EdgeTraversal" UnderlyingType="uint16"&gt;
      &lt;Value Name="Block" Value="0"/&gt;
      &lt;Value Name="Allow" Value="1"/&gt;
      &lt;Value Name="DeferToUser" Value="2"/&gt;
      &lt;Value Name="DeferToApp" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.DynamicTransport" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="ProximityApps" Value="1"/&gt;
      &lt;Value Name="ProximitySharing" Value="2"/&gt;
      &lt;Value Name="WifiDirectPrinting" Value="4"/&gt;
      &lt;Value Name="WifiDirectDisplay" Value="8"/&gt;
      &lt;Value Name="WifiDirectDevices" Value="16"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.InterfaceType" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Wired" Value="1"/&gt;
      &lt;Value Name="Wireless" Value="2"/&gt;
      &lt;Value Name="RemoteAccess" Value="4"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Authentication" UnderlyingType="uint16"&gt;
      &lt;Value Name="NotRequired" Value="0"/&gt;
      &lt;Value Name="Required" Value="1"/&gt;
      &lt;Value Name="NoEncap" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Encryption" UnderlyingType="uint16"&gt;
      &lt;Value Name="NotRequired" Value="0"/&gt;
      &lt;Value Name="Required" Value="1"/&gt;
      &lt;Value Name="Dynamic" Value="2"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">38d51585-8aae-4afa-9c91-1f1d6ed7d0b6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2458</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Direction')) {
          [object]$__cmdletization_value = ${Direction}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'I</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2459</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">n'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Action')) {
          [object]$__cmdletization_value = ${Action}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
          [object]$__cmdletization_value = ${EdgeTraversalPolicy}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
          [object]$__cmdletization_value = ${LooseSourceMapping}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
          [object]$__cmdletization_value = ${LocalOnlyMapping}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Owner')) {
          [object]$__cmdletization_value = ${Owner}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpType')) {
          [object]$__cmdletization_value = ${IcmpType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
          [object]$__cmdletization_value = ${DynamicTarget}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Program')) {
          [object]$__cmdletization_value = ${Program}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Package')) {
          [object]$__cmdletization_value = ${Package}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Service')) {
          [object]$__cmdletization_value = ${Service}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_def</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2460</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">aultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalUser')) {
          [object]$__cmdletization_value = ${LocalUser}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteUser')) {
          [object]$__cmdletization_value = ${RemoteUser}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
          [object]$__cmdletization_value = ${RemoteMachine}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Authentication')) {
          [object]$__cmdletization_value = ${Authentication}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Encryption')) {
          [object]$__cmdletization_value = ${Encryption}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
          [object]$__cmdletization_value = ${OverrideBlockRules}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule'
        

function Show-NetFirewallRule
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule'
        

function Get-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2461</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.Conta</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2462</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">insKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule'
        

function Set-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletizatio</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2463</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">n_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Direction')) {
            [object]$__cmdletization_value = ${Direction}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
            [object]$__cmdletization_value = ${EdgeTraversalPolicy}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
            [object]$__cmdletization_value = ${LooseSourceMapping}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
            [object]$__cmdletization_value = ${LocalOnlyMapping}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Owner')) {
            [object]$__cmdletization_value = ${Owner}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__c</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2464</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">mdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule'
        

function Remove-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
   </Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2465</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText"> ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2466</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule'
        

function Rename-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(Par</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2467</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">ameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_met</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2468</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">11</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">hodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule'
        

function Copy-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdle</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2469</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">12</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">t.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule'
        

function Enable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreS</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2470</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">13</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">ource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MS</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2471</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">14</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">FT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule'
        

function Disable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssocia</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.582926100Z" />
      <EventRecordID>2472</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9ccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">15</Data>
      <Data Name="MessageTotal">15</Data>
      <Data Name="ScriptBlockText">tedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule'
        
</Data>
      <Data Name="ScriptBlockId">11f9b83b-21ae-460c-a2df-c71580b19e46</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.598544600Z" />
      <EventRecordID>2473</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-41ed-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 22
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.598544600Z" />
      <EventRecordID>2474</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-42ed-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 24
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.614172800Z" />
      <EventRecordID>2475</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b6cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">@{
GUID="1DA87E53-152B-403E-98DC-74D7B4D63D59"
Author="Microsoft Corporation"
CompanyName="Microsoft Corporation"
Copyright="⌐ Microsoft Corporation. All rights reserved."
ModuleVersion="3.1.0.0"
PowerShellVersion="3.0"
CLRVersion="4.0"
CmdletsToExport= "Format-List", "Format-Custom", "Format-Table", "Format-Wide",
    "Out-File", "Out-Printer", "Out-String",
    "Out-GridView", "Get-FormatData", "Export-FormatData", "ConvertFrom-Json", "ConvertTo-Json",
    "Invoke-RestMethod", "Invoke-WebRequest", "Register-ObjectEvent", "Register-EngineEvent",
    "Wait-Event", "Get-Event", "Remove-Event", "Get-EventSubscriber", "Unregister-Event",
    "New-Event", "Add-Member", "Add-Type", "Compare-Object", "ConvertTo-Html", "ConvertFrom-StringData",
    "Export-Csv", "Import-Csv", "ConvertTo-Csv", "ConvertFrom-Csv", "Export-Alias", "Invoke-Expression",
    "Get-Alias", "Get-Culture", "Get-Date", "Get-Host", "Get-Member", "Get-Random", "Get-UICulture",
    "Get-FileHash", "Get-Unique", "Export-PSSession", "Import-PSSession", "Import-Alias", "Import-LocalizedData",
    "Select-String", "Measure-Object", "New-Alias", "New-TimeSpan", "Read-Host", "Set-Alias", "Set-Date",
    "Start-Sleep", "Tee-Object", "Measure-Command", "Update-List", "Update-TypeData", "Update-FormatData",
    "Remove-TypeData", "Get-TypeData", "Write-Host", "Write-Progress", "New-Object", "Select-Object",
    "Group-Object", "Sort-Object", "Get-Variable", "New-Variable", "Set-Variable", "Remove-Variable",
    "Clear-Variable", "Export-Clixml", "Import-Clixml", "ConvertTo-Xml", "Select-Xml", "Write-Debug",
    "Write-Verbose", "Write-Warning", "Write-Error", "Write-Output", "Set-PSBreakpoint", "Get-PSBreakpoint",
    "Remove-PSBreakpoint", "Enable-PSBreakpoint", "Disable-PSBreakpoint", "Get-PSCallStack",
    "Send-MailMessage", "Get-TraceSource", "Set-TraceSource", "Trace-Command", "Show-Command", "Unblock-File"
NestedModules="Microsoft.PowerShell.Commands.Utility.dll","Microsoft.PowerShell.Utility.psm1"
HelpInfoURI = 'http://go.microsoft.com/fwlink/?linkid=285758'
}
</Data>
      <Data Name="ScriptBlockId">2a9e63f3-150c-42b1-8781-2005bcdbd656</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2476</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b6cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-FileHash
{
    [CmdletBinding(DefaultParameterSetName = "Path")]
    param(
        [Parameter(Mandatory, ParameterSetName="Path", Position = 0)]
        [System.String[]]
        $Path,

        [Parameter(Mandatory, ParameterSetName="LiteralPath", ValueFromPipelineByPropertyName = $true)]
        [Alias("PSPath")]
        [System.String[]]
        $LiteralPath,
        
        [Parameter(Mandatory, ParameterSetName="Stream")]
        [System.IO.Stream]
        $InputStream,

        [ValidateSet("SHA1", "SHA256", "SHA384", "SHA512", "MACTripleDES", "MD5", "RIPEMD160")]
        [System.String]
        $Algorithm="SHA256"
    )
    
    begin
    {
        # Construct the strongly-typed crypto object
        $hasher = [System.Security.Cryptography.HashAlgorithm]::Create($Algorithm)
    }
    
    process
    {
        if($PSCmdlet.ParameterSetName -eq "Stream")
        {
            GetStreamHash -InputStream $InputStream -RelatedPath $null -Hasher $hasher
        }
        else
        {
            $pathsToProcess = @()
            if($PSCmdlet.ParameterSetName  -eq "LiteralPath")
            {
                $pathsToProcess += Resolve-Path -LiteralPath $LiteralPath | Foreach-Object ProviderPath
            }
            if($PSCmdlet.ParameterSetName -eq "Path")
            {
                $pathsToProcess += Resolve-Path $Path | Foreach-Object ProviderPath
            }

            foreach($filePath in $pathsToProcess)
            {
                if(Test-Path -LiteralPath $filePath -PathType Container)
                {
                    continue
                }

                try
                {
                    # Read the file specified in $FilePath as a Byte array
                    [system.io.stream]$stream = [system.io.file]::OpenRead($filePath)
                    GetStreamHash -InputStream $stream  -RelatedPath $filePath -Hasher $hasher
                }
                catch [Exception]
                {
                    $errorMessage = [Microsoft.PowerShell.Commands.UtilityResources]::FileReadError -f $FilePath, $_
                    Write-Error -Message $errorMessage -Category ReadError -ErrorId "FileReadError" -TargetObject $FilePath
                    return
                }
                finally
                {
                    if($stream)
                    {
                        $stream.Close()
                    }
                }                            
            }
        }
    }
}

function GetStreamHash
{
    param(
        [System.IO.Stream]
        $InputStream,

        [System.String]
        $RelatedPath,

        [System.Security.Cryptography.HashAlgorithm]
        $Hasher)

    # Compute file-hash using the crypto object
    [Byte[]] $computedHash = $Hasher.ComputeHash($InputStream)
    [string] $hash = [BitConverter]::ToString($computedHash) -replace '-',''

    if ($RelatedPath -eq $null)
    {
        $retVal = [PSCustomObject] @{
            Algorithm = $Algorithm.ToUpperInvariant()
            Hash = $hash
        }
        $retVal.psobject.TypeNames.Insert(0, "Microsoft.Powershell.Utility.FileHash")
        $retVal
    }
    else
    {
        $retVal = [PSCustomObject] @{
            Algorithm = $Algorithm.ToUpperInvariant()
            Hash = $hash
            Path = $RelatedPath
        }
        $retVal.psobject.TypeNames.Insert(0, "Microsoft.Powershell.Utility.FileHash")
        $retVal

    }
}

# SIG # Begin signature block
# MIIavwYJKoZIhvcNAQcCoIIasDCCGqwCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQU4uPI6oMmN45jE4gtibs9Byjz
# 1dCgghWCMIIEwzCCA6ugAwIBAgITMwAAADUo7mFTkiJhkQAAAAAANTANBgkqhkiG
# 9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
# A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEw
# HwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTMwMzI3MjAwODI2
# WhcNMTQwNjI3MjAwODI2WjCBszELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
# bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
# b3JhdGlvbjENMAsGA1UECxMETU9QUjEnMCUGA1UECxMebkNpcGhlciBEU0UgRVNO
# OjMxQzUtMzBCQS03QzkxMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
# ZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm9vWEfGEH1m0
# kUedzTgvsolxQaJbPc6WtX2a9wqAK0ICg8R8//f26pcftWw4XkuVVOjsk9K5TeT3
# KyaHr7vrG+hNHCFDF/igM5qRsYFNOIEkUwKxdnlaLqz7y4xcXTubXKU7NoBsI3S2
# xnffQyfNOpmouBP65aqjt8VzhFbsjsFIMwGJMa8nNq07LQDicQQxvva3dLFnP1rl
# hLUBJpB4iYAlPj5CHFJKZCcCaM6iBr7QtT5EF4CZiImcwLkP1fI5lcM1FLsJEEW5
# 6m5frIDLh3xFZAImCU+adqVmvhBJKKO57P+y+mFb+WPqknL1SurKOz0TkYw7/TnW
# STwC7nod4QIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFLkUVdsQ7WBr1Q2DdA3Oc3OV
# ImUcMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEsw
# SaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3Rz
# L01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsG
# AQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jv
# c29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZI
# hvcNAQEFBQADggEBAJaVlxhREadlaCDXqFbP6lUQVKjx5/JsbwouUz8YgQjPN/Y1
# ymKKoJBe4u9HzqrHBZj93hq26BKkmrnKpWKvyOY+ODJcA9PzaPlgnMeyJdykTGuP
# BsvYtsFYIn6E1Wu56PE+L3n28vpsaOjKAl8BvrGgbPmPRbm4SwZfxJSO9+3r1yFa
# uFZbeGfcQAl82pKj27zQmh2O5snaz1Iff7+W3owsX20ilqNJ+acaIl7/6cpyJUC4
# 87hUHlrIV1CyiyLmEOyt7aUQlFLU7VtXgskXVPZ03lGrVDTglUY63lUwGhdwL5f2
# CgYipvqCjochior3gYxSN0w6jQRbNcvzG4N1vl0wggTsMIID1KADAgECAhMzAAAA
# sBGvCovQO5/dAAEAAACwMA0GCSqGSIb3DQEBBQUAMHkxCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xIzAhBgNVBAMTGk1pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBMB4XDTEzMDEyNDIyMzMzOVoXDTE0MDQyNDIyMzMzOVowgYMxCzAJ
# BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
# MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDTALBgNVBAsTBE1PUFIx
# HjAcBgNVBAMTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjCCASIwDQYJKoZIhvcNAQEB
# BQADggEPADCCAQoCggEBAOivXKIgDfgofLwFe3+t7ut2rChTPzrbQH2zjjPmVz+l
# URU0VKXPtIupP6g34S1Q7TUWTu9NetsTdoiwLPBZXKnr4dcpdeQbhSeb8/gtnkE2
# KwtA+747urlcdZMWUkvKM8U3sPPrfqj1QRVcCGUdITfwLLoiCxCxEJ13IoWEfE+5
# G5Cw9aP+i/QMmk6g9ckKIeKq4wE2R/0vgmqBA/WpNdyUV537S9QOgts4jxL+49Z6
# dIhk4WLEJS4qrp0YHw4etsKvJLQOULzeHJNcSaZ5tbbbzvlweygBhLgqKc+/qQUF
# 4eAPcU39rVwjgynrx8VKyOgnhNN+xkMLlQAFsU9lccUCAwEAAaOCAWAwggFcMBMG
# A1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBRZcaZaM03amAeA/4Qevof5cjJB
# 8jBRBgNVHREESjBIpEYwRDENMAsGA1UECxMETU9QUjEzMDEGA1UEBRMqMzE1OTUr
# NGZhZjBiNzEtYWQzNy00YWEzLWE2NzEtNzZiYzA1MjM0NGFkMB8GA1UdIwQYMBaA
# FMsR6MrStBZYAck3LjMWFrlMmgofMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9j
# cmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8w
# OC0zMS0yMDEwLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6
# Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzA4LTMx
# LTIwMTAuY3J0MA0GCSqGSIb3DQEBBQUAA4IBAQAx124qElczgdWdxuv5OtRETQie
# 7l7falu3ec8CnLx2aJ6QoZwLw3+ijPFNupU5+w3g4Zv0XSQPG42IFTp8263Os8ls
# ujksRX0kEVQmMA0N/0fqAwfl5GZdLHudHakQ+hywdPJPaWueqSSE2u2WoN9zpO9q
# GqxLYp7xfMAUf0jNTbJE+fA8k21C2Oh85hegm2hoCSj5ApfvEQO6Z1Ktwemzc6bS
# Y81K4j7k8079/6HguwITO10g3lU/o66QQDE4dSheBKlGbeb1enlAvR/N6EXVruJd
# PvV1x+ZmY2DM1ZqEh40kMPfvNNBjHbFCZ0oOS786Du+2lTqnOOQlkgimiGaCMIIF
# vDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZIm
# iZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQD
# EyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMx
# MjIxOTMyWhcNMjAwODMxMjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBD
# QTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJyWVwZMGS/HZpgICBC
# mXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1VwqJyq4gSfTw
# aKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJcap6Vy
# c1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ
# +NKNYv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dP
# Y+fSLWLxRT3nrAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlf
# A9MCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrS
# tBZYAck3LjMWFrlMmgofMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQAB
# MCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGYYDuoMW+mPLzYLTAZBgkrBgEEAYI3
# FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnk
# pDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtp
# L2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEE
# SDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2Nl
# cnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+
# fyZGr+tvQLEytWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6
# oqhWnONwu7i0+Hm1SXL3PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW
# 4LiKS1fylUKc8fPv7uOGHzQ8uFaa8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb
# 0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5Y1ZEolHN+emjWFbdmwJFRC9f9Nqu
# 1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU8XofSrvR4Vbo0HiWGFzJ
# NRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18KUicctHzbMrB
# 7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUeDord
# EN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7t
# s3Z52Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jsh
# rg1cnPCiroZogwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6I
# ybgY+g5yjcGjPa8CQGr/aZuW4hCoELQ3UAjWwz0wggYHMIID76ADAgECAgphFmg0
# AAAAAAAcMA0GCSqGSIb3DQEBBQUAMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAX
# BgoJkiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290
# IENlcnRpZmljYXRlIEF1dGhvcml0eTAeFw0wNzA0MDMxMjUzMDlaFw0yMTA0MDMx
# MzAzMDlaMHcxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
# VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xITAf
# BgNVBAMTGE1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQTCCASIwDQYJKoZIhvcNAQEB
# BQADggEPADCCAQoCggEBAJ+hbLHf20iSKnxrLhnhveLjxZlRI1Ctzt0YTiQP7tGn
# 0UytdDAgEesH1VSVFUmUG0KSrphcMCbaAGvoe73siQcP9w4EmPCJzB/LMySHnfL0
# Zxws/HvniB3q506jocEjU8qN+kXPCdBer9CwQgSi+aZsk2fXKNxGU7CG0OUoRi4n
# rIZPVVIM5AMs+2qQkDBuh/NZMJ36ftaXs+ghl3740hPzCLdTbVK0RZCfSABKR2YR
# JylmqJfk0waBSqL5hKcRRxQJgp+E7VV4/gGaHVAIhQAQMEbtt94jRrvELVSfrx54
# QTF3zJvfO4OToWECtR0Nsfz3m7IBziJLVP/5BcPCIAsCAwEAAaOCAaswggGnMA8G
# A1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFCM0+NlSRnAK7UD7dvuzK7DDNbMPMAsG
# A1UdDwQEAwIBhjAQBgkrBgEEAYI3FQEEAwIBADCBmAYDVR0jBIGQMIGNgBQOrIJg
# QFYnl+UlE/wq4QpTlVnkpKFjpGEwXzETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcG
# CgmSJomT8ixkARkWCW1pY3Jvc29mdDEtMCsGA1UEAxMkTWljcm9zb2Z0IFJvb3Qg
# Q2VydGlmaWNhdGUgQXV0aG9yaXR5ghB5rRahSqClrUxzWPQHEy5lMFAGA1UdHwRJ
# MEcwRaBDoEGGP2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
# Y3RzL21pY3Jvc29mdHJvb3RjZXJ0LmNybDBUBggrBgEFBQcBAQRIMEYwRAYIKwYB
# BQUHMAKGOGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljcm9z
# b2Z0Um9vdENlcnQuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEB
# BQUAA4ICAQAQl4rDXANENt3ptK132855UU0BsS50cVttDBOrzr57j7gu1BKijG1i
# uFcCy04gE1CZ3XpA4le7r1iaHOEdAYasu3jyi9DsOwHu4r6PCgXIjUji8FMV3U+r
# kuTnjWrVgMHmlPIGL4UD6ZEqJCJw+/b85HiZLg33B+JwvBhOnY5rCnKVuKE5nGct
# xVEO6mJcPxaYiyA/4gcaMvnMMUp2MT0rcgvI6nA9/4UKE9/CCmGO8Ne4F+tOi3/F
# NSteo7/rvH0LQnvUU3Ih7jDKu3hlXFsBFwoUDtLaFJj1PLlmWLMtL+f5hYbMUVbo
# nXCUbKw5TNT2eb+qGHpiKe+imyk0BncaYsk9Hm0fgvALxyy7z0Oz5fnsfbXjpKh0
# NbhOxXEjEiZ2CzxSjHFaRkMUvLOzsE1nyJ9C/4B5IYCeFTBm6EISXhrIniIh0EPp
# K+m79EjMLNTYMoBMJipIJF9a6lbvpt6Znco6b72BJ3QGEe52Ib+bgsEnVLaxaj2J
# oXZhtG6hE6a/qkfwEm/9ijJssv7fUciMI8lmvZ0dhxJkAj0tr1mPuOQh5bWwymO0
# eFQF1EEuUKyUsKV4q7OglnUa2ZKHE3UiLzKoCG6gW4wlv6DvhMoh1useT8ma7kng
# 9wFlb4kLfchpyOZu6qeXzjEp/w7FW1zYTRuh2Povnj8uVRZryROj/TGCBKcwggSj
# AgEBMIGQMHkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
# VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xIzAh
# BgNVBAMTGk1pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBAhMzAAAAsBGvCovQO5/d
# AAEAAACwMAkGBSsOAwIaBQCggcAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
# HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwIwYJKoZIhvcNAQkEMRYEFClk
# UQl5qDpcmXxdpFeDJK8FifcsMGAGCisGAQQBgjcCAQwxUjBQoCaAJABXAGkAbgBk
# AG8AdwBzACAAUABvAHcAZQByAFMAaABlAGwAbKEmgCRodHRwOi8vd3d3Lm1pY3Jv
# c29mdC5jb20vcG93ZXJzaGVsbCAwDQYJKoZIhvcNAQEBBQAEggEALlxQato88b0W
# GuCgTkjSdxozipikRZRALhDIbPeqH6HtmgJcwK723FNOko6J0Xrhnt1w+Ypx77X2
# 8yP9Hu2sG+Cm+vH4RcLCKR9zAUQGmURsoNhCcRebCKchavCcPqYzL8WmMToUVuEB
# epnqGcNr8gMvhur6+Tw22bJewK48IdD96JBDVEoihHj8d0jwM19UFPuT+EmebCRv
# 8ii/hESmbCZnwQclRzaoA3oJ+odsWN+XbE3fHhrGSfnE7yaiMKsyHKQ+RsV9c1x9
# /XgOkPj1o/cfKgQ0qeOamP7HmABCWv9jGBaQ/lpLASraT6gaTl9yEPvuKx1ozorh
# G1o2H651lKGCAigwggIkBgkqhkiG9w0BCQYxggIVMIICEQIBATCBjjB3MQswCQYD
# VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEe
# MBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3Nv
# ZnQgVGltZS1TdGFtcCBQQ0ECEzMAAAA1KO5hU5IiYZEAAAAAADUwCQYFKw4DAhoF
# AKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEz
# MTIxODAwMjI1OFowIwYJKoZIhvcNAQkEMRYEFKH1XT6678OZm4aTERf5dKwwQZed
# MA0GCSqGSIb3DQEBBQUABIIBAGgc0v8jALuDbFhj0n+eoe+T+K3O7SCk9SDcc8wC
# 9MP+HYeyr7IvyMJY9Prn1v/JEkUNBczhWmFluGBzw1ASpTkP5hJRbdZFiQkbtqR1
# PZi8TWsbcoWjbqzwR3fgiwydRlkDu0zKO+P3pbuHFgO2ACb7ggLRllTgfWNJFZGg
# iHFwS0JLQttb18AZTZyt7VteGhzOrcfRP97+bPpidJXfR1eMXbeoXuAROO0LdNP1
# 6QcsS/++dFMLo+s7ISTcdh9OTKg672kD7zo2+UKZ/MvJbsOikD7cFJppM2ZDCnvi
# S5HhTmzKz47z2m+/DsWq7NMZ1pfJFojTeMw8niuUPNOZWRg=
# SIG # End signature block
</Data>
      <Data Name="ScriptBlockId">16d76d76-3735-4dba-b212-ff9bf3329a0f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2477</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b6cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-FileHash
{
    [CmdletBinding(DefaultParameterSetName = "Path")]
    param(
        [Parameter(Mandatory, ParameterSetName="Path", Position = 0)]
        [System.String[]]
        $Path,

        [Parameter(Mandatory, ParameterSetName="LiteralPath", ValueFromPipelineByPropertyName = $true)]
        [Alias("PSPath")]
        [System.String[]]
        $LiteralPath,
        
        [Parameter(Mandatory, ParameterSetName="Stream")]
        [System.IO.Stream]
        $InputStream,

        [ValidateSet("SHA1", "SHA256", "SHA384", "SHA512", "MACTripleDES", "MD5", "RIPEMD160")]
        [System.String]
        $Algorithm="SHA256"
    )
    
    begin
    {
        # Construct the strongly-typed crypto object
        $hasher = [System.Security.Cryptography.HashAlgorithm]::Create($Algorithm)
    }
    
    process
    {
        if($PSCmdlet.ParameterSetName -eq "Stream")
        {
            GetStreamHash -InputStream $InputStream -RelatedPath $null -Hasher $hasher
        }
        else
        {
            $pathsToProcess = @()
            if($PSCmdlet.ParameterSetName  -eq "LiteralPath")
            {
                $pathsToProcess += Resolve-Path -LiteralPath $LiteralPath | Foreach-Object ProviderPath
            }
            if($PSCmdlet.ParameterSetName -eq "Path")
            {
                $pathsToProcess += Resolve-Path $Path | Foreach-Object ProviderPath
            }

            foreach($filePath in $pathsToProcess)
            {
                if(Test-Path -LiteralPath $filePath -PathType Container)
                {
                    continue
                }

                try
                {
                    # Read the file specified in $FilePath as a Byte array
                    [system.io.stream]$stream = [system.io.file]::OpenRead($filePath)
                    GetStreamHash -InputStream $stream  -RelatedPath $filePath -Hasher $hasher
                }
                catch [Exception]
                {
                    $errorMessage = [Microsoft.PowerShell.Commands.UtilityResources]::FileReadError -f $FilePath, $_
                    Write-Error -Message $errorMessage -Category ReadError -ErrorId "FileReadError" -TargetObject $FilePath
                    return
                }
                finally
                {
                    if($stream)
                    {
                        $stream.Close()
                    }
                }                            
            }
        }
    }
}</Data>
      <Data Name="ScriptBlockId">44131621-ae8e-417e-a2c3-a8e393f89299</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2478</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b6cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function GetStreamHash
{
    param(
        [System.IO.Stream]
        $InputStream,

        [System.String]
        $RelatedPath,

        [System.Security.Cryptography.HashAlgorithm]
        $Hasher)

    # Compute file-hash using the crypto object
    [Byte[]] $computedHash = $Hasher.ComputeHash($InputStream)
    [string] $hash = [BitConverter]::ToString($computedHash) -replace '-',''

    if ($RelatedPath -eq $null)
    {
        $retVal = [PSCustomObject] @{
            Algorithm = $Algorithm.ToUpperInvariant()
            Hash = $hash
        }
        $retVal.psobject.TypeNames.Insert(0, "Microsoft.Powershell.Utility.FileHash")
        $retVal
    }
    else
    {
        $retVal = [PSCustomObject] @{
            Algorithm = $Algorithm.ToUpperInvariant()
            Hash = $hash
            Path = $RelatedPath
        }
        $retVal.psobject.TypeNames.Insert(0, "Microsoft.Powershell.Utility.FileHash")
        $retVal

    }
}</Data>
      <Data Name="ScriptBlockId">e59d44d2-d64c-4e01-a200-a56a9dc96066</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2479</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b7cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 26
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2480</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b8cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 28
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2481</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b8cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">a22c859a-3f32-4275-a0e3-04eaeac79a52</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2482</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b8cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function New-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value =</Data>
      <Data Name="ScriptBlockId">9d99205d-c1f4-4986-9cb0-d98adc84349a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2483</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b8cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText"> $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Direction')) {
          [object]$__cmdletization_value = ${Direction}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Action')) {
          [object]$__cmdletization_value = ${Action}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
          [object]$__cmdletization_value = ${EdgeTraversalPolicy}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
          [object]$__cmdletization_value = ${LooseSourceMapping}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
          [object]$__cmdletization_value = ${LocalOnlyMapping}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Owner')) {
          [object]$__cmdletization_value = ${Owner}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpType')) {
          [object]$__cmdletization_value = ${IcmpType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
          [object]$__cmdletization_value = ${DynamicTarget}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Program')) {
          [object]$__cmdletization_value = ${Program}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_m</Data>
      <Data Name="ScriptBlockId">9d99205d-c1f4-4986-9cb0-d98adc84349a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.661043000Z" />
      <EventRecordID>2484</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b8cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">ethodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Package')) {
          [object]$__cmdletization_value = ${Package}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Service')) {
          [object]$__cmdletization_value = ${Service}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalUser')) {
          [object]$__cmdletization_value = ${LocalUser}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteUser')) {
          [object]$__cmdletization_value = ${RemoteUser}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
          [object]$__cmdletization_value = ${RemoteMachine}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Authentication')) {
          [object]$__cmdletization_value = ${Authentication}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Encryption')) {
          [object]$__cmdletization_value = ${Encryption}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
          [object]$__cmdletization_value = ${OverrideBlockRules}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">9d99205d-c1f4-4986-9cb0-d98adc84349a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2485</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d7-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 30
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2486</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d7-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Show-NetFirewallRule
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">a3a6c366-8c24-4f29-9780-51fe21275435</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2487</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 32
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2488</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters</Data>
      <Data Name="ScriptBlockId">c329d24d-7272-4da6-b396-ebe15349b05c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2489</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-b9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">c329d24d-7272-4da6-b396-ebe15349b05c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2490</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 34
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2491</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
   </Data>
      <Data Name="ScriptBlockId">a07db219-0e6e-476d-9932-ec3360850c73</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2492</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">     {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Direction')) {
            [object]$__cmdletization_value = ${Direction}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
            [object]$__cmdletization_value = ${EdgeTraversalPolicy}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
            [object]$__cmdletization_value = ${LooseSourceMapping}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
            [object]$__cmdletization_value = ${LocalOnlyMapping}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
</Data>
      <Data Name="ScriptBlockId">a07db219-0e6e-476d-9932-ec3360850c73</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2493</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Owner')) {
            [object]$__cmdletization_value = ${Owner}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletizat</Data>
      <Data Name="ScriptBlockId">a07db219-0e6e-476d-9932-ec3360850c73</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2494</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">ion_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">a07db219-0e6e-476d-9932-ec3360850c73</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2495</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bbcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 36
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2496</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bbcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Remove-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdlet</Data>
      <Data Name="ScriptBlockId">11c0c761-b830-4e8f-ad11-8017b6029570</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2497</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bbcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">ization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">11c0c761-b830-4e8f-ad11-8017b6029570</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2498</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 38
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2499</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function Rename-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAl</Data>
      <Data Name="ScriptBlockId">3ad1b85b-1a4c-4c00-bda0-ccaf2c30c574</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2500</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">l')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}</Data>
      <Data Name="ScriptBlockId">3ad1b85b-1a4c-4c00-bda0-ccaf2c30c574</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2501</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bccb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">3ad1b85b-1a4c-4c00-bda0-ccaf2c30c574</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2502</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bdcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 40
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2503</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bdcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function Copy-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(Pa</Data>
      <Data Name="ScriptBlockId">e9873ed7-eddb-4706-a249-25208e1d8d3f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2504</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bdcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">rameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyS</Data>
      <Data Name="ScriptBlockId">e9873ed7-eddb-4706-a249-25208e1d8d3f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2505</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bdcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">tore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">e9873ed7-eddb-4706-a249-25208e1d8d3f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2506</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-becb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 42
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2507</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-becb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Enable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdlet</Data>
      <Data Name="ScriptBlockId">5f1346d1-56c8-4fdd-8b86-bb9b5f1ca773</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2508</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-becb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">ization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">5f1346d1-56c8-4fdd-8b86-bb9b5f1ca773</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2509</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bfcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 44
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2510</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bfcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Disable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdle</Data>
      <Data Name="ScriptBlockId">9f4e7039-23d4-451a-8aae-0a276cc30ae4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2511</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-bfcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">tization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">9f4e7039-23d4-451a-8aae-0a276cc30ae4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2512</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 46
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2513</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetConSecRule" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecRule&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="IPsecRuleName" ValueFromPipelineByPropertyName="true" CmdletParameterSets="ByIPsecRuleName" IsMandatory="true" Position="0" Aliases="ID Name"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Enabled"&gt;
            &lt;Type PSType="NetSecurity.Enabled"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Mode"&gt;
            &lt;Type PSType="NetSecurity.IPsecMode"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="InboundSecurity"&gt;
            &lt;Type PSType="NetSecurity.SecurityPolicy"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery" Aliases="SecIn"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="OutboundSecurity"&gt;
            &lt;Type PSType="NetSecurity.SecurityPolicy"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery" Aliases="SecOut"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="QuickModeCryptoSet"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Phase1AuthSet"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Phase2AuthSet"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="KeyModule"&gt;
            &lt;Type PSType="NetSecurity.KeyModule"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="AllowWatchKey"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="AllowSetKey"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RemoteTunnelEndpointDNSName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="RemoteTunnelHostname" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="MaxReturnPathLifetimeSeconds"&gt;
            &lt;Type PSType="uint32"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata PSName="ForwardPathLifetime" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="BypassTunnelIfEncrypted"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata PSName="EncryptedTunnelBypass" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RequireAuthorization"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Users"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="User" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Machines"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Machine" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByAddress" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallAddressFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallAddressFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByInterface" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallInterfaceFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallInterfaceFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByInterfaceType" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallInterfaceTypeFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallInterfaceTypeFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByProtocolPort" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallPortFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallPortFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleInProfile" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallProfile" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallProfile"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleEMAuthSet" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecPhase2AuthSet" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecPhase2AuthSet"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleMMAuthSet" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecPhase1AuthSet" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecPhase1AuthSet"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleQMCryptoSet" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecQuickModeCryptoSet" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecQuickModeCryptoSet"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
           </Data>
      <Data Name="ScriptBlockId">8dfda4dc-eed9-4a39-b632-26c7e1f4b540</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2514</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText"> &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.Enabled"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Profiles"&gt;
              &lt;Type PSType="NetSecurity.Profile"/&gt;
              &lt;CmdletParameterMetadata PSName="Profile"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Platforms"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Platform"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Mode"&gt;
              &lt;Type PSType="NetSecurity.IPsecMode"/&gt;
              &lt;CmdletParameterMetadata PSName="Mode"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InboundSecurity"&gt;
              &lt;Type PSType="NetSecurity.SecurityPolicy"/&gt;
              &lt;CmdletParameterMetadata Aliases="SecIn" PSName="InboundSecurity"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="OutboundSecurity"&gt;
              &lt;Type PSType="NetSecurity.SecurityPolicy"/&gt;
              &lt;CmdletParameterMetadata Aliases="SecOut" PSName="OutboundSecurity"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="QuickModeCryptoSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="QuickModeCryptoSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Phase1AuthSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Phase1AuthSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Phase2AuthSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Phase2AuthSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="KeyModule"&gt;
              &lt;Type PSType="NetSecurity.KeyModule"/&gt;
              &lt;CmdletParameterMetadata PSName="KeyModule"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowWatchKey"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowWatchKey"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowSetKey"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowSetKey"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalTunnelEndpoint"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalTunnelEndpoint"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteTunnelEndpoint"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteTunnelEndpoint"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteTunnelEndpointDNSName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteTunnelHostname"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxReturnPathLifetimeSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="ForwardPathLifetime"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="BypassTunnelIfEncrypted"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="EncryptedTunnelBypass"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RequireAuthorization"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="RequireAuthorization"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Users"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="User"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Machines"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Machine"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Protocol"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Protocol"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalPort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalPort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemotePort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemotePort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceAlias"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceAlias"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceType"&gt;
              &lt;Type PSType="NetSecurity.InterfaceType"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceType"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata ValueFromPipelineByPropertyName="true" Aliases="ID Name" PSName="IPsecRuleName" Position="0" IsMandatory="true" CmdletParameterSets="ByIPsecRuleName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Enable" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Enable"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Disable" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Disable"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Sync" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="SyncPolicyDelta"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="Servers"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Servers"&gt;
                &lt;ValidateNotNull/&gt;
                &lt;ValidateNotNullOrEmpty/&gt;
              &lt;/CmdletParameterMetadata&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Domains"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Domains"&gt;
                &lt;ValidateNotNull/&gt;
                &lt;ValidateNotNullOrEmpty/&gt;
              &lt;/CmdletParameterMetadata&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EndpointType"&gt;
              &lt;Type PSType="NetSecurity.EndpointType"/&gt;
              &lt;CmdletParameterMetadata PSName="EndpointType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AddressType"&gt;
              &lt;Type PSType="NetSecurity.AddressVersion"/&gt;
              &lt;CmdletParameterMetadata PSName="AddressType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Output"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletOutputMetadata PSName="Output"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DnsServers"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="DnsServers"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Update" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="SetPolicyDelta"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="Action"&gt;
              &lt;Type PSType="NetSecurity.Chan</Data>
      <Data Name="ScriptBlockId">8dfda4dc-eed9-4a39-b632-26c7e1f4b540</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2515</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">geAction"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" ValueFromPipelineByPropertyName="true" PSName="Action"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IPv6Addresses"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata ValueFromPipelineByPropertyName="true" PSName="IPv6Addresses"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IPv4Addresses"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata ValueFromPipelineByPropertyName="true" PSName="IPv4Addresses"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EndpointType"&gt;
              &lt;Type PSType="NetSecurity.EndpointType"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" ValueFromPipelineByPropertyName="true" PSName="EndpointType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PassThru"&gt;
              &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
              &lt;CmdletParameterMetadata PSName="PassThru"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Output"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletOutputMetadata PSName="Output"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery&gt;
                &lt;CmdletParameterMetadata IsMandatory="true" ValueFromPipelineByPropertyName="true" Aliases="ID Name" PSName="IPsecRuleName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata ValueFromPipelineByPropertyName="true" Aliases="ID Name" PSName="IPsecRuleName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.Enabled"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Profiles"&gt;
              &lt;Type PSType="NetSecurity.Profile"/&gt;
              &lt;CmdletParameterMetadata PSName="Profile"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Platforms"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Platform"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Mode"&gt;
              &lt;Type PSType="NetSecurity.IPsecMode"/&gt;
              &lt;CmdletParameterMetadata PSName="Mode"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InboundSecurity"&gt;
              &lt;Type PSType="NetSecurity.SecurityPolicy"/&gt;
              &lt;CmdletParameterMetadata Aliases="SecIn" PSName="InboundSecurity"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="OutboundSecurity"&gt;
              &lt;Type PSType="NetSecurity.SecurityPolicy"/&gt;
              &lt;CmdletParameterMetadata Aliases="SecOut" PSName="OutboundSecurity"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="QuickModeCryptoSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="QuickModeCryptoSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Phase1AuthSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Phase1AuthSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Phase2AuthSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Phase2AuthSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="KeyModule"&gt;
              &lt;Type PSType="NetSecurity.KeyModule"/&gt;
              &lt;CmdletParameterMetadata PSName="KeyModule"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowWatchKey"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowWatchKey"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowSetKey"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowSetKey"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalTunnelEndpoint"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalTunnelEndpoint"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteTunnelEndpoint"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteTunnelEndpoint"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteTunnelEndpointDNSName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteTunnelHostname"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxReturnPathLifetimeSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="ForwardPathLifetime"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="BypassTunnelIfEncrypted"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="EncryptedTunnelBypass"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RequireAuthorization"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="RequireAuthorization"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Users"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="User"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Machines"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Machine"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Protocol"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Protocol"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalPort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalPort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemotePort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemotePort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceAlias"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceAlias"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:InterfaceType"&gt;
              &lt;Type PSType="NetSecurity.InterfaceType"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceType"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Show"/&gt;
        &lt;Method MethodName="EnumerateFull"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Dependents"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement"/&gt;
              &lt;CmdletOutputMetadata PSName="Dependents"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Find"/&gt;
        &lt;Method MethodName="Find"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="LocalAddress"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteAddress"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Protocol"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Protocol"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalPort"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalPort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemotePort"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="RemotePort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="CmdletOutput"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletOutputMetadata PSName="CmdletOutput"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.Enabled" UnderlyingType="uint16"&gt;
      &lt;Value Name="True" Value="1"/&gt;
      &lt;Value Name="False" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Profile" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Public" Value="4"/&gt;
      &lt;Value Name="Private" Value="2"/&gt;
      &lt;Value Name="Domain" Value="1"/&gt;
      &lt;Value Name="NotApplicable" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.IPsecMode" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Transport" Value="3"/&gt;
      &lt;Value Name="Tunnel" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.SecurityPolicy" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Request" Value="1"/&gt;
      &lt;Value Name="Require" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.KeyModule"</Data>
      <Data Name="ScriptBlockId">8dfda4dc-eed9-4a39-b632-26c7e1f4b540</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.676669400Z" />
      <EventRecordID>2516</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText"> UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="IKEv1" Value="1"/&gt;
      &lt;Value Name="IKEv2" Value="4"/&gt;
      &lt;Value Name="AuthIP" Value="2"/&gt;
      &lt;Value Name="Default" Value="0"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.InterfaceType" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Wired" Value="1"/&gt;
      &lt;Value Name="Wireless" Value="2"/&gt;
      &lt;Value Name="RemoteAccess" Value="4"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.EndpointType" UnderlyingType="uint16"&gt;
      &lt;Value Name="Endpoint1" Value="0"/&gt;
      &lt;Value Name="Endpoint2" Value="1"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.AddressVersion" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="IPv4" Value="1"/&gt;
      &lt;Value Name="IPv6" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.ChangeAction" UnderlyingType="uint16"&gt;
      &lt;Value Name="Add" Value="0"/&gt;
      &lt;Value Name="Delete" Value="1"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">8dfda4dc-eed9-4a39-b632-26c7e1f4b540</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2517</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [string]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${User},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {
          [object]$__cmdletization_value = ${IPsecRuleName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultVa</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2518</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">lue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Mode')) {
          [object]$__cmdletization_value = ${Mode}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
          [object]$__cmdletization_value = ${InboundSecurity}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
          [object]$__cmdletization_value = ${OutboundSecurity}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
          [object]$__cmdletization_value = ${QuickModeCryptoSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
          [object]$__cmdletization_value = ${Phase2AuthSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('KeyModule')) {
          [object]$__cmdletization_value = ${KeyModule}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
          [object]$__cmdletization_value = ${AllowWatchKey}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
          [object]$__cmdletization_value = ${AllowSetKey}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
          [object]$__cmdletization_value = ${LocalTunnelEndpoint}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
          [object]$__cmdletization_value = ${RemoteTunnelHostname}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
          [object]$__cmdletization_value = ${ForwardPathLifetime}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
          [object]$__cmdletization_value = ${EncryptedTunnelBypass}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
          [object]$__cmdletization_value = ${RequireAuthorization}
          $__cmdletization_methodParameter = Microsoft.PowerShell.</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2519</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('User')) {
          [object]$__cmdletization_value = ${User}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Machine')) {
          [object]$__cmdletization_value = ${Machine}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule'
        

function Show-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Dependents'; ParameterType = 'Microsoft.M</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2520</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">anagement.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule'
        

function Find-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Find2')]
    [string]
    ${LocalAddress},

    [Parameter(ParameterSetName='Find2', Mandatory=$true)]
    [string]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Find2')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${LocalPort},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${RemotePort},

    [Parameter(ParameterSetName='Find2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Find2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Find2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule'
        

function Get-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, Value</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2521</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">FromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        </Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2522</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">$__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule'
        

function Set-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${User},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(Param</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2523</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">eterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Mode')) {
            [object]$__cmdletization_value = ${Mode}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
            [object]$__cmdletization_value = ${InboundSecurity}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
            [object]$__cmdletization_value = ${OutboundSecurity}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
            [object]$__cmdletization_value = ${QuickModeCryptoSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2524</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
            [object]$__cmdletization_value = ${Phase2AuthSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyModule')) {
            [object]$__cmdletization_value = ${KeyModule}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
            [object]$__cmdletization_value = ${AllowWatchKey}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
            [object]$__cmdletization_value = ${AllowSetKey}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
            [object]$__cmdletization_value = ${LocalTunnelEndpoint}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
            [object]$__cmdletization_value = ${RemoteTunnelHostname}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
            [object]$__cmdletization_value = ${ForwardPathLifetime}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
            [object]$__cmdletization_value = ${EncryptedTunnelBypass}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
            [object]$__cmdletization_value = ${RequireAuthorization}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('User')) {
            [object]$__cmdletization_value = ${User}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Machine')) {
            [object]$__cmdletization_value = ${Machine}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShe</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2525</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">ll.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule'
        

function Remove-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Manage</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2526</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">ment.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.Paramete</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2527</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">11</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">rSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule'
        

function Rename-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2528</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">12</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2529</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">13</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule'
        

function Copy-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
 </Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2530</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">14</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">   [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2531</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">15</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule'
        

function Enable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewal</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2532</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">16</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">lAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'Group</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2533</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">17</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">Component', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule'
        

function Disable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(Par</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2534</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">18</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">ameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All'</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2535</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">19</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">, ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule'
        

function Sync-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Servers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Domains},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAsso</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2536</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">20</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">ciatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]
    ${AddressType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DnsServers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_que</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2537</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">21</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText">ryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Servers')) {
            [object]$__cmdletization_value = ${Servers}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Domains')) {
            [object]$__cmdletization_value = ${Domains}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AddressType')) {
            [object]$__cmdletization_value = ${AddressType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DnsServers')) {
            [object]$__cmdletization_value = ${DnsServers}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule'
        

function Update-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]
    ${Action},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv6Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv4Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.754800300Z" />
      <EventRecordID>2538</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c0cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">22</Data>
      <Data Name="MessageTotal">22</Data>
      <Data Name="ScriptBlockText"> (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {
            [object]$__cmdletization_value = ${IPv6Addresses}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {
            [object]$__cmdletization_value = ${IPv4Addresses}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PassThru')) {
            [object]$__cmdletization_value = ${PassThru}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule'
        
</Data>
      <Data Name="ScriptBlockId">274b926e-e32f-4a32-b8fb-24f845e178d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2539</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c6cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 48
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2540</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c7cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 50
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2541</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c8cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 52
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2542</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 54
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2543</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">37f3ac5a-10e1-43c5-a1b6-c40abfcd8b4a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2544</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [string]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${User},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {
          [object]$__cmdletization_value = ${IPsecRuleName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        </Data>
      <Data Name="ScriptBlockId">0d375072-1da8-4e2f-b925-0153b1e6801c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2545</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">$__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Mode')) {
          [object]$__cmdletization_value = ${Mode}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
          [object]$__cmdletization_value = ${InboundSecurity}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
          [object]$__cmdletization_value = ${OutboundSecurity}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
          [object]$__cmdletization_value = ${QuickModeCryptoSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
          [object]$__cmdletization_value = ${Phase2AuthSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('KeyModule')) {
          [object]$__cmdletization_value = ${KeyModule}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
          [object]$__cmdletization_value = ${AllowWatchKey}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
          [object]$__cmdletization_value = ${AllowSetKey}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
          [object]$__cmdletization_value = ${LocalTunnelEndpoint}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
          [object]$__cmdletization_value = ${RemoteTunnelHostname}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
          [object]$__cmdletization_value = ${ForwardPathLifetime}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } e</Data>
      <Data Name="ScriptBlockId">0d375072-1da8-4e2f-b925-0153b1e6801c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2546</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-c9cb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">lse {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
          [object]$__cmdletization_value = ${EncryptedTunnelBypass}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
          [object]$__cmdletization_value = ${RequireAuthorization}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('User')) {
          [object]$__cmdletization_value = ${User}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Machine')) {
          [object]$__cmdletization_value = ${Machine}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">0d375072-1da8-4e2f-b925-0153b1e6801c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2547</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-cacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 56
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2548</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-cacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Show-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">d89f3c27-a8e0-4cb2-af71-1fb071a83674</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2549</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0dfb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 58
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2550</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0dfb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Find-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Find2')]
    [string]
    ${LocalAddress},

    [Parameter(ParameterSetName='Find2', Mandatory=$true)]
    [string]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Find2')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${LocalPort},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${RemotePort},

    [Parameter(ParameterSetName='Find2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Find2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Find2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">6b60ecf9-b5c4-4201-accc-7c68c8d4e83f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2551</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0efb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 60
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2552</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0efb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', </Data>
      <Data Name="ScriptBlockId">d0999d2f-868e-4d0b-b36e-26f7b752c082</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2553</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0efb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">$__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">d0999d2f-868e-4d0b-b36e-26f7b752c082</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2554</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0ffb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 62
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2555</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0ffb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${User},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('</Data>
      <Data Name="ScriptBlockId">1518bad0-6f90-4ed8-885d-310b55ae31fc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2556</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0ffb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Mode')) {
            [object]$__cmdletization_value = ${Mode}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
            [object]$__cmdletization_value = ${InboundSecurity}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
            [object]$__cmdletization_value = ${OutboundSecurity}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
            [object]$__cmdletization_value = ${QuickModeCryptoSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
            [object]$__cmdletization_value = ${Phase2AuthSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyModule')) {
            [object]$__cmdletization_value = ${KeyModule}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; Param</Data>
      <Data Name="ScriptBlockId">1518bad0-6f90-4ed8-885d-310b55ae31fc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2557</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0ffb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">eterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
            [object]$__cmdletization_value = ${AllowWatchKey}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
            [object]$__cmdletization_value = ${AllowSetKey}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
            [object]$__cmdletization_value = ${LocalTunnelEndpoint}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
            [object]$__cmdletization_value = ${RemoteTunnelHostname}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
            [object]$__cmdletization_value = ${ForwardPathLifetime}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
            [object]$__cmdletization_value = ${EncryptedTunnelBypass}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
            [object]$__cmdletization_value = ${RequireAuthorization}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('User')) {
            [object]$__cmdletization_value = ${User}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Machine')) {
            [object]$__cmdletization_value = ${Machine}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = </Data>
      <Data Name="ScriptBlockId">1518bad0-6f90-4ed8-885d-310b55ae31fc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2558</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-0ffb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">$null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">1518bad0-6f90-4ed8-885d-310b55ae31fc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2559</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3cd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 64
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2560</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3cd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
          </Data>
      <Data Name="ScriptBlockId">31398436-a7be-45d8-bc36-54fc0212adff</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2561</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3cd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">  __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      </Data>
      <Data Name="ScriptBlockId">31398436-a7be-45d8-bc36-54fc0212adff</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2562</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3cd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">$__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">31398436-a7be-45d8-bc36-54fc0212adff</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2563</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3dd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 66
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2564</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3dd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function Rename-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryp</Data>
      <Data Name="ScriptBlockId">8968396c-a305-43bc-859e-8555e72dd854</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2565</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3dd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">toSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickMod</Data>
      <Data Name="ScriptBlockId">8968396c-a305-43bc-859e-8555e72dd854</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2566</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-3dd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">eCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">8968396c-a305-43bc-859e-8555e72dd854</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2567</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-dacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 68
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2568</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-dacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function Copy-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parame</Data>
      <Data Name="ScriptBlockId">aae5a529-db4c-43c5-82a9-bd3c36ea6576</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2569</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-dacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">ter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBo</Data>
      <Data Name="ScriptBlockId">aae5a529-db4c-43c5-82a9-bd3c36ea6576</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.770422000Z" />
      <EventRecordID>2570</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-dacb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">undParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">aae5a529-db4c-43c5-82a9-bd3c36ea6576</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2571</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-10fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 70
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2572</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-10fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Enable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_va</Data>
      <Data Name="ScriptBlockId">a9d64ec3-6359-4c96-b422-18fa4c89cb26</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2573</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-10fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">lues = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">a9d64ec3-6359-4c96-b422-18fa4c89cb26</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2574</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-11fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 72
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2575</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-11fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Disable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_v</Data>
      <Data Name="ScriptBlockId">dd6b79ab-6a09-47df-b666-a4cb6676d7d3</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2576</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-11fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">alues = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">dd6b79ab-6a09-47df-b666-a4cb6676d7d3</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2577</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-12fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 74
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2578</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-12fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">function Sync-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Servers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Domains},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]
    ${AddressType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DnsServers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHas</Data>
      <Data Name="ScriptBlockId">84f2e658-3ad8-4fa3-a2f3-441c42c21fcc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2579</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-12fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">BeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Servers')) {
            [object]$__cmdletization_value = ${Servers}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Domains')) {
            [object]$__cmdletization_value = ${Domains}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AddressType')) {
            [object]$__cmdletization_value = ${AddressType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AddressType'; ParameterType = 'Microsoft.PowerSh</Data>
      <Data Name="ScriptBlockId">84f2e658-3ad8-4fa3-a2f3-441c42c21fcc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2580</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-12fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">ell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DnsServers')) {
            [object]$__cmdletization_value = ${DnsServers}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">84f2e658-3ad8-4fa3-a2f3-441c42c21fcc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2581</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-13fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 76
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2582</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-13fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Update-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]
    ${Action},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv6Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv4Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {
            [object]$__cmdletization_value = ${IPv6Addresses}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {
            [object]$__cmdletization_value = ${IPv4Addresses}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PassThru')) {
            [object]$__cmdletization_value = ${PassThru}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">e353b86e-adae-420c-be1b-2c341e0a9a30</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2583</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 78
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.786046100Z" />
      <EventRecordID>2584</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetMainModeRule" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecMainModeRule&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Enabled"&gt;
            &lt;Type PSType="NetSecurity.Enabled"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="MainModeCryptoSet"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Phase1AuthSet"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetMainModeRuleFilterByAddress" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallAddressFilter" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallAddressFilter"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetMainModeRuleInProfile" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallProfile" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallProfile"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetMainModeRuleMMAuthSet" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecPhase1AuthSet" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecPhase1AuthSet"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetMainModeRuleMMCryptoSet" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecMainModeCryptoSet" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecMainModeCryptoSet"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.Enabled"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Profiles"&gt;
              &lt;Type PSType="NetSecurity.Profile"/&gt;
              &lt;CmdletParameterMetadata PSName="Profile"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Platforms"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Platform"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MainModeCryptoSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="MainModeCryptoSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Phase1AuthSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Phase1AuthSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="ID" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Enable" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Enable"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Disable" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Disable"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata Aliases="ID" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.Enabled"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Profiles"&gt;
              &lt;Type PSType="NetSecurity.Profile"/&gt;
              &lt;CmdletParameterMetadata PSName="Profile"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Platforms"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Platform"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MainModeCryptoSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="MainModeCryptoSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Phase1AuthSet"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Phase1AuthSet"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.Enabled" UnderlyingType="uint16"&gt;
      &lt;Value Name="True" Value="1"/&gt;
      &lt;Value Name="False" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Profile" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Public" Value="4"/&gt;
      &lt;Value Name="Private" Value="2"/&gt;
      &lt;Value Name="Domain" Value="1"/&gt;
      &lt;Value Name="NotApplicable" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">2a9e979d-17ef-4e2a-ae00-5cbfcdc55e2d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2585</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
          [object]$__cmdletization_value = ${MainModeCryptoSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2586</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule'
        

function Get-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociat</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2587</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">edNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule'
        

function Set-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdle</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2588</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">tization_value = ${Platform}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
            [object]$__cmdletization_value = ${MainModeCryptoSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule'
        

function Remove-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('D</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2589</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">isplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule'
        

function Rename-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(Pa</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2590</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">rameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule'
        

function Copy-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFire</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2591</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">wallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Va</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2592</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">lue = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule'
        

function Enable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainMod</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2593</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">eRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule'
        

function Disable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('Po</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.801670600Z" />
      <EventRecordID>2594</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-14fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">10</Data>
      <Data Name="ScriptBlockText">licyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule'
        
</Data>
      <Data Name="ScriptBlockId">6ceab566-734b-494f-b088-faf0d4d744f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2595</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-4dd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 80
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2596</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-4ed8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 82
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2597</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-4fd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 84
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2598</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-50d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 86
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2599</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-50d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">126b4f63-8dbf-4f23-af1c-a113e57e849d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2600</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-50d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
          [object]$__cmdletization_value = ${MainModeCryptoSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">d680af2e-ea41-42d7-88c4-f0e0bb79f0e8</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2601</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-51d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 88
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2602</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-51d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">114d38fc-8874-4e83-be3d-e14b23b579ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2603</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-52d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 90
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2604</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-52d8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
            [object]$__cmdletization_value = ${MainModeCryptoSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">f127ca12-62bc-4d87-9e2c-9f888cfd0da2</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2605</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-41fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 92
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2606</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-41fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">684b4e1f-f900-4f89-9259-b924cbd4893e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2607</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-42fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 94
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2608</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-42fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Rename-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">74dd630d-b3e4-4d7d-b66c-2309332f02e1</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2609</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-43fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 96
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2610</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-43fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Copy-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent </Data>
      <Data Name="ScriptBlockId">ee9c76e4-2904-4aa2-ae04-78d6539bc2d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2611</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-43fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">= $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">ee9c76e4-2904-4aa2-ae04-78d6539bc2d0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2612</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-44fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 98
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2613</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-44fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Enable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">7d1e5cd0-2ed0-41bd-a112-6c500e6a3047</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2614</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-45fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 100
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2615</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-45fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Disable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">8e3e4056-ddfd-44df-8d0a-520777f790f9</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2616</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-46fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 102
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.817296000Z" />
      <EventRecordID>2617</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-46fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetAddressFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallAddressFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByAddress" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByAddress" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetMainModeRuleFilterByAddress" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecMainModeRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecMainModeRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="LocalAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata Aliases="LocalIP" PSName="LocalAddress"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteAddress"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata Aliases="RemoteIP" PSName="RemoteAddress"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">2310a1cb-353f-4379-ad93-8c80cfa83374</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2618</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-46fb-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter'
        

function Set-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LocalIP')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('RemoteIP')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter'
        
</Data>
      <Data Name="ScriptBlockId">ffa347bc-3aa0-48f7-8fc5-10f913a6b0b1</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2619</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-41cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 104
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2620</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-42cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 106
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2621</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-43cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 108
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2622</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-44cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 110
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2623</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-44cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">1cec72f4-a125-479c-a077-43a7897e08f8</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2624</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-44cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">516a8353-d0d4-4d0e-82b8-38fc27971ee5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2625</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-45cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 112
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2626</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-45cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LocalIP')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('RemoteIP')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">ad22948f-e29b-4499-a73b-4b623a57f5d6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2627</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-46cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 114
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2628</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-46cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetApplicationFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallApplicationFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="AppPath"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Program" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Package"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByApplication" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="AppPath"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Program"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Package"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Package"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">04afc318-2616-481a-aa8e-fb6a9e59d05b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.832926600Z" />
      <EventRecordID>2629</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-46cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Program},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Package},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Program})
        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Package})
        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter'
        

function Set-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter'
        
</Data>
      <Data Name="ScriptBlockId">bf49c068-b9f6-415d-ba77-4e4ab3273408</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2630</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-47cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 116
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2631</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-48cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 118
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2632</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-49cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 120
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2633</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 122
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2634</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">910524f9-e309-4e30-9968-6112fbc450e3</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2635</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Program},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Package},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Program})
        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Package})
        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">fbcbc567-d1df-4ade-be2d-ec3eff30db3a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2636</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4bcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 124
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2637</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4bcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">fb7b4ed5-f418-4fe0-a927-c522d168c6c1</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2638</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 126
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2639</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetInterfaceFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallInterfaceFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByInterface" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByInterface" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="InterfaceAlias"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceAlias"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">265c6aad-f7cf-4a11-bbc8-5f6c22a2b37b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.848545900Z" />
      <EventRecordID>2640</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter'
        

function Set-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter'
        
</Data>
      <Data Name="ScriptBlockId">12497b5c-85d6-42a4-9814-0da4c3cc17a1</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2641</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 128
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2642</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 130
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2643</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-4fcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 132
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2644</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-50cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 134
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2645</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-50cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">1caebf6a-23de-4b22-b867-470977c5189a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2646</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-50cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">4343c8d7-2863-4fc2-826d-7f238dc50c4a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2647</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-51cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 136
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2648</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-51cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">7553df17-6793-4173-bfae-e55a1cf01053</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2649</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-52cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 138
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2650</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-52cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetInterfaceTypeFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallInterfaceTypeFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InterfaceType"&gt;
            &lt;Type PSType="NetSecurity.InterfaceType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByInterfaceType" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByInterfaceType" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="InterfaceType"&gt;
              &lt;Type PSType="NetSecurity.InterfaceType"/&gt;
              &lt;CmdletParameterMetadata PSName="InterfaceType"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.InterfaceType" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Wired" Value="1"/&gt;
      &lt;Value Name="Wireless" Value="2"/&gt;
      &lt;Value Name="RemoteAccess" Value="4"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">901dd5f1-069b-4e4c-91d4-6bd2a99f2ec3</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.864172300Z" />
      <EventRecordID>2651</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-52cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceType})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter'
        

function Set-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter'
        
</Data>
      <Data Name="ScriptBlockId">9cfc7dc0-f8ae-43f8-bcdb-2a9728526e81</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2652</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-53cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 140
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2653</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-54cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 142
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2654</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-55cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 144
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2655</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-56cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 146
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2656</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-56cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">74278e13-bae3-4d3b-a6ad-4ef209eacf5e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2657</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-56cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceType})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">c8c170e8-a09e-4078-8d3f-dae2c2ff4a13</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2658</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-57cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 148
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2659</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-57cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">fec97a99-e09b-4239-a551-6c5bc4cba0a4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2660</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-58cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 150
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2661</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-58cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallSecurityFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="Authentication"&gt;
            &lt;Type PSType="NetSecurity.Authentication"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Encryption"&gt;
            &lt;Type PSType="NetSecurity.Encryption"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="OverrideBlockRules"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="LocalUsers"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="LocalUser" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RemoteUsers"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="RemoteUser" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RemoteMachines"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="RemoteMachine" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterBySecurity" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="Authentication"&gt;
              &lt;Type PSType="NetSecurity.Authentication"/&gt;
              &lt;CmdletParameterMetadata PSName="Authentication"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Encryption"&gt;
              &lt;Type PSType="NetSecurity.Encryption"/&gt;
              &lt;CmdletParameterMetadata PSName="Encryption"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="OverrideBlockRules"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="OverrideBlockRules"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalUsers"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalUser"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteUsers"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteUser"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteMachines"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteMachine"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.Authentication" UnderlyingType="uint16"&gt;
      &lt;Value Name="NotRequired" Value="0"/&gt;
      &lt;Value Name="Required" Value="1"/&gt;
      &lt;Value Name="NoEncap" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Encryption" UnderlyingType="uint16"&gt;
      &lt;Value Name="NotRequired" Value="0"/&gt;
      &lt;Value Name="Required" Value="1"/&gt;
      &lt;Value Name="Dynamic" Value="2"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">432d8299-3b66-4912-8e2f-6e40260ca8b4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2662</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-58cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication[]]
    ${Authentication},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption[]]
    ${Encryption},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${LocalUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Authentication') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Authentication})
        $__cmdletization_queryBuilder.FilterByProperty('Authentication', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Encryption') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Encryption})
        $__cmdletization_queryBuilder.FilterByProperty('Encryption', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OverrideBlockRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OverrideBlockRules})
        $__cmdletization_queryBuilder.FilterByProperty('OverrideBlockRules', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalUser})
        $__cmdletization_queryBuilder.FilterByProperty('LocalUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteUser})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteMachine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteMachine})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteMachines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterBySecurity', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter'
        

function Set-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUsers'; ParameterTyp</Data>
      <Data Name="ScriptBlockId">74aaab6d-1bcd-406b-aefc-db37ddf6417d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.879797800Z" />
      <EventRecordID>2663</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-58cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">e = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter'
        
</Data>
      <Data Name="ScriptBlockId">74aaab6d-1bcd-406b-aefc-db37ddf6417d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2664</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-59cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 152
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2665</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 154
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2666</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5bcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 156
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2667</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 158
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2668</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">aa0da154-2b5a-4e54-9438-121c9b54b4cd</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2669</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication[]]
    ${Authentication},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption[]]
    ${Encryption},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${LocalUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Authentication') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Authentication})
        $__cmdletization_queryBuilder.FilterByProperty('Authentication', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Encryption') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Encryption})
        $__cmdletization_queryBuilder.FilterByProperty('Encryption', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OverrideBlockRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OverrideBlockRules})
        $__cmdletization_queryBuilder.FilterByProperty('OverrideBlockRules', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalUser})
        $__cmdletization_queryBuilder.FilterByProperty('LocalUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteUser})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteMachine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteMachine})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteMachines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterBySecurity', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">1505ef89-4d3e-40b8-a179-dc17dd9be6d5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2670</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 160
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2671</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">5bd975be-36ac-4afe-b3ab-d2fd1f25a2ae</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2672</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 162
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2673</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetProtocolPortFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallPortFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="Protocol"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DynamicTransport"&gt;
            &lt;Type PSType="NetSecurity.DynamicTransport"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata PSName="DynamicTarget" CmdletParameterSets="ByQuery" Aliases="DynamicTransport"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByProtocolPort" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleFilterByProtocolPort" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="Protocol"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Protocol"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LocalPort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="LocalPort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemotePort"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="RemotePort"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IcmpType"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpType"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DynamicTransport"&gt;
              &lt;Type PSType="NetSecurity.DynamicTransport"/&gt;
              &lt;CmdletParameterMetadata Aliases="DynamicTransport" PSName="DynamicTarget"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.DynamicTransport" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="ProximityApps" Value="1"/&gt;
      &lt;Value Name="ProximitySharing" Value="2"/&gt;
      &lt;Value Name="WifiDirectPrinting" Value="4"/&gt;
      &lt;Value Name="WifiDirectDisplay" Value="8"/&gt;
      &lt;Value Name="WifiDirectDevices" Value="16"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">3b4f2f52-15f3-4413-b0f3-f360b74e1d02</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2674</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetProtocolPortFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('DynamicTransport')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport[]]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DynamicTarget') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DynamicTarget})
        $__cmdletization_queryBuilder.FilterByProperty('DynamicTransport', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter'
        

function Set-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter'
        
</Data>
      <Data Name="ScriptBlockId">00f49ec2-c0dd-41a5-a230-a0e838300863</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2675</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-5fcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 164
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2676</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-60cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 166
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.895424600Z" />
      <EventRecordID>2677</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-61cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 168
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2678</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-62cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 170
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2679</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-62cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">9346683f-cc60-4aca-bde5-26a252f06f0a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2680</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-62cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('DynamicTransport')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport[]]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DynamicTarget') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DynamicTarget})
        $__cmdletization_queryBuilder.FilterByProperty('DynamicTransport', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">df6070ab-5680-4f1e-8999-42f04b56be2c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2681</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-fdd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 172
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2682</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-fdd8-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">60e1d8f5-b304-4514-95e1-15e541c57490</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2683</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-63cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 174
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2684</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-63cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetServiceFilter" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallServiceFilter&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="ServiceName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Service" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleFilterByService" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ServiceName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Service"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">f7a16f37-0aee-423b-b0d2-5346b2314f6e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2685</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-63cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Service},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Service})
        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter'
        

function Set-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter'
        
</Data>
      <Data Name="ScriptBlockId">26975881-47e8-47ed-98c1-07d096de47ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2686</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-64cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 176
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2687</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-65cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 178
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2688</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-66cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 180
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2689</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-67cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 182
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2690</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-67cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">199e1856-00a6-4d74-984a-42231401fd57</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.911050000Z" />
      <EventRecordID>2691</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-67cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Service},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Service})
        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">7970175e-2555-400a-88ce-52ff22e57530</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.926675500Z" />
      <EventRecordID>2692</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-68cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 184
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.926675500Z" />
      <EventRecordID>2693</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-68cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">0215f0de-09a7-4020-8187-3c5c75bd014e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.926675500Z" />
      <EventRecordID>2694</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 186
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.926675500Z" />
      <EventRecordID>2695</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetIKEP1AuthSet" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecPhase1AuthSet&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetConSecRuleMMAuthSet" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetMainModeRuleMMAuthSet" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecMainModeRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecMainModeRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="ID" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata Aliases="ID" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Default"&gt;
              &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
              &lt;CmdletParameterMetadata PSName="Default"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">0dced1d9-3ee0-4602-b1e4-f38497bb87c5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2696</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP1AuthSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletizati</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2697</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">on_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet'
        

function Get-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet'
        

function Set-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2698</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet'
        

function Remove-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2699</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet'
        

function Rename-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', Pos</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2700</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">itionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParam</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2701</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">eter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet'
        

function Copy-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmd</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2702</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-69cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">7</Data>
      <Data Name="ScriptBlockText">letization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet'
        
</Data>
      <Data Name="ScriptBlockId">05f809b6-b626-436b-a151-2067a24ece96</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2703</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 188
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2704</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6bcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 190
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2705</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 192
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2706</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 194
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2707</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">7986d7d9-0053-4a02-8669-a2cb7a03e7ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2708</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">98c85384-0863-40df-95f9-515aa641c028</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2709</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 196
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2710</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-6ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">61b1acea-12e4-43a9-8c8b-32d1fb49813b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2711</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-33d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 198
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2712</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-33d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">ca20b79b-989d-4e6d-bc0b-90ae5bf9967b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2713</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-34d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 200
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2714</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-34d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">b049e14b-eefd-47b3-a193-a9da1827a633</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2715</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-35d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 202
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2716</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-35d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Rename-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">8e6f1516-bae5-46eb-b008-3f81f59c36d1</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2717</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-36d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 204
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2718</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-36d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Copy-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">46a3690b-c9ed-4b2f-8208-1b56cb1ab577</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.942317700Z" />
      <EventRecordID>2719</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 206
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.957922600Z" />
      <EventRecordID>2720</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetIKEP2AuthSet" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecPhase2AuthSet&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetConSecRuleEMAuthSet" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="ID" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata Aliases="ID" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Default"&gt;
              &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
              &lt;CmdletParameterMetadata PSName="Default"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">100dee69-9db2-4710-8004-9188b2517570</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.957922600Z" />
      <EventRecordID>2721</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP2AuthSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet'
        

function Get-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPs</Data>
      <Data Name="ScriptBlockId">40e6e60d-bb57-4781-91c5-e8ab654352ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.957922600Z" />
      <EventRecordID>2722</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">ecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet'
        

function Set-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          </Data>
      <Data Name="ScriptBlockId">40e6e60d-bb57-4781-91c5-e8ab654352ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.957922600Z" />
      <EventRecordID>2723</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">} else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet'
        

function Remove-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet'
        

function Rename-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
</Data>
      <Data Name="ScriptBlockId">40e6e60d-bb57-4781-91c5-e8ab654352ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.957922600Z" />
      <EventRecordID>2724</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet'
        

function Copy-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    $</Data>
      <Data Name="ScriptBlockId">40e6e60d-bb57-4781-91c5-e8ab654352ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.957922600Z" />
      <EventRecordID>2725</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-37d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">{NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet'
        
</Data>
      <Data Name="ScriptBlockId">40e6e60d-bb57-4781-91c5-e8ab654352ed</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2726</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-75cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 208
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2727</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-76cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 210
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2728</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-77cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 212
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2729</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-78cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 214
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2730</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-78cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">fb84d401-e62e-4c1c-9847-9adf6a37cd5c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2731</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-78cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">0f52df06-1e90-4a1e-88a0-1b4dc219d422</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2732</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-79cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 216
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2733</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-79cc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">9ec47de5-a9ec-4866-97a0-3bb8d12445fa</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2734</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 218
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2735</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7acc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">2861e449-a465-42c0-a9b7-7abb7572ff31</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2736</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7bcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 220
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2737</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7bcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">17b67289-34e7-489a-9883-049eae21e995</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2738</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 222
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2739</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ccc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Rename-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">b40b5cdd-6e63-4d56-8f7d-60e2e79c68fb</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2740</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 224
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2741</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7dcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Copy-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">95786d21-0617-47b5-8970-a315df7afc97</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2742</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 226
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.973548500Z" />
      <EventRecordID>2743</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetIKEMMCryptoSet" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecMainModeCryptoSet&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="MaxLifetimeMinutes"&gt;
            &lt;Type PSType="uint32"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata PSName="MaxMinutes" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="MaxLifetimeSessions"&gt;
            &lt;Type PSType="uint32"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata PSName="MaxSessions" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="ForceDiffieHellman"&gt;
            &lt;Type PSType="boolean"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetMainModeRuleMMCryptoSet" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecMainModeRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecMainModeRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxLifetimeMinutes"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxMinutes"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxLifetimeSessions"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxSessions"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ForceDiffieHellman"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="ForceDiffieHellman"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="ID" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata Aliases="ID" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxLifetimeMinutes"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxMinutes"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxLifetimeSessions"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxSessions"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ForceDiffieHellman"&gt;
              &lt;Type PSType="boolean"/&gt;
              &lt;CmdletParameterMetadata PSName="ForceDiffieHellman"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Default"&gt;
              &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
              &lt;CmdletParameterMetadata PSName="Default"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">556b92c8-49c1-4abb-bf15-a8b60a964bf5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.989183300Z" />
      <EventRecordID>2744</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEMMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
          [object]$__cmdletization_value = ${MaxMinutes}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxSessions')) {
          [object]$__cmdletization_value = ${MaxSessions}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
          [object]$__cmdletization_value = ${ForceDiffieHellman}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet'
        

function Get-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedType</Data>
      <Data Name="ScriptBlockId">64b161c9-859d-47e1-861f-e96fdea0a92f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.989183300Z" />
      <EventRecordID>2745</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">s.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet'
        

function Set-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (c</Data>
      <Data Name="ScriptBlockId">64b161c9-859d-47e1-861f-e96fdea0a92f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.989183300Z" />
      <EventRecordID>2746</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">dxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
            [object]$__cmdletization_value = ${MaxMinutes}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSessions')) {
            [object]$__cmdletization_value = ${MaxSessions}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
            [object]$__cmdletization_value = ${ForceDiffieHellman}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet'
        

function Remove-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.Paramete</Data>
      <Data Name="ScriptBlockId">64b161c9-859d-47e1-861f-e96fdea0a92f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.989183300Z" />
      <EventRecordID>2747</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">rSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet'
        

function Rename-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet'
        

function Copy-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardc</Data>
      <Data Name="ScriptBlockId">64b161c9-859d-47e1-861f-e96fdea0a92f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:05.989183300Z" />
      <EventRecordID>2748</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">imv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet'
        
</Data>
      <Data Name="ScriptBlockId">64b161c9-859d-47e1-861f-e96fdea0a92f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>843</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=227

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>844</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=229

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>845</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=231

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>846</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=233

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>847</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=235

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>848</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=237

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>849</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=239

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>850</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=241

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>851</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=243

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>852</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=245

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>853</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=247

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>854</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=249

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>855</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=251

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>856</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=253

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>857</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=255

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>858</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=257

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>859</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=259

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>860</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=261

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>861</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=263

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>862</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=265

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>863</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=267

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>864</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=269

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>865</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=271

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>866</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=273

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>867</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=275

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>868</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=277

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>869</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=279

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>870</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=281

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>871</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=283

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>872</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=285

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>873</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=287

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>874</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=289

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>875</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=291

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>876</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=293

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>877</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=295

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>878</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=297

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>879</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=299

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>880</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=301

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>881</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=303

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>882</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=305

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>883</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=307

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>884</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=309

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>885</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=311

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>886</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=313

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>887</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=315

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>888</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=317

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>889</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=319

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>890</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=321

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>891</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=323

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>892</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=325

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>893</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=327

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>894</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=329

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>895</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=331

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>896</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=333

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>897</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=335

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>898</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=337

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>899</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=339

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>900</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=341

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>901</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=343

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>902</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=345

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>903</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=347

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>904</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=349

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>905</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=351

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>906</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=353

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>907</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=355

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>908</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=357

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=7
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>909</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=359

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=6
	ScriptName=
	CommandLine=                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>910</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Get-NetFirewallProfile</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=361

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=6
	ScriptName=
	CommandLine=Get-NetFirewallProfile</Data>
      <Data>CommandInvocation(Get-NetFirewallProfile): "Get-NetFirewallProfile"
ParameterBinding(Get-NetFirewallProfile): name="Name"; value=""
ParameterBinding(Get-NetFirewallProfile): name="AssociatedNetFirewallRule"; value=""
ParameterBinding(Get-NetFirewallProfile): name="AssociatedNetIPsecRule"; value=""
ParameterBinding(Get-NetFirewallProfile): name="AssociatedNetIPsecMainModeRule"; value=""
ParameterBinding(Get-NetFirewallProfile): name="All"; value="False"
ParameterBinding(Get-NetFirewallProfile): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallProfile): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallProfile): name="CimSession"; value=""
ParameterBinding(Get-NetFirewallProfile): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallProfile): name="AsJob"; value="False"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.000000000Z" />
      <EventRecordID>911</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=363

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=6
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallProfile (InstanceID = "MSFT?FW?FirewallProfile?Domain")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallProfile (InstanceID = "MSFT?FW?FirewallProfile?Private")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallProfile (InstanceID = "MSFT?FW?FirewallProfile?Public")"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2749</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-57d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 228
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2750</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-58d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 230
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2751</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-59d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 232
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2752</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ad9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 234
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2753</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ad9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">4caffd14-d7b3-4877-9854-f11466c1a2a4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2754</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ad9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
          [object]$__cmdletization_value = ${MaxMinutes}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxSessions')) {
          [object]$__cmdletization_value = ${MaxSessions}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
          [object]$__cmdletization_value = ${ForceDiffieHellman}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">e1395e55-a7eb-49d8-81de-25a3f45bcde5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2755</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5bd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 236
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2756</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5bd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">8578298d-b024-4cc0-8fea-ebe04b93f97b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2757</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-aecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 238
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2758</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-aecc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
            [object]$__cmdletization_value = ${MaxMinutes}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSessions')) {
            [object]$__cmdletization_value = ${MaxSessions}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
            [object]$__cmdletization_value = ${ForceDiffieHellman}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">a391a2ef-ad28-4fa0-aef6-03af1a174e67</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2759</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-afcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 240
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2760</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-afcc-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">e619ab9c-f1e2-407d-a15e-d908f6439433</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2761</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5cd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 242
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2762</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5cd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Rename-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">21ad340f-8748-41ab-ade9-dbfeb5acef26</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2763</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 244
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2764</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Copy-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">bd6f5205-7f2e-483f-ae1c-f5870c01c94c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2765</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 246
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.004799400Z" />
      <EventRecordID>2766</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetIKEQMCryptoSet" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecQuickModeCryptoSet&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByDisplayName" IsMandatory="true"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Description"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="DisplayGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="RuleGroup"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Group" CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PfsGroupID"&gt;
            &lt;Type PSType="Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata PSName="PerfectForwardSecrecyGroup" CmdletParameterSets="ByQuery" Aliases="PfsGroup"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PrimaryStatus"&gt;
            &lt;Type PSType="NetSecurity.PrimaryStatus"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="Status"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSource"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
          &lt;Property PropertyName="PolicyStoreSourceType"&gt;
            &lt;Type PSType="NetSecurity.PolicyStoreType"/&gt;
            &lt;RegularQuery&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByQuery"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetConSecRuleQMCryptoSet" ResultRole="PartComponent" SourceRole="GroupComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="TracePolicyStore"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewDisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PfsGroupID"&gt;
              &lt;Type PSType="Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup"/&gt;
              &lt;CmdletParameterMetadata Aliases="PfsGroup" PSName="PerfectForwardSecrecyGroup"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="ID" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayName" IsMandatory="true" CmdletParameterSets="ByDisplayName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="DisplayGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="DisplayGroup" IsMandatory="true" CmdletParameterSets="ByDisplayGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
            &lt;Property PropertyName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Group" IsMandatory="true" CmdletParameterSets="ByGroup"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Rename" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="Rename"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Copy" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="CloneObject"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="NewPolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewPolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewGPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewGPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NewName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="NewName"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="cim:OperationOption:PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="InstanceID"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata Aliases="ID" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="DisplayName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Description"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Description"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RuleGroup"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="Group"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="Proposals"&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance[]"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="Proposal"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PfsGroupID"&gt;
              &lt;Type PSType="Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup"/&gt;
              &lt;CmdletParameterMetadata Aliases="PfsGroup" PSName="PerfectForwardSecrecyGroup"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="cim:OperationOption:Default"&gt;
              &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
              &lt;CmdletParameterMetadata PSName="Default"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.PrimaryStatus" UnderlyingType="uint16"&gt;
      &lt;Value Name="Unknown" Value="0"/&gt;
      &lt;Value Name="OK" Value="1"/&gt;
      &lt;Value Name="Inactive" Value="2"/&gt;
      &lt;Value Name="Error" Value="3"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PolicyStoreType" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Local" Value="1"/&gt;
      &lt;Value Name="GroupPolicy" Value="2"/&gt;
      &lt;Value Name="Dynamic" Value="3"/&gt;
      &lt;Value Name="Generated" Value="4"/&gt;
      &lt;Value Name="Hardcoded" Value="5"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">37868fc5-b77f-43b0-a1f7-296a93818105</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.020425300Z" />
      <EventRecordID>2767</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet'
        

function Get-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder =</Data>
      <Data Name="ScriptBlockId">09fb2c3f-85dd-4362-83c5-aa345020f5e0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.020425300Z" />
      <EventRecordID>2768</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText"> $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet'
        

function Set-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet'
        

function Remove-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microso</Data>
      <Data Name="ScriptBlockId">09fb2c3f-85dd-4362-83c5-aa345020f5e0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.020425300Z" />
      <EventRecordID>2769</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">ft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet'
        

function Rename-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletiza</Data>
      <Data Name="ScriptBlockId">09fb2c3f-85dd-4362-83c5-aa345020f5e0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.020425300Z" />
      <EventRecordID>2770</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">tion_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet'
        

function Copy-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvoca</Data>
      <Data Name="ScriptBlockId">09fb2c3f-85dd-4362-83c5-aa345020f5e0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.020425300Z" />
      <EventRecordID>2771</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">tionInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet'
        
</Data>
      <Data Name="ScriptBlockId">09fb2c3f-85dd-4362-83c5-aa345020f5e0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2772</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-5fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 248
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2773</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-60d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 250
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2774</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4cef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 252
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2775</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4def-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 254
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2776</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4def-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">d7194f03-ff2e-435a-9ea4-49b73ff768af</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2777</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4def-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">309378b4-408f-4c6f-88d5-98ceb384002b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2778</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4eef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 256
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2779</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4eef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">9b7ebbc2-1c43-484d-8521-5ccbcaac8e4d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2780</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4fef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 258
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2781</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-4fef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">5a682866-be33-4e29-8aa0-745386a1ac2e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2782</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-50ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 260
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2783</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-50ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">2a77742a-afdb-42a9-a2dc-dcf617e390a7</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2784</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-51ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 262
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2785</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-51ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Rename-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">17b972f2-7251-410d-a7fa-6c88436a9c43</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2786</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-52ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 264
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2787</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-52ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Copy-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">ae39c541-d480-41ba-b32e-569f3de567e3</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2788</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-53ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 266
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.036051700Z" />
      <EventRecordID>2789</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-53ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetFirewallProfile" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallProfile&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="Name"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="Profile"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetFirewallRuleInProfile" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetFirewallRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetFirewallRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetConSecRuleInProfile" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
          &lt;Association Association="MSFT_NetMainModeRuleInProfile" ResultRole="GroupComponent" SourceRole="PartComponent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecMainModeRule" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecMainModeRule"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="Enabled"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="Enabled"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DefaultInboundAction"&gt;
              &lt;Type PSType="NetSecurity.Action"/&gt;
              &lt;CmdletParameterMetadata PSName="DefaultInboundAction"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DefaultOutboundAction"&gt;
              &lt;Type PSType="NetSecurity.Action"/&gt;
              &lt;CmdletParameterMetadata PSName="DefaultOutboundAction"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowInboundRules"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowInboundRules"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowLocalFirewallRules"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowLocalFirewallRules"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowLocalIPsecRules"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowLocalIPsecRules"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowUserApps"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowUserApps"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowUserPorts"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowUserPorts"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowUnicastResponseToMulticast"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowUnicastResponseToMulticast"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="NotifyOnListen"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="NotifyOnListen"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EnableStealthModeForIPsec"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="EnableStealthModeForIPsec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LogFileName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="LogFileName"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LogMaxSizeKilobytes"&gt;
              &lt;Type PSType="uint64"/&gt;
              &lt;CmdletParameterMetadata PSName="LogMaxSizeKilobytes"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LogAllowed"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="LogAllowed"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LogBlocked"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="LogBlocked"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="LogIgnored"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="LogIgnored"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DisabledInterfaceAliases"&gt;
              &lt;Type PSType="string[]"/&gt;
              &lt;CmdletParameterMetadata PSName="DisabledInterfaceAliases"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="Name"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata Aliases="Profile" PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="All"&gt;
              &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.GpoBoolean" UnderlyingType="uint16"&gt;
      &lt;Value Name="False" Value="0"/&gt;
      &lt;Value Name="True" Value="1"/&gt;
      &lt;Value Name="NotConfigured" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Action" UnderlyingType="uint16"&gt;
      &lt;Value Name="NotConfigured" Value="0"/&gt;
      &lt;Value Name="Allow" Value="2"/&gt;
      &lt;Value Name="Block" Value="4"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">502cd8d5-1367-4859-b496-490987580c3c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2790</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-53ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallProfile'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallProfile
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile'
        

function Set-NetFirewallProfile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowInboundRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalIPsecRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShe</Data>
      <Data Name="ScriptBlockId">9e712ae8-3c04-454f-89d3-cb247f476514</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2791</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-53ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">ll.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserApps},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserPorts},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUnicastResponseToMulticast},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${NotifyOnListen},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStealthModeForIPsec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LogFileName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint64]
    ${LogMaxSizeKilobytes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogAllowed},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogBlocked},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogIgnored},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DisabledInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
            [object]$__cmdletization_value = ${DefaultInboundAction}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
            [object]$__cmdletization_value = ${DefaultOutboundAction}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowInboundRules')) {
            [object]$__cmdletization_value = ${AllowInboundRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {
            [object]$__cmdletization_value = ${AllowLocalFirewallRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalIPsecRules')) {
            [object]$__cmdlet</Data>
      <Data Name="ScriptBlockId">9e712ae8-3c04-454f-89d3-cb247f476514</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2792</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-53ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">ization_value = ${AllowLocalIPsecRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserApps')) {
            [object]$__cmdletization_value = ${AllowUserApps}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserPorts')) {
            [object]$__cmdletization_value = ${AllowUserPorts}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUnicastResponseToMulticast')) {
            [object]$__cmdletization_value = ${AllowUnicastResponseToMulticast}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NotifyOnListen')) {
            [object]$__cmdletization_value = ${NotifyOnListen}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStealthModeForIPsec')) {
            [object]$__cmdletization_value = ${EnableStealthModeForIPsec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogFileName')) {
            [object]$__cmdletization_value = ${LogFileName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogMaxSizeKilobytes')) {
            [object]$__cmdletization_value = ${LogMaxSizeKilobytes}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogAllowed')) {
            [object]$__cmdletization_value = ${LogAllowed}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogBlocked')) {
            [object]$__cmdletization_value = ${LogBlocked}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogIgnored')) {
            [object]$__cmdletization_value = ${LogIgnored}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_method</Data>
      <Data Name="ScriptBlockId">9e712ae8-3c04-454f-89d3-cb247f476514</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2793</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-53ef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">Parameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DisabledInterfaceAliases')) {
            [object]$__cmdletization_value = ${DisabledInterfaceAliases}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile'
        
</Data>
      <Data Name="ScriptBlockId">9e712ae8-3c04-454f-89d3-cb247f476514</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2794</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6ad9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 268
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2795</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6bd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 270
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2796</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6cd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 272
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2797</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 274
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2798</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">db559423-9c48-4085-8c1f-da0e89b74797</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.051675200Z" />
      <EventRecordID>2799</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallProfile
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">5153bf57-9519-478a-aa5c-15b889bbd218</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2800</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 276
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2801</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallProfile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowInboundRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalIPsecRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserApps},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserPorts},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUnicastResponseToMulticast},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${NotifyOnListen},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStealthModeForIPsec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LogFileName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint64]
    ${LogMaxSizeKilobytes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogAllowed},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogBlocked},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogIgnored},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DisabledInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
            [object]$__cmdletization_value = ${DefaultInboundAction}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
            [object]$__cmdletization_value = ${DefaultOutboundAction}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowInboundRules')) {
            [object]$__cmdletization_value = ${AllowInboundRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {
            [object]$__cmdletization_value = ${AllowLocalFirewallRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalIPsecRules')) {
            [object]$__cmdletization_value = ${AllowLocalIPsecRules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdleti</Data>
      <Data Name="ScriptBlockId">4942443c-0292-4849-ab17-773e818bb2f0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2802</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">zation_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserApps')) {
            [object]$__cmdletization_value = ${AllowUserApps}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserPorts')) {
            [object]$__cmdletization_value = ${AllowUserPorts}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUnicastResponseToMulticast')) {
            [object]$__cmdletization_value = ${AllowUnicastResponseToMulticast}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NotifyOnListen')) {
            [object]$__cmdletization_value = ${NotifyOnListen}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStealthModeForIPsec')) {
            [object]$__cmdletization_value = ${EnableStealthModeForIPsec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogFileName')) {
            [object]$__cmdletization_value = ${LogFileName}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogMaxSizeKilobytes')) {
            [object]$__cmdletization_value = ${LogMaxSizeKilobytes}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogAllowed')) {
            [object]$__cmdletization_value = ${LogAllowed}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogBlocked')) {
            [object]$__cmdletization_value = ${LogBlocked}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogIgnored')) {
            [object]$__cmdletization_value = ${LogIgnored}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DisabledInterfaceAliases')) {
            [object]$__cmdletization_value = ${DisabledInterfaceAliases}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">4942443c-0292-4849-ab17-773e818bb2f0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2803</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 278
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2804</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetSecDeltaCollection" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecPolicyChange&lt;/DefaultNoun&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.ChangeAction" UnderlyingType="uint16"&gt;
      &lt;Value Name="Add" Value="0"/&gt;
      &lt;Value Name="Delete" Value="1"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.EndpointType" UnderlyingType="uint16"&gt;
      &lt;Value Name="Endpoint1" Value="0"/&gt;
      &lt;Value Name="Endpoint2" Value="1"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">624d8263-c539-4123-bb49-d5bc5c4672b0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2805</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-6fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                
</Data>
      <Data Name="ScriptBlockId">6cd14b13-9067-4430-aca5-b188c3fbcd29</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2806</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-70d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 280
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2807</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-71d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 282
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2808</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-72d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 284
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2809</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 286
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2810</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">7ae32a64-79a1-46c8-a1f6-8de9f2024c2f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.067300200Z" />
      <EventRecordID>2811</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetIPsecDoSPSetting" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecDospSetting&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="ElementName"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="StateIdleTimeoutSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="StateIdleTimeoutSeconds"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PerIPRateLimitQueueIdleTimeoutSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="PerIPRateLimitQueueIdleTimeoutSeconds"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecUnauthDscp"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecUnauthDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecUnauthRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecUnauthRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecUnauthPerIPRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecUnauthPerIPRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecAuthDscp"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecAuthDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecAuthRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecAuthRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IcmpV6Dscp"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpV6Dscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IcmpV6RateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpV6RateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6FilterExemptDscp"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6FilterExemptDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6FilterExemptRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6FilterExemptRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DefBlockExemptDscp"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="DefBlockExemptDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DefBlockExemptRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="DefBlockExemptRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxStateEntries"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxStateEntries"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxPerIPRateLimitQueues"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxPerIPRateLimitQueues"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EnabledKeyingModules"&gt;
              &lt;Type PSType="NetSecurity.DospKeyModules"/&gt;
              &lt;CmdletParameterMetadata PSName="EnabledKeyingModules"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="FilteringFlags"&gt;
              &lt;Type PSType="NetSecurity.DospFlags"/&gt;
              &lt;CmdletParameterMetadata PSName="FilteringFlags"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PublicInterfaceAliases"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata PSName="PublicInterfaceAliases"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PrivateInterfaceAliases"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata PSName="PrivateInterfaceAliases"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PublicV6Address"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PublicV6Address"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PrivateV6Address"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PrivateV6Address"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryableProperties&gt;
            &lt;Property PropertyName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;RegularQuery AllowGlobbing="true"&gt;
                &lt;CmdletParameterMetadata PSName="Name" Position="0" IsMandatory="true" CmdletParameterSets="ByName"/&gt;
              &lt;/RegularQuery&gt;
            &lt;/Property&gt;
          &lt;/QueryableProperties&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="New" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:CreateInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="ElementName"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="Name"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="StateIdleTimeoutSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="StateIdleTimeoutSeconds"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PerIPRateLimitQueueIdleTimeoutSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="PerIPRateLimitQueueIdleTimeoutSeconds"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecUnauthDscp"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecUnauthDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecUnauthRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecUnauthRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecUnauthPerIPRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecUnauthPerIPRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecAuthDscp"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecAuthDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6IPsecAuthRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6IPsecAuthRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IcmpV6Dscp"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpV6Dscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IcmpV6RateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IcmpV6RateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6FilterExemptDscp"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6FilterExemptDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="IpV6FilterExemptRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="IpV6FilterExemptRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DefBlockExemptDscp"&gt;
              &lt;Type PSType="uint16"/&gt;
              &lt;CmdletParameterMetadata PSName="DefBlockExemptDscp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DefBlockExemptRateLimitBytesPerSec"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="DefBlockExemptRateLimitBytesPerSec"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxStateEntries"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxStateEntries"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxPerIPRateLimitQueues"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxPerIPRateLimitQueues"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EnabledKeyingModules"&gt;
              &lt;Type PSType="NetSecurity.DospKeyModules"/&gt;
              &lt;CmdletParameterMetadata PSName="EnabledKeyingModules"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="FilteringFlags"&gt;
              &lt;Type PSType="NetSecurity.DospFlags"/&gt;
              &lt;CmdletParameterMetadata PSName="FilteringFlags"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PublicInterfaceAliases"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="PublicInterfaceAliases"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PrivateInterfaceAliases"&gt;
              &lt;Type PSType="System.Management.Automation.WildcardPattern[]"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" PSName="PrivateInterfaceAliases"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PublicV6Address"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PublicV6Address"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="PrivateV6Address"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="PrivateV6Address"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.DospKeyModules" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="IkeV1" Value="1"/&gt;
      &lt;Value Name="IkeV2" Value="2"/&gt;
      &lt;Value Name="AuthIP" Value="4"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.DospFlags" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="DisableDefaultBlock" Value="8"/&gt;
      &lt;Value Name="FilterBlock" Value="16"/&gt;
      &lt;Value Name="FilterExempt" Value="32"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.AddressVersion" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="IPv4" Value="1"/&gt;
      &lt;Value Name="IPv6" Value="2"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">5d4a2dba-b81d-449b-90d4-facd971600f6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.082926100Z" />
      <EventRecordID>2812</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [System.Management.Automation.WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [System.Management.Automation.WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
          [object]$__cmdletization_value = ${IcmpV6Dscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
          [object]$__cmdletization_value = ${DefBlockExemptDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {</Data>
      <Data Name="ScriptBlockId">65540c95-6bab-4816-8b8d-2ec609d94e39</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.082926100Z" />
      <EventRecordID>2813</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
          [object]$__cmdletization_value = ${MaxStateEntries}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
          [object]$__cmdletization_value = ${EnabledKeyingModules}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
          [object]$__cmdletization_value = ${FilteringFlags}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
          [object]$__cmdletization_value = ${PublicInterfaceAliases}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
          [object]$__cmdletization_value = ${PrivateInterfaceAliases}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
          [object]$__cmdletization_value = ${PublicV6Address}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
          [object]$__cmdletization_value = ${PrivateV6Address}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting'
        

function Get-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting'
        

function Set-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml</Data>
      <Data Name="ScriptBlockId">65540c95-6bab-4816-8b8d-2ec609d94e39</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.082926100Z" />
      <EventRecordID>2814</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
            [object]$__cmdletization_value = ${IcmpV6Dscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
            [object]$__cmdletization_value = ${DefBlockExemptDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
            [object]$__cmdletization_value = ${MaxStateEntries}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
            [object]$__cmdletization_value = ${EnabledKeyingModules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $fa</Data>
      <Data Name="ScriptBlockId">65540c95-6bab-4816-8b8d-2ec609d94e39</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.082926100Z" />
      <EventRecordID>2815</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-73d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">4</Data>
      <Data Name="ScriptBlockText">lse
          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
            [object]$__cmdletization_value = ${FilteringFlags}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
            [object]$__cmdletization_value = ${PublicInterfaceAliases}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
            [object]$__cmdletization_value = ${PrivateInterfaceAliases}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
            [object]$__cmdletization_value = ${PublicV6Address}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
            [object]$__cmdletization_value = ${PrivateV6Address}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting'
        

function Remove-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting'
        
</Data>
      <Data Name="ScriptBlockId">65540c95-6bab-4816-8b8d-2ec609d94e39</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.082926100Z" />
      <EventRecordID>2816</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-74d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 288
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2817</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-75d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 290
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2818</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-76d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 292
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2819</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-77d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 294
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2820</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-77d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">4d75db29-2210-48c1-93a1-339cd0d3b4f5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2821</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-77d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function New-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [System.Management.Automation.WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [System.Management.Automation.WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
          [object]$__cmdletization_value = ${IcmpV6Dscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
          [object]$__cmdletization_value = ${DefBlockExemptDscp}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterTyp</Data>
      <Data Name="ScriptBlockId">64de5132-aed2-4333-b04b-432672be9421</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2822</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-77d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">e = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
          [object]$__cmdletization_value = ${MaxStateEntries}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
          [object]$__cmdletization_value = ${EnabledKeyingModules}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
          [object]$__cmdletization_value = ${FilteringFlags}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
          [object]$__cmdletization_value = ${PublicInterfaceAliases}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
          [object]$__cmdletization_value = ${PrivateInterfaceAliases}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
          [object]$__cmdletization_value = ${PublicV6Address}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
          [object]$__cmdletization_value = ${PrivateV6Address}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">64de5132-aed2-4333-b04b-432672be9421</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2823</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-7eef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 296
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2824</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-7eef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">a9716e5a-5074-4a72-850f-85586a7b8e3c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2825</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-7fef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 298
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2826</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-7fef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Set-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [System.Management.Automation.WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
            [object]$__cmdletization_value = ${IcmpV6Dscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundP</Data>
      <Data Name="ScriptBlockId">a1fda9b5-2341-40be-b455-a6d0d16053fe</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2827</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-7fef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">arameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
            [object]$__cmdletization_value = ${DefBlockExemptDscp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
            [object]$__cmdletization_value = ${MaxStateEntries}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
            [object]$__cmdletization_value = ${EnabledKeyingModules}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
            [object]$__cmdletization_value = ${FilteringFlags}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
            [object]$__cmdletization_value = ${PublicInterfaceAliases}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
            [object]$__cmdletization_value = ${PrivateInterfaceAliases}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
            [object]$__cmdletization_value = ${PublicV6Address}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
            [object]$__cmdletization_value = ${PrivateV6Address}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">a1fda9b5-2341-40be-b455-a6d0d16053fe</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2828</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-78d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 300
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2829</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-78d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">d7aeb8de-33ee-45fe-a7a6-c7f8b19c3ae5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2830</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-79d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 302
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2831</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-79d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetIPsecIdentity" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecIdentity&lt;/DefaultNoun&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.ImpersonationType" UnderlyingType="uint32"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Impersonated" Value="1"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.EffectiveAuthenticationMethod" UnderlyingType="uint32"&gt;
      &lt;Value Name="PresharedKey" Value="0"/&gt;
      &lt;Value Name="Certificate" Value="1"/&gt;
      &lt;Value Name="Kerberos" Value="2"/&gt;
      &lt;Value Name="Anonymous" Value="3"/&gt;
      &lt;Value Name="SSL" Value="4"/&gt;
      &lt;Value Name="NTLMv2" Value="5"/&gt;
      &lt;Value Name="CGA" Value="6"/&gt;
      &lt;Value Name="CertificateEcdsa256" Value="7"/&gt;
      &lt;Value Name="CertificateEcdsa384" Value="8"/&gt;
      &lt;Value Name="SSLEcdsa256" Value="9"/&gt;
      &lt;Value Name="SSLEcdsa384" Value="10"/&gt;
      &lt;Value Name="EAP" Value="11"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.IdFlags" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="HealthCertificate" Value="1"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">4f47ac7a-184a-479e-8e8c-e0254aebc3e7</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2832</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-79d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                
</Data>
      <Data Name="ScriptBlockId">d5d5d0fe-7d4d-4bc1-8347-62a4a3a13dc0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2833</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7ad9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 304
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2834</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7bd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 306
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.098553900Z" />
      <EventRecordID>2835</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7cd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 308
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2836</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 310
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2837</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">9d6a340a-a1c5-4a94-ae18-382de2de8692</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2838</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetMainModeSA" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecMainModeSA&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="Name"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetSAAssociation" ResultRole="Antecedent" SourceRole="Dependent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecQuickModeSA" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecQuickModeSA"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.EffectiveKeyModule" UnderlyingType="uint32"&gt;
      &lt;Value Name="IkeV1" Value="0"/&gt;
      &lt;Value Name="AuthIP" Value="1"/&gt;
      &lt;Value Name="IkeV2" Value="2"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">bfaf2a45-acc1-445a-9196-58270b5abc8b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2839</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA'
        

function Remove-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA'
        
</Data>
      <Data Name="ScriptBlockId">39b48fc8-d905-4ef5-a5e6-81be1633c581</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2840</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 312
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2841</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-7fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 314
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2842</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-80d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 316
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2843</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-81d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 318
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2844</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-81d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">655efe71-8875-4f45-bf80-c1c389a02d43</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2845</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-81d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">06340426-75e7-4dbd-ac23-b0ee47bbc5ce</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2846</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-82d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 320
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2847</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-82d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">abf09e5d-b7c8-4c86-96d5-197e455ef9e2</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.114178400Z" />
      <EventRecordID>2848</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-83d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 322
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2849</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-83d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetQuickModeSA" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetIPsecQuickModeSA&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryableProperties&gt;
          &lt;Property PropertyName="InstanceID"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;RegularQuery AllowGlobbing="true"&gt;
              &lt;CmdletParameterMetadata PSName="Name" CmdletParameterSets="ByName" IsMandatory="true" Position="0" Aliases="ID"/&gt;
            &lt;/RegularQuery&gt;
          &lt;/Property&gt;
        &lt;/QueryableProperties&gt;
        &lt;QueryableAssociations&gt;
          &lt;Association Association="MSFT_NetSAAssociation" ResultRole="Dependent" SourceRole="Antecedent"&gt;
            &lt;AssociatedInstance&gt;
              &lt;Type PSType="Microsoft.Management.Infrastructure.CimInstance" ETSType="Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA"/&gt;
              &lt;CmdletParameterMetadata PSName="AssociatedNetIPsecMainModeSA" IsMandatory="true" ValueFromPipeline="true" CmdletParameterSets="ByAssociatedNetIPsecMainModeSA"/&gt;
            &lt;/AssociatedInstance&gt;
          &lt;/Association&gt;
        &lt;/QueryableAssociations&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Remove" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:DeleteInstance"/&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.IPsecMode" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Transport" Value="3"/&gt;
      &lt;Value Name="Tunnel" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.QmSATransformType" UnderlyingType="uint32"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Ah" Value="1"/&gt;
      &lt;Value Name="EspAuth" Value="2"/&gt;
      &lt;Value Name="EspCipher" Value="3"/&gt;
      &lt;Value Name="EspAuthAndCipher" Value="4"/&gt;
      &lt;Value Name="EspAuthFirewall" Value="5"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.QmBundleFlags" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="NdSecure" Value="1"/&gt;
      &lt;Value Name="NdBoundary" Value="2"/&gt;
      &lt;Value Name="NdpeerNatBoundary" Value="4"/&gt;
      &lt;Value Name="GuaranteeEncryption" Value="8"/&gt;
      &lt;Value Name="NLB" Value="16"/&gt;
      &lt;Value Name="NoMachineLuidVerify" Value="32"/&gt;
      &lt;Value Name="NoImpersonationLuidVerify" Value="64"/&gt;
      &lt;Value Name="NoExplicitCredMatch" Value="128"/&gt;
      &lt;Value Name="Unknown256" Value="256"/&gt;
      &lt;Value Name="AllowNullTargetNameMatch" Value="512"/&gt;
      &lt;Value Name="ClearDfOnTunnel" Value="1024"/&gt;
      &lt;Value Name="AssumeUdpContextOutbound" Value="2048"/&gt;
      &lt;Value Name="NdPeerBoundary" Value="4096"/&gt;
      &lt;Value Name="SuppressDuplicateDeletion" Value="8192"/&gt;
      &lt;Value Name="PeerSupportsGuaranteeEncryption" Value="16384"/&gt;
      &lt;Value Name="ForceInboundConnections" Value="32768"/&gt;
      &lt;Value Name="ForceOutboundConnections" Value="65536"/&gt;
      &lt;Value Name="ForwardPathInitiator" Value="131072"/&gt;
      &lt;Value Name="EnableOptionalAsymmetricIdle" Value="262144"/&gt;
      &lt;Value Name="UsingDictatedKeys" Value="524288"/&gt;
      &lt;Value Name="LocallyDictatedKeys" Value="1048576"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">477115d8-0624-44bd-851d-fc916a2696dc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2850</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-83d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA'
        

function Remove-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA'
        
</Data>
      <Data Name="ScriptBlockId">6cbd640f-6ff9-4550-80ef-b3b5cbaf9d07</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2851</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-84d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 324
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2852</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-85d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 326
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2853</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-86d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 328
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2854</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-87d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 330
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2855</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-87d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">dd2c3aa3-9d1f-44d9-801c-184497cf559e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2856</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-87d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">7feb8612-c331-4b22-aefa-38940000083b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2857</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-88d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 332
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2858</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-88d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Remove-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">ab1007df-fcab-4b14-8bbc-06303fea621e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2859</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 334
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.129800600Z" />
      <EventRecordID>2860</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetSecuritySettingData" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetFirewallSetting&lt;/DefaultNoun&gt;
    &lt;InstanceCmdlets&gt;
      &lt;GetCmdletParameters DefaultCmdletParameterSet="GetAll"&gt;
        &lt;QueryOptions&gt;
          &lt;Option OptionName="All"&gt;
            &lt;Type PSType="System.Management.Automation.SwitchParameter"/&gt;
            &lt;CmdletParameterMetadata CmdletParameterSets="GetAll"/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="PolicyStore"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
          &lt;Option OptionName="GPOSession"&gt;
            &lt;Type PSType="string"/&gt;
            &lt;CmdletParameterMetadata/&gt;
          &lt;/Option&gt;
        &lt;/QueryOptions&gt;
      &lt;/GetCmdletParameters&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Set" ConfirmImpact="Medium"/&gt;
        &lt;Method MethodName="cim:ModifyInstance"&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="Exemptions"&gt;
              &lt;Type PSType="NetSecurity.TrafficExemption"/&gt;
              &lt;CmdletParameterMetadata PSName="Exemptions"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EnableStatefulFtp"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="EnableStatefulFtp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EnableStatefulPptp"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="EnableStatefulPptp"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteMachineTransportAuthorizationList"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteMachineTransportAuthorizationList"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteMachineTunnelAuthorizationList"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteMachineTunnelAuthorizationList"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteUserTransportAuthorizationList"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteUserTransportAuthorizationList"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RemoteUserTunnelAuthorizationList"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="RemoteUserTunnelAuthorizationList"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="RequireFullAuthSupport"&gt;
              &lt;Type PSType="NetSecurity.GpoBoolean"/&gt;
              &lt;CmdletParameterMetadata PSName="RequireFullAuthSupport"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="CertValidationLevel"&gt;
              &lt;Type PSType="NetSecurity.CRLCheck"/&gt;
              &lt;CmdletParameterMetadata PSName="CertValidationLevel"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="AllowIPsecThroughNAT"&gt;
              &lt;Type PSType="NetSecurity.IPsecThroughNAT"/&gt;
              &lt;CmdletParameterMetadata PSName="AllowIPsecThroughNAT"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="MaxSAIdleTimeSeconds"&gt;
              &lt;Type PSType="uint32"/&gt;
              &lt;CmdletParameterMetadata PSName="MaxSAIdleTimeSeconds"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="KeyEncoding"&gt;
              &lt;Type PSType="NetSecurity.KeyEncoding"/&gt;
              &lt;CmdletParameterMetadata PSName="KeyEncoding"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="EnablePacketQueuing"&gt;
              &lt;Type PSType="NetSecurity.PacketQueuing"/&gt;
              &lt;CmdletParameterMetadata PSName="EnablePacketQueuing"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
        &lt;GetCmdletParameters&gt;
          &lt;QueryOptions&gt;
            &lt;Option OptionName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
            &lt;Option OptionName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata/&gt;
            &lt;/Option&gt;
          &lt;/QueryOptions&gt;
        &lt;/GetCmdletParameters&gt;
      &lt;/Cmdlet&gt;
    &lt;/InstanceCmdlets&gt;
  &lt;/Class&gt;
  &lt;Enums&gt;
    &lt;Enum EnumName="NetSecurity.TrafficExemption" UnderlyingType="uint32" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="NeighborDiscovery" Value="1"/&gt;
      &lt;Value Name="Icmp" Value="2"/&gt;
      &lt;Value Name="RouterDiscovery" Value="4"/&gt;
      &lt;Value Name="Dhcp" Value="8"/&gt;
      &lt;Value Name="NotConfigured" Value="4294967295"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.GpoBoolean" UnderlyingType="uint16"&gt;
      &lt;Value Name="False" Value="0"/&gt;
      &lt;Value Name="True" Value="1"/&gt;
      &lt;Value Name="NotConfigured" Value="2"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.Profile" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="Any" Value="0"/&gt;
      &lt;Value Name="Public" Value="4"/&gt;
      &lt;Value Name="Private" Value="2"/&gt;
      &lt;Value Name="Domain" Value="1"/&gt;
      &lt;Value Name="NotApplicable" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.CRLCheck" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="AttemptCrlCheck" Value="1"/&gt;
      &lt;Value Name="RequireCrlCheck" Value="2"/&gt;
      &lt;Value Name="NotConfigured" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.IPsecThroughNAT" UnderlyingType="uint16"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Server" Value="1"/&gt;
      &lt;Value Name="Both" Value="2"/&gt;
      &lt;Value Name="NotConfigured" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.KeyEncoding" UnderlyingType="uint16"&gt;
      &lt;Value Name="UTF16" Value="0"/&gt;
      &lt;Value Name="UTF8" Value="1"/&gt;
      &lt;Value Name="NotConfigured" Value="65535"/&gt;
    &lt;/Enum&gt;
    &lt;Enum EnumName="NetSecurity.PacketQueuing" UnderlyingType="uint16" BitwiseFlags="true"&gt;
      &lt;Value Name="None" Value="0"/&gt;
      &lt;Value Name="Inbound" Value="1"/&gt;
      &lt;Value Name="Forward" Value="2"/&gt;
      &lt;Value Name="NotConfigured" Value="65535"/&gt;
    &lt;/Enum&gt;
  &lt;/Enums&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">9f4314c2-f2bd-4ad8-818d-0c1777cf7a22</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2861</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting'
        

function Set-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]
    ${Exemptions},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulFtp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulPptp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${RequireFullAuthSupport},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]
    ${CertValidationLevel},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]
    ${AllowIPsecThroughNAT},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSAIdleTimeSeconds},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]
    ${KeyEncoding},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]
    ${EnablePacketQueuing},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Exemptions')) {
            [object]$__cmdletization_value = ${Exemptions}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {
            [object]$__cmd</Data>
      <Data Name="ScriptBlockId">5de7b7aa-df10-481f-a25c-f581b803e671</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2862</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">letization_value = ${EnableStatefulFtp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {
            [object]$__cmdletization_value = ${EnableStatefulPptp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {
            [object]$__cmdletization_value = ${RequireFullAuthSupport}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {
            [object]$__cmdletization_value = ${CertValidationLevel}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {
            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {
            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {
            [object]$__cmdletization_value = ${KeyEncoding}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {
            [object]$__cmdletization_value = ${EnablePacketQueuing}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdleti</Data>
      <Data Name="ScriptBlockId">5de7b7aa-df10-481f-a25c-f581b803e671</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2863</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-89d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">3</Data>
      <Data Name="ScriptBlockText">zation_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting'
        
</Data>
      <Data Name="ScriptBlockId">5de7b7aa-df10-481f-a25c-f581b803e671</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2864</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8ad9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 336
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2865</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8bd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 338
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2866</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8cd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 340
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2867</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 342
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2868</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">1fff4fd8-c02c-4d84-9a4b-310a23a24c30</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2869</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8dd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Get-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">d938693e-c2bf-4d47-a184-b0b1789ce0d4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2870</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 344
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2871</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">function Set-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]
    ${Exemptions},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulFtp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulPptp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${RequireFullAuthSupport},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]
    ${CertValidationLevel},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]
    ${AllowIPsecThroughNAT},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSAIdleTimeSeconds},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]
    ${KeyEncoding},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]
    ${EnablePacketQueuing},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Exemptions')) {
            [object]$__cmdletization_value = ${Exemptions}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {
            [object]$__cmdletization_value = ${EnableStatefulFtp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {
            [object]$__cmdletization_value = ${EnableStatefulPptp}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_method</Data>
      <Data Name="ScriptBlockId">f872c625-3492-455d-ab72-5ca00888e8ee</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.145426000Z" />
      <EventRecordID>2872</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8ed9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">Parameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {
            [object]$__cmdletization_value = ${RequireFullAuthSupport}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {
            [object]$__cmdletization_value = ${CertValidationLevel}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {
            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {
            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {
            [object]$__cmdletization_value = ${KeyEncoding}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {
            [object]$__cmdletization_value = ${EnablePacketQueuing}
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">f872c625-3492-455d-ab72-5ca00888e8ee</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2873</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 346
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2874</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;PowerShellMetadata xmlns="http://schemas.microsoft.com/cmdlets-over-objects/2009/11"&gt;
  &lt;Class ClassName="root/standardcimv2/MSFT_NetGPO" ClassVersion="1.0.0"&gt;
    &lt;Version&gt;1.0.0.0&lt;/Version&gt;
    &lt;DefaultNoun&gt;NetGPO&lt;/DefaultNoun&gt;
    &lt;StaticCmdlets&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Open"/&gt;
        &lt;Method MethodName="Open"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="PolicyStore"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" Position="0" PSName="PolicyStore"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="DomainController"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata PSName="DomainController"/&gt;
            &lt;/Parameter&gt;
            &lt;Parameter ParameterName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletOutputMetadata PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
      &lt;Cmdlet&gt;
        &lt;CmdletMetadata Verb="Save"/&gt;
        &lt;Method MethodName="Save"&gt;
          &lt;ReturnValue&gt;
            &lt;Type PSType="System.Int32"/&gt;
            &lt;CmdletOutputMetadata&gt;
              &lt;ErrorCode/&gt;
            &lt;/CmdletOutputMetadata&gt;
          &lt;/ReturnValue&gt;
          &lt;Parameters&gt;
            &lt;Parameter ParameterName="GPOSession"&gt;
              &lt;Type PSType="string"/&gt;
              &lt;CmdletParameterMetadata IsMandatory="true" Position="0" PSName="GPOSession"/&gt;
            &lt;/Parameter&gt;
          &lt;/Parameters&gt;
        &lt;/Method&gt;
      &lt;/Cmdlet&gt;
    &lt;/StaticCmdlets&gt;
  &lt;/Class&gt;
&lt;/PowerShellMetadata&gt;
</Data>
      <Data Name="ScriptBlockId">774024b4-f597-43c1-9043-d5f36a26562e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2875</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-8fd9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

if ($(Microsoft.PowerShell.Core\Get-Command Set-StrictMode -Module Microsoft.PowerShell.Core)) { Microsoft.PowerShell.Core\Set-StrictMode -Off }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = 'Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter'

$script:PrivateData = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.Dictionary[string,string]'

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Open-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([System.String])]
    param(
    
    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Open0')]
    [string]
    ${DomainController},

    [Parameter(ParameterSetName='Open0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Open0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Open0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DomainController')) {
          [object]$__cmdletization_value = ${DomainController}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO'
        

function Save-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='Save1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Save1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Save1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO'
        
</Data>
      <Data Name="ScriptBlockId">a4e2ce6d-a56d-4eb2-aa51-108f3e5e050c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2876</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-90d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 348
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="Module"; value="Microsoft.PowerShell.Core"
ParameterBinding(Get-Command): name="Name"; value="Set-StrictMode"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2877</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-91d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 350
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2878</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-92d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 352
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="System.Collections.Generic.Dictionary[string,string]"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2879</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-93d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 354
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2880</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-93d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">b546cb9b-15e0-4fb6-a63f-09a1a72aa981</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2881</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-93d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Open-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    [OutputType([System.String])]
    param(
    
    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Open0')]
    [string]
    ${DomainController},

    [Parameter(ParameterSetName='Open0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Open0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Open0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DomainController')) {
          [object]$__cmdletization_value = ${DomainController}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">bc6c7c77-c043-491a-a2f6-8aa3bc59ca44</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2882</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-94d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 356
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2883</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-94d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function Save-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    param(
    
    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='Save1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Management.Infrastructure.CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Save1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Save1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = Microsoft.PowerShell.Utility\New-Object 'System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]'

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodParameter -Property @{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = Microsoft.PowerShell.Utility\New-Object Microsoft.PowerShell.Cmdletization.MethodInvocationInfo @('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}</Data>
      <Data Name="ScriptBlockId">738ea0f0-607f-4001-afb9-47867a80447e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.161051000Z" />
      <EventRecordID>2884</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-95d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 7
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 358
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.207928700Z" />
      <EventRecordID>2885</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-97d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 6
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 360
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2886</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['Enabled'].Value + 0)</Data>
      <Data Name="ScriptBlockId">38030b30-77d0-4d86-9e40-14c47f68692a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2887</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Enabled'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">a8a2223d-8bb3-4434-ace1-7f64b0f357b9</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2888</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]($this.PSBase.CimInstanceProperties['DefaultInboundAction'].Value + 0)</Data>
      <Data Name="ScriptBlockId">123e6531-fcbf-4d44-a4d0-4a2ddf3ff29e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2889</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['DefaultInboundAction'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]$x</Data>
      <Data Name="ScriptBlockId">a2d1abfe-146d-4b1e-9180-25b55d79d440</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2890</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]($this.PSBase.CimInstanceProperties['DefaultOutboundAction'].Value + 0)</Data>
      <Data Name="ScriptBlockId">e670ca50-fe1c-4651-b996-058c88db50b2</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2891</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['DefaultOutboundAction'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]$x</Data>
      <Data Name="ScriptBlockId">847c150a-d3c9-42d7-a1d4-7ed3604bb815</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2892</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['AllowInboundRules'].Value + 0)</Data>
      <Data Name="ScriptBlockId">8db228e9-f65a-409e-a570-b8c5809f515c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2893</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowInboundRules'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">a2abae09-730b-48af-88fd-ea7ee63077a7</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2894</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['AllowLocalFirewallRules'].Value + 0)</Data>
      <Data Name="ScriptBlockId">c1847c59-0e7b-4da4-85a9-2d99ae92f446</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2895</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowLocalFirewallRules'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">528b1c27-e08c-41f5-9349-8b1b729f7a94</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2896</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['AllowLocalIPsecRules'].Value + 0)</Data>
      <Data Name="ScriptBlockId">6699b433-aa36-4ce1-a6bc-923c5cdf3058</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2897</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowLocalIPsecRules'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">983fbdb7-8e3a-42bb-906c-81de5819a370</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2898</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['AllowUserApps'].Value + 0)</Data>
      <Data Name="ScriptBlockId">9e878ab5-33cf-4e4c-95e4-659e8d374fcf</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2899</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowUserApps'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">3c497a08-37d1-4aff-adb3-634166eef723</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2900</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['AllowUserPorts'].Value + 0)</Data>
      <Data Name="ScriptBlockId">89c6a461-5262-4654-b042-68ea29f0fadd</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2901</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowUserPorts'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">80a9a891-acd8-4d9d-beb2-6be88d27f780</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2902</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['AllowUnicastResponseToMulticast'].Value + 0)</Data>
      <Data Name="ScriptBlockId">a736dee2-1d34-4d61-b292-41af3fc94d1e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2903</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowUnicastResponseToMulticast'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">0b1ea132-b705-4af8-91c1-d15d4cf72953</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2904</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['NotifyOnListen'].Value + 0)</Data>
      <Data Name="ScriptBlockId">c3c3e25b-67fb-46a2-8720-38543c309e39</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2905</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['NotifyOnListen'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">db23bfa2-cc6f-4a32-abcb-ca2240b154d2</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2906</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['EnableStealthModeForIPsec'].Value + 0)</Data>
      <Data Name="ScriptBlockId">4c45a8a0-1e58-474f-af10-9af21963e917</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2907</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['EnableStealthModeForIPsec'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">c2ba0b0d-1cab-4f90-ac5b-af9616eb42a5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2908</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">$x = $this.PSBase.CimInstanceProperties["LogMaxSizeKilobytes"]; if ($x -ne $null -and $x.Value -ne $null -and $x.Value.ToString().ToUpperInvariant().Equals("4294967296")) { "NotConfigured"; } else { $x.Value }</Data>
      <Data Name="ScriptBlockId">77ddc2c2-241d-4bf9-8a87-0988d6a4ede9</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2909</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x)
            if ($x.ToUpperInvariant().Equals("NOTCONFIGURED")) { $this.PSBase.CimInstanceProperties["LogMaxSizeKilobytes"].Value = 4294967296; } else { $this.PSBase.CimInstanceProperties["LogMaxSizeKilobytes"].Value = [uint32]$x; }</Data>
      <Data Name="ScriptBlockId">7ebb6873-ee84-4615-91cd-d9f74c3d6176</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2910</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['LogAllowed'].Value + 0)</Data>
      <Data Name="ScriptBlockId">80ee7575-2493-47e4-af9c-ab3b69687c4c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2911</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['LogAllowed'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">3a078c84-e6b5-433c-ad11-300c27f5b65b</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2912</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['LogBlocked'].Value + 0)</Data>
      <Data Name="ScriptBlockId">826775ca-dc43-4d46-afea-240aad2bc75e</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2913</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['LogBlocked'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">208ac769-d36a-42ba-95a8-cc2dd90d6a1d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2914</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['LogIgnored'].Value + 0)</Data>
      <Data Name="ScriptBlockId">6c4246eb-803f-4d53-86d4-4d4db1ff19f0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.364185400Z" />
      <EventRecordID>2915</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-98d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['LogIgnored'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">84773bfe-8d51-4d5c-9098-63e131a96940</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.473559200Z" />
      <EventRecordID>2916</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0000-96d9-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 6
        Command Name = Get-NetFirewallProfile
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 362
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-NetFirewallProfile): "Get-NetFirewallProfile"
ParameterBinding(Get-NetFirewallProfile): name="Name"; value=""
ParameterBinding(Get-NetFirewallProfile): name="AssociatedNetFirewallRule"; value=""
ParameterBinding(Get-NetFirewallProfile): name="AssociatedNetIPsecRule"; value=""
ParameterBinding(Get-NetFirewallProfile): name="AssociatedNetIPsecMainModeRule"; value=""
ParameterBinding(Get-NetFirewallProfile): name="All"; value="False"
ParameterBinding(Get-NetFirewallProfile): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallProfile): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallProfile): name="CimSession"; value=""
ParameterBinding(Get-NetFirewallProfile): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallProfile): name="AsJob"; value="False"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.489182300Z" />
      <EventRecordID>2917</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9bcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 6
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 364
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallProfile (InstanceID = "MSFT?FW?FirewallProfile?Domain")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallProfile (InstanceID = "MSFT?FW?FirewallProfile?Private")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallProfile (InstanceID = "MSFT?FW?FirewallProfile?Public")"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.489182300Z" />
      <EventRecordID>2918</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-f6f9-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="4076" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
        [System.Diagnostics.DebuggerHidden()]
        param()

        $foundSuggestion = $false
        
        if($lastError -and
            ($lastError.Exception -is "System.Management.Automation.CommandNotFoundException"))
        {
            $escapedCommand = [System.Management.Automation.WildcardPattern]::Escape($lastError.TargetObject)
            $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(".", $escapedCommand)) -ErrorAction Ignore).Count -gt 0
        }

        $foundSuggestion
        </Data>
      <Data Name="ScriptBlockId">2787f994-2d5a-441a-9f5c-1919bacf0cd4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.489182300Z" />
      <EventRecordID>2919</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0001-f6f9-90a655bfd701}" />
      <Execution ProcessID="852" ThreadID="4076" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">"The command $($lastError.TargetObject) was not found, but does exist in the current location. Windows PowerShell does not load commands from the current location by default. If you trust this command, instead type `".\$($lastError.TargetObject)`". See `"get-help about_Command_Precedence`" for more details."</Data>
      <Data Name="ScriptBlockId">c252d596-7bf9-4da5-a368-f192dbed5692</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:06.489182300Z" />
      <EventRecordID>2920</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-9bcb-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">0a6b1c79-5b74-4fb8-be32-4b9f3b1d8535</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.000000000Z" />
      <EventRecordID>912</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=365

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=11
	ScriptName=
	CommandLine=                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.223587700Z" />
      <EventRecordID>2921</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-33ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">Get-NetFirewallRule</Data>
      <Data Name="ScriptBlockId">cef51d60-3461-4b6a-8c7c-4bdc4aa25dad</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.239232200Z" />
      <EventRecordID>2922</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fbef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 11
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 366
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2923</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">$this.PSBase.CimInstanceProperties["DisplayName"].Value</Data>
      <Data Name="ScriptBlockId">8e9be5cd-8878-4c1c-b301-7cf513bc93ce</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2924</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x) ; $this.PSBase.CimInstanceProperties["DisplayName"].Value = $x ; $this.PSBase.CimInstanceProperties["ElementName"].Value = $x</Data>
      <Data Name="ScriptBlockId">cbc3511a-6f7c-4cf8-a8e9-d77d22a963ce</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2925</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]($this.PSBase.CimInstanceProperties['Enabled'].Value + 0)</Data>
      <Data Name="ScriptBlockId">9974e1d9-62ee-4c6c-9b48-68b48104cf1a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2926</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Enabled'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]$x</Data>
      <Data Name="ScriptBlockId">ccb48adf-55b8-4ffc-be93-98c1c2034183</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2927</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]($this.PSBase.CimInstanceProperties['Profiles'].Value + 0)</Data>
      <Data Name="ScriptBlockId">62e67463-3def-4a97-8af6-1aa451360cd4</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2928</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Profiles'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]$x</Data>
      <Data Name="ScriptBlockId">101dddb0-025c-4f03-8b37-62262cc1e89a</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2929</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]($this.PSBase.CimInstanceProperties['Direction'].Value + 0)</Data>
      <Data Name="ScriptBlockId">25147a1f-99bb-4cef-938a-83424cb79e6c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2930</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Direction'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]$x</Data>
      <Data Name="ScriptBlockId">e4382040-6009-4715-95cf-6456b8ffef9f</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2931</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]($this.PSBase.CimInstanceProperties['Action'].Value + 0)</Data>
      <Data Name="ScriptBlockId">993b2a56-d880-432f-af0b-48cb94016cc6</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2932</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Action'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]$x</Data>
      <Data Name="ScriptBlockId">222733b5-5761-42e6-b6b2-97e9f9deb01c</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2933</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]($this.PSBase.CimInstanceProperties['EdgeTraversalPolicy'].Value + 0)</Data>
      <Data Name="ScriptBlockId">1ded7701-d2a5-418e-b87f-c3bff6a3f573</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2934</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['EdgeTraversalPolicy'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]$x</Data>
      <Data Name="ScriptBlockId">2404d3bd-c8e5-4a46-a49f-429ccb3e5fa5</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2935</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus]($this.PSBase.CimInstanceProperties['PrimaryStatus'].Value + 0)</Data>
      <Data Name="ScriptBlockId">ddabad96-7b43-4c6a-a7a1-7acc7fe7ee53</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2936</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['PrimaryStatus'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus]$x</Data>
      <Data Name="ScriptBlockId">7fce69f7-45ad-46a7-92e1-f5bb9239452d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2937</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">$this.PSBase.CimInstanceProperties["Status"].Value + " (" + ($this.PSBase.CimInstanceProperties["StatusCode"].Value + 0) + ")"</Data>
      <Data Name="ScriptBlockId">81aedabe-507c-4d41-bf00-0763d1411253</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2938</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.Windows.Firewall.Commands.Formatting.Formatter]::FormatEnforcementStatus($this.PSBase.CimInstanceProperties["EnforcementStatus"].Value)</Data>
      <Data Name="ScriptBlockId">acaa7940-72a2-498c-9d13-dd1ef7f8b842</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2939</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType]($this.PSBase.CimInstanceProperties['PolicyStoreSourceType'].Value + 0)</Data>
      <Data Name="ScriptBlockId">08eb6091-c0a3-4af6-ad5f-5d7c578d4c35</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:08.317336600Z" />
      <EventRecordID>2940</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0003-fcef-89a655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['PolicyStoreSourceType'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType]$x</Data>
      <Data Name="ScriptBlockId">c3b11b88-038c-4579-a6a6-60c4c2d965ff</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:12.000000000Z" />
      <EventRecordID>913</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Get-NetFirewallRule</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=367

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=11
	ScriptName=
	CommandLine=Get-NetFirewallRule</Data>
      <Data>CommandInvocation(Get-NetFirewallRule): "Get-NetFirewallRule"
ParameterBinding(Get-NetFirewallRule): name="Name"; value=""
ParameterBinding(Get-NetFirewallRule): name="DisplayName"; value=""
ParameterBinding(Get-NetFirewallRule): name="Description"; value=""
ParameterBinding(Get-NetFirewallRule): name="DisplayGroup"; value=""
ParameterBinding(Get-NetFirewallRule): name="Group"; value=""
ParameterBinding(Get-NetFirewallRule): name="Enabled"; value=""
ParameterBinding(Get-NetFirewallRule): name="Direction"; value=""
ParameterBinding(Get-NetFirewallRule): name="Action"; value=""
ParameterBinding(Get-NetFirewallRule): name="EdgeTraversalPolicy"; value=""
ParameterBinding(Get-NetFirewallRule): name="LooseSourceMapping"; value=""
ParameterBinding(Get-NetFirewallRule): name="LocalOnlyMapping"; value=""
ParameterBinding(Get-NetFirewallRule): name="Owner"; value=""
ParameterBinding(Get-NetFirewallRule): name="PrimaryStatus"; value=""
ParameterBinding(Get-NetFirewallRule): name="Status"; value=""
ParameterBinding(Get-NetFirewallRule): name="PolicyStoreSource"; value=""
ParameterBinding(Get-NetFirewallRule): name="PolicyStoreSourceType"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallAddressFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallApplicationFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallInterfaceFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallInterfaceTypeFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallPortFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallSecurityFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallServiceFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallProfile"; value=""
ParameterBinding(Get-NetFirewallRule): name="All"; value="False"
ParameterBinding(Get-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallRule): name="TracePolicyStore"; value="False"
ParameterBinding(Get-NetFirewallRule): name="CimSession"; value=""
ParameterBinding(Get-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallRule): name="AsJob"; value="False"
TerminatingError(): "The pipeline has been stopped."
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:12.000000000Z" />
      <EventRecordID>914</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=2

	SequenceNumber=369

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=11
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?vm-monitoring-icmp..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?vm-monitoring-rpc", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?vm-monitoring-icmp..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?vm-monitoring-dcom..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?vm-monitoring-nb-s..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SNMPTRAP-In-UDP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SNMPTRAP-In-UDP-No..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Wininit-Shutdown-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Wininit-Shutdown-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?EventForwarder-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?EventForwarder-RPC..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-UPnPHost-In..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-UPnPHost-Ou..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-NB_Name-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-NB_Name-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-NB_Datagram..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-NB_Datagram..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-WSDEVNTS-In..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-WSDEVNTS-Ou..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-WSDEVNT-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-WSDEVNT-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-SSDPSrv-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-SSDPSrv-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-UPnP-Out-TC..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-FDPHOST-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-FDPHOST-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-LLMNR-In-UD..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-LLMNR-Out-U..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-FDRESPUB-WS..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?NETDIS-FDRESPUB-WS..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Netlogon-NamedPipe..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Netlogon-TCP-RPC-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SCW-Allow-Inbound-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SCW-Allow-Inbound-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SCW-Allow-Inbound-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SSTP-IN-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteTask-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteTask-RPCSS-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WINRM-HTTP-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WINRM-HTTP-In-TCP-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WINRM-HTTP-Compat-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?Microsoft-Windows-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-NB_Session-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-NB_Session-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-SMB-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-SMB-Out-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-NB_Name-In-UDP..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-NB_Name-Out-UD..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-NB_Datagram-In..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-NB_Datagram-Ou..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-SpoolSvc-In-TC..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-RPCSS-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-ICMP4-ERQ-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-ICMP4-ERQ-Out", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-ICMP6-ERQ-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-ICMP6-ERQ-Out", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-LLMNR-In-UDP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?FPS-LLMNR-Out-UDP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteDesktop-User..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteDesktop-User..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteDesktop-Shad..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RRAS-GRE-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RRAS-GRE-Out", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RRAS-L2TP-In-UDP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RRAS-L2TP-Out-UDP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RRAS-PPTP-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RRAS-PPTP-Out-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RVM-VDS-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:12.000000000Z" />
      <EventRecordID>915</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=2
	DetailTotal=2

	SequenceNumber=369

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=11
	ScriptName=
	CommandLine=</Data>
      <Data>ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RVM-VDSLDR-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RVM-RPCSS-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?MsiScsi-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?MsiScsi-Out-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?TPMVSCMGR-RPCSS-In..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?TPMVSCMGR-Server-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?TPMVSCMGR-Server-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?TPMVSCMGR-RPCSS-In..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?TPMVSCMGR-Server-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?TPMVSCMGR-Server-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteEventLogSvc-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteEventLogSvc-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteEventLogSvc-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?SPPSVC-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?MSDTC-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?MSDTC-Out-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?MSDTC-KTMRM-In-TCP..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?MSDTC-RPCSS-In-TCP..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?PerfLogsAlerts-PLA..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?PerfLogsAlerts-DCO..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?PerfLogsAlerts-PLA..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?PerfLogsAlerts-DCO..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-DU-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-PTB-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-PTB-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-TE-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-TE-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-PP-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-PP-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-NDS-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-NDS-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-NDA-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-NDA-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-RA-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-RA-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-RS-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-RS-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LQ-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LQ-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LR-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LR-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LR2-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LR2-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LD-I..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP6-LD-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-ICMP4-DUFR..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-IGMP-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-IGMP-Out", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-DHCP-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-DHCP-Out", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-DHCPV6-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-DHCPV6-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-Teredo-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-Teredo-Out..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-IPHTTPS-In..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-IPHTTPS-Ou..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-IPv6-In", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-IPv6-Out", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-GP-NP-Out-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-GP-Out-TCP..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-DNS-Out-UD..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?CoreNet-GP-LSASS-O..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteFwAdmin-In-T..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteFwAdmin-RPCS..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?ComPlusRemoteAdmin..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WMI-RPCSS-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WMI-WINMGMT-In-TCP..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WMI-WINMGMT-Out-TC..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?WMI-ASYNC-In-TCP", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteSvcAdmin-In-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?RemoteSvcAdmin-NP-..., PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
TerminatingError(): "The pipeline has been stopped."
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:12.926781200Z" />
      <EventRecordID>2941</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-63ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 11
        Command Name = Get-NetFirewallRule
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 368
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-NetFirewallRule): "Get-NetFirewallRule"
ParameterBinding(Get-NetFirewallRule): name="Name"; value=""
ParameterBinding(Get-NetFirewallRule): name="DisplayName"; value=""
ParameterBinding(Get-NetFirewallRule): name="Description"; value=""
ParameterBinding(Get-NetFirewallRule): name="DisplayGroup"; value=""
ParameterBinding(Get-NetFirewallRule): name="Group"; value=""
ParameterBinding(Get-NetFirewallRule): name="Enabled"; value=""
ParameterBinding(Get-NetFirewallRule): name="Direction"; value=""
ParameterBinding(Get-NetFirewallRule): name="Action"; value=""
ParameterBinding(Get-NetFirewallRule): name="EdgeTraversalPolicy"; value=""
ParameterBinding(Get-NetFirewallRule): name="LooseSourceMapping"; value=""
ParameterBinding(Get-NetFirewallRule): name="LocalOnlyMapping"; value=""
ParameterBinding(Get-NetFirewallRule): name="Owner"; value=""
ParameterBinding(Get-NetFirewallRule): name="PrimaryStatus"; value=""
ParameterBinding(Get-NetFirewallRule): name="Status"; value=""
ParameterBinding(Get-NetFirewallRule): name="PolicyStoreSource"; value=""
ParameterBinding(Get-NetFirewallRule): name="PolicyStoreSourceType"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallAddressFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallApplicationFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallInterfaceFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallInterfaceTypeFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallPortFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallSecurityFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallServiceFilter"; value=""
ParameterBinding(Get-NetFirewallRule): name="AssociatedNetFirewallProfile"; value=""
ParameterBinding(Get-NetFirewallRule): name="All"; value="False"
ParameterBinding(Get-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallRule): name="TracePolicyStore"; value="False"
ParameterBinding(Get-NetFirewallRule): name="CimSession"; value=""
ParameterBinding(Get-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallRule): name="AsJob"; value="False"
TerminatingError(): "The pipeline has been stopped."
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:12.926781200Z" />
      <EventRecordID>2942</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-63ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">26943a6a-cb79-4523-b5ea-154d7df210f2</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.000000000Z" />
      <EventRecordID>916</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=371

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=13
	ScriptName=
	CommandLine=                $__cmdletization_objectModelWrapper = Microsoft.PowerShell.Utility\New-Object $script:ObjectModelWrapper
</Data>
      <Data>CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.000000000Z" />
      <EventRecordID>917</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Get-NetFirewallSetting</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=373

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=13
	ScriptName=
	CommandLine=Get-NetFirewallSetting</Data>
      <Data>CommandInvocation(Get-NetFirewallSetting): "Get-NetFirewallSetting"
ParameterBinding(Get-NetFirewallSetting): name="All"; value="False"
ParameterBinding(Get-NetFirewallSetting): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallSetting): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallSetting): name="CimSession"; value=""
ParameterBinding(Get-NetFirewallSetting): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallSetting): name="AsJob"; value="False"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.000000000Z" />
      <EventRecordID>918</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=375

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=4.0
	HostId=ae3b6f96-abd2-46e7-9579-99db2437fdda
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=4.0
	RunspaceId=fed00f7d-57af-47e8-85fc-6cb6933b3891
	PipelineId=13
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetSecuritySettingData (InstanceID = "MSFT?GlobalIPSecSettingData")"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.770548800Z" />
      <EventRecordID>2943</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7ace-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">Get-NetFirewallSetting</Data>
      <Data Name="ScriptBlockId">b8c7e5eb-3aef-4c86-9942-4c9bd8ddba64</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.786167700Z" />
      <EventRecordID>2944</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-81ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 13
        Command Name = New-Object
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 372
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-Object): "New-Object"
ParameterBinding(New-Object): name="TypeName"; value="Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2945</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]($this.PSBase.CimInstanceProperties['Exemptions'].Value + 0)</Data>
      <Data Name="ScriptBlockId">6ebcfd2c-4ce1-4661-8e27-22621669c9cf</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2946</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Exemptions'].Value = [System.Uint32][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]$x</Data>
      <Data Name="ScriptBlockId">ec2f4251-9c84-4d78-b547-c701d4e9d2bc</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2947</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['EnableStatefulFtp'].Value + 0)</Data>
      <Data Name="ScriptBlockId">40b8734f-9a80-414f-84c8-59bc993603cf</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2948</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['EnableStatefulFtp'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">d4d41c4e-f0dd-48e3-bb08-5cd56b52a431</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2949</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['EnableStatefulPptp'].Value + 0)</Data>
      <Data Name="ScriptBlockId">8c0ff0e8-f7fe-4432-9268-1a76e5c8f627</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2950</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['EnableStatefulPptp'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">551bce48-2506-460f-b19f-71e78568ecd1</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2951</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]($this.PSBase.CimInstanceProperties['Profile'].Value + 0)</Data>
      <Data Name="ScriptBlockId">ed711a53-87fe-46b5-9dd3-8d2670340db9</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2952</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['Profile'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]$x</Data>
      <Data Name="ScriptBlockId">7fcc20e4-5b0a-4ef8-b934-738b69599444</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2953</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]($this.PSBase.CimInstanceProperties['RequireFullAuthSupport'].Value + 0)</Data>
      <Data Name="ScriptBlockId">d5b0e789-8833-4ecd-b997-3d01acb4e859</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2954</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['RequireFullAuthSupport'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]$x</Data>
      <Data Name="ScriptBlockId">92262daf-2425-4988-b1a9-734f2fbfba06</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2955</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]($this.PSBase.CimInstanceProperties['CertValidationLevel'].Value + 0)</Data>
      <Data Name="ScriptBlockId">64faaf72-7d91-45c1-89fd-54ebfa3de209</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2956</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['CertValidationLevel'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]$x</Data>
      <Data Name="ScriptBlockId">a41b3385-c899-429c-a6c0-b688cef49275</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2957</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]($this.PSBase.CimInstanceProperties['AllowIPsecThroughNAT'].Value + 0)</Data>
      <Data Name="ScriptBlockId">3f8096e2-1745-42cd-aca8-1a53f5c9b3b3</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2958</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['AllowIPsecThroughNAT'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]$x</Data>
      <Data Name="ScriptBlockId">acec8a46-ef9c-4af4-a495-a3d502986688</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2959</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">$x = $this.PSBase.CimInstanceProperties["MaxSAIdleTimeSeconds"]; if ($x -ne $null -and $x.Value -ne $null -and $x.Value.ToString().Equals("0")) { "NotConfigured"; } else { $x.Value }</Data>
      <Data Name="ScriptBlockId">b46e8236-0f0f-4242-8058-763b96169a00</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2960</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x)
        if ($x.ToUpperInvariant().Equals("NOTCONFIGURED")) { $this.PSBase.CimInstanceProperties["MaxSAIdleTimeSeconds"].Value = 0; } else { $this.PSBase.CimInstanceProperties["MaxSAIdleTimeSeconds"].Value = [uint32]$x; }</Data>
      <Data Name="ScriptBlockId">1c6dc9f4-ca6d-4c09-917b-8896b9cd7bb0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2961</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]($this.PSBase.CimInstanceProperties['KeyEncoding'].Value + 0)</Data>
      <Data Name="ScriptBlockId">4c4650f0-32c2-416d-a352-725ae41728bf</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2962</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['KeyEncoding'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]$x</Data>
      <Data Name="ScriptBlockId">70ebcb1c-9e9b-4a2a-b195-d2a423480f2d</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2963</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">[Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]($this.PSBase.CimInstanceProperties['EnablePacketQueuing'].Value + 0)</Data>
      <Data Name="ScriptBlockId">a1992e8e-5b14-46b7-b160-3cbef0f1b6a0</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.801793600Z" />
      <EventRecordID>2964</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-82ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">param($x); $this.PSBase.CimInstanceProperties['EnablePacketQueuing'].Value = [System.Uint16][Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]$x</Data>
      <Data Name="ScriptBlockId">68ea953a-e111-4fea-8995-c66c0a4ea308</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.848670400Z" />
      <EventRecordID>2965</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-80ce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 13
        Command Name = Get-NetFirewallSetting
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 374
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-NetFirewallSetting): "Get-NetFirewallSetting"
ParameterBinding(Get-NetFirewallSetting): name="All"; value="False"
ParameterBinding(Get-NetFirewallSetting): name="PolicyStore"; value=""
ParameterBinding(Get-NetFirewallSetting): name="GPOSession"; value=""
ParameterBinding(Get-NetFirewallSetting): name="CimSession"; value=""
ParameterBinding(Get-NetFirewallSetting): name="ThrottleLimit"; value="0"
ParameterBinding(Get-NetFirewallSetting): name="AsJob"; value="False"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.848670400Z" />
      <EventRecordID>2966</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7fce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 4.0
        Host ID = ae3b6f96-abd2-46e7-9579-99db2437fdda
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 4.0
        Runspace ID = fed00f7d-57af-47e8-85fc-6cb6933b3891
        Pipeline ID = 13
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 376
        User = OFFSEC\admmig
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetSecuritySettingData (InstanceID = "MSFT?GlobalIPSecSettingData")"
</Data>
    </EventData>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{a0c1853b-5c40-4b15-8766-3cf1c58f985a}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>102</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-10-25T07:23:13.864294900Z" />
      <EventRecordID>2967</EventRecordID>
      <Correlation ActivityID="{a674bae4-bf55-0002-7fce-8ea655bfd701}" />
      <Execution ProcessID="852" ThreadID="2572" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>FS03.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">42754567-785c-4453-9905-65e3d8435be5</Data>
    </EventData>
  </Event>
</root>