<root>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.667323300Z" />
      <EventRecordID>7504</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-51B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 68
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 534
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 68
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 534
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.671360200Z" />
      <EventRecordID>7505</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-86FB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="2344" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 536
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 536
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.674387300Z" />
      <EventRecordID>7506</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-9CB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">63862e2c-739a-4def-a944-9136884be531</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
prompt

ScriptBlock ID: 63862e2c-739a-4def-a944-9136884be531
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.677873400Z" />
      <EventRecordID>7507</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-ADB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 70
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 538
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 70
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 538
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.684319500Z" />
      <EventRecordID>7508</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-ACB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 70
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 540
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 70
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 540
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.684860000Z" />
      <EventRecordID>7509</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-BDB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;Select Path="Windows PowerShell"&gt;*&lt;/Select&gt;</Data>
      <Data Name="ScriptBlockId">b44c7ada-1bcc-4877-a7a4-36afcd7edcfb</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
        &lt;Select Path="Windows PowerShell"&gt;*&lt;/Select&gt;

ScriptBlock ID: b44c7ada-1bcc-4877-a7a4-36afcd7edcfb
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.757346800Z" />
      <EventRecordID>7510</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-CDFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.PSMessageDetails }</Data>
      <Data Name="ScriptBlockId">2c1feb6a-be95-453f-b12e-6fa4c51c3ccc</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.PSMessageDetails }

ScriptBlock ID: 2c1feb6a-be95-453f-b12e-6fa4c51c3ccc
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.758352800Z" />
      <EventRecordID>7511</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-CEFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 556
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 556
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.761718200Z" />
      <EventRecordID>7512</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D0B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }</Data>
      <Data Name="ScriptBlockId">78c5030f-9588-4832-b742-3e6561eadba7</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }

ScriptBlock ID: 78c5030f-9588-4832-b742-3e6561eadba7
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.762143700Z" />
      <EventRecordID>7513</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D1B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 558
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 558
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.762638600Z" />
      <EventRecordID>7514</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D2B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }</Data>
      <Data Name="ScriptBlockId">79fb8511-4fad-435b-8288-9be6b91b2fc1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }

ScriptBlock ID: 79fb8511-4fad-435b-8288-9be6b91b2fc1
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.762958300Z" />
      <EventRecordID>7515</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D3B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 560
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 560
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.763393000Z" />
      <EventRecordID>7516</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D4B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.OriginInfo }</Data>
      <Data Name="ScriptBlockId">c4f7f1fb-06af-449c-9178-fde87b12bdb8</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.OriginInfo }

ScriptBlock ID: c4f7f1fb-06af-449c-9178-fde87b12bdb8
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.763709400Z" />
      <EventRecordID>7517</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D5B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 562
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 562
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.764323600Z" />
      <EventRecordID>7518</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-CAFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="3096" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Out-String
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 564
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-String): "Out-String"
CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="Transcript"; value="True"
ParameterBinding(Out-String): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
ParameterBinding(Out-Default): name="InputObject"; value="&lt; : The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:9
+         &lt;Select Path="Windows PowerShell"&gt;*&lt;/Select&gt;
+         ~
    + CategoryInfo          : ObjectNotFound: (&lt;:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Out-String): "Out-String"
CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="Transcript"; value="True"
ParameterBinding(Out-String): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
ParameterBinding(Out-Default): name="InputObject"; value="&lt; : The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:9
+         &lt;Select Path="Windows PowerShell"&gt;*&lt;/Select&gt;
+         ~
    + CategoryInfo          : ObjectNotFound: (&lt;:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = b7f4c172-f1cb-4d81-b4f7-5fd24a64c452
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 5874613b-0c46-420e-96de-13c2628f1781
        Pipeline ID = 1
        Command Name = Out-String
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 564
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.768280400Z" />
      <EventRecordID>7519</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-DAB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.PSMessageDetails }</Data>
      <Data Name="ScriptBlockId">fb5f0003-50be-4015-9d54-ae7312b1677d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.PSMessageDetails }

ScriptBlock ID: fb5f0003-50be-4015-9d54-ae7312b1677d
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.768737000Z" />
      <EventRecordID>7520</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-DBB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 566
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 566
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.771351700Z" />
      <EventRecordID>7521</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-DCFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 568
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 568
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.771751100Z" />
      <EventRecordID>7522</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-DDFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }</Data>
      <Data Name="ScriptBlockId">9e7f43f3-6c29-4ef6-b694-e1f9591d56bb</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }

ScriptBlock ID: 9e7f43f3-6c29-4ef6-b694-e1f9591d56bb
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.772079200Z" />
      <EventRecordID>7523</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-DEFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 570
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 570
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.772466900Z" />
      <EventRecordID>7524</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-DFFB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.OriginInfo }</Data>
      <Data Name="ScriptBlockId">19599025-0213-420f-9c42-70bab29227c9</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.OriginInfo }

ScriptBlock ID: 19599025-0213-420f-9c42-70bab29227c9
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.772767900Z" />
      <EventRecordID>7525</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-E0FB-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 572
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 572
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.955928200Z" />
      <EventRecordID>7015</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>                                        $errorCategoryMsg = &amp; { Set-StrictMode -Version 1; $_.ErrorCategory_Message }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=609

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=74
	ScriptName=
	CommandLine=                                        $errorCategoryMsg = &amp; { Set-StrictMode -Version 1; $_.ErrorCategory_Message }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:                                         $errorCategoryMsg = &amp; { Set-StrictMode -Version 1; $_.ErrorCategory_Message }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=609

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=74
	ScriptName=
	CommandLine=                                        $errorCategoryMsg = &amp; { Set-StrictMode -Version 1; $_.ErrorCategory_Message }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.783973200Z" />
      <EventRecordID>7526</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-BDB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 574
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 71
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 574
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.788614000Z" />
      <EventRecordID>7527</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E1B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="2344" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 576
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 576
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.792044200Z" />
      <EventRecordID>7528</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E3B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">a9a7dfba-6a75-49db-9ad8-3a3582edfef3</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
prompt

ScriptBlock ID: a9a7dfba-6a75-49db-9ad8-3a3582edfef3
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.793324300Z" />
      <EventRecordID>7529</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E8B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 73
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 578
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 73
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 578
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.795902600Z" />
      <EventRecordID>7530</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E7B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 73
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 580
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 73
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 580
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.796309000Z" />
      <EventRecordID>7531</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-EAB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">&lt;/Query&gt;</Data>
      <Data Name="ScriptBlockId">69431d8e-e198-47d6-8d9c-915e2dfc6342</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
      &lt;/Query&gt;

ScriptBlock ID: 69431d8e-e198-47d6-8d9c-915e2dfc6342
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.944005200Z" />
      <EventRecordID>7532</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FCB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.PSMessageDetails }</Data>
      <Data Name="ScriptBlockId">163a7673-aba8-4d8b-a219-b9f83a5783c1</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.PSMessageDetails }

ScriptBlock ID: 163a7673-aba8-4d8b-a219-b9f83a5783c1
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.944479500Z" />
      <EventRecordID>7533</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FDB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 596
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 596
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.947257800Z" />
      <EventRecordID>7534</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FEB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }</Data>
      <Data Name="ScriptBlockId">cf9c00a3-eef4-4989-af16-ceac0ddc30a7</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }

ScriptBlock ID: cf9c00a3-eef4-4989-af16-ceac0ddc30a7
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.947629200Z" />
      <EventRecordID>7535</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FFB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 598
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 598
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.948066300Z" />
      <EventRecordID>7536</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-00B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }</Data>
      <Data Name="ScriptBlockId">c7efead9-063b-4149-be56-87808db3dd29</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }

ScriptBlock ID: c7efead9-063b-4149-be56-87808db3dd29
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.948389700Z" />
      <EventRecordID>7537</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-01B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 600
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 600
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.948789500Z" />
      <EventRecordID>7538</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-02B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.OriginInfo }</Data>
      <Data Name="ScriptBlockId">f3ea87f5-156d-4dbb-be43-a963d57e8780</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.OriginInfo }

ScriptBlock ID: f3ea87f5-156d-4dbb-be43-a963d57e8780
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.949094300Z" />
      <EventRecordID>7539</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-03B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 602
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 602
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.950387400Z" />
      <EventRecordID>7540</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-F9B8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="6912" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Out-String
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 604
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-String): "Out-String"
CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="Transcript"; value="True"
ParameterBinding(Out-String): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
ParameterBinding(Out-Default): name="InputObject"; value="&lt; : The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:7
+       &lt;/Query&gt;
+       ~
    + CategoryInfo          : ObjectNotFound: (&lt;:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Out-String): "Out-String"
CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="Transcript"; value="True"
ParameterBinding(Out-String): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
ParameterBinding(Out-Default): name="InputObject"; value="&lt; : The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:7
+       &lt;/Query&gt;
+       ~
    + CategoryInfo          : ObjectNotFound: (&lt;:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
"


Context:
        Severity = Informational
        Host Name = Default Host
        Host Version = 5.1.14393.3383
        Host ID = 55412aca-f4fd-4474-91aa-d34eed8ff97a
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = b103bc30-9547-4f58-a8d7-42721ad742a2
        Pipeline ID = 1
        Command Name = Out-String
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 604
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.954101400Z" />
      <EventRecordID>7541</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-08B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.PSMessageDetails }</Data>
      <Data Name="ScriptBlockId">65041f90-40b1-43df-aed0-1ea960ef2abb</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.PSMessageDetails }

ScriptBlock ID: 65041f90-40b1-43df-aed0-1ea960ef2abb
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.954472300Z" />
      <EventRecordID>7542</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-09B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 606
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 606
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.955928200Z" />
      <EventRecordID>7016</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>                                        $originInfo = &amp; { Set-StrictMode -Version 1; $_.OriginInfo }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=611

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=74
	ScriptName=
	CommandLine=                                        $originInfo = &amp; { Set-StrictMode -Version 1; $_.OriginInfo }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:                                         $originInfo = &amp; { Set-StrictMode -Version 1; $_.OriginInfo }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=611

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=74
	ScriptName=
	CommandLine=                                        $originInfo = &amp; { Set-StrictMode -Version 1; $_.OriginInfo }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.971552900Z" />
      <EventRecordID>7017</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=613

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=74
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: . 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=613

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=74
	ScriptName=
	CommandLine= 

Details: 
CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.971552900Z" />
      <EventRecordID>7018</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>                $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(".", $escapedCommand)) -ErrorAction Ignore).Count -gt 0
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=615

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=
	ScriptName=
	CommandLine=                $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(".", $escapedCommand)) -ErrorAction Ignore).Count -gt 0
</Data>
      <Data>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:                 $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(".", $escapedCommand)) -ErrorAction Ignore).Count -gt 0
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=615

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=
	ScriptName=
	CommandLine=                $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(".", $escapedCommand)) -ErrorAction Ignore).Count -gt 0
 

Details: 
CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.971552900Z" />
      <EventRecordID>7019</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=617

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=76
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:     Microsoft.PowerShell.Core\Set-StrictMode -Off
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=617

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=76
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.987178200Z" />
      <EventRecordID>7020</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=619

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=76
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: . 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=619

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=76
	ScriptName=
	CommandLine= 

Details: 
CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.987178200Z" />
      <EventRecordID>7021</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=621

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=78
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:     Microsoft.PowerShell.Core\Set-StrictMode -Off
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=621

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=78
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:30.034054300Z" />
      <EventRecordID>7022</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=623

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=78
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: . 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=623

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=78
	ScriptName=
	CommandLine= 

Details: 
CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:30.034054300Z" />
      <EventRecordID>7023</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=625

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=80
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:     Microsoft.PowerShell.Core\Set-StrictMode -Off
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=625

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=80
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.957383900Z" />
      <EventRecordID>7543</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0BB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 608
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 608
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.958197100Z" />
      <EventRecordID>7544</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0CB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }</Data>
      <Data Name="ScriptBlockId">774a5fab-daec-4033-bd4b-492b7ae9e852</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }

ScriptBlock ID: 774a5fab-daec-4033-bd4b-492b7ae9e852
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.958504600Z" />
      <EventRecordID>7545</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0DB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 610
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 610
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.958893300Z" />
      <EventRecordID>7546</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0EB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">{ Set-StrictMode -Version 1; $_.OriginInfo }</Data>
      <Data Name="ScriptBlockId">af527e12-85cf-4bc9-8350-e15a9b257caf</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
{ Set-StrictMode -Version 1; $_.OriginInfo }

ScriptBlock ID: af527e12-85cf-4bc9-8350-e15a9b257caf
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.959473400Z" />
      <EventRecordID>7547</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0FB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 612
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Version"; value="1.0"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 612
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.976021700Z" />
      <EventRecordID>7548</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-EAB8-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 614
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="The term '&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 74
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 614
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.980754400Z" />
      <EventRecordID>7549</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-65FC-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="2344" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 616
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Get-Command): "Get-Command"
ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
ParameterBinding(Get-Command): name="Name"; value=".\&lt;"
NonTerminatingError(Get-Command): "Illegal characters in path."
NonTerminatingError(Get-Command): "The term '.\&lt;' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again."
CommandInvocation(Get-Command): "Get-Command"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 
        Command Name = Get-Command
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 616
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.985931100Z" />
      <EventRecordID>7550</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-76FC-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">5bc40319-cbde-498d-86cc-956db3bdfa3a</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
prompt

ScriptBlock ID: 5bc40319-cbde-498d-86cc-956db3bdfa3a
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.994828400Z" />
      <EventRecordID>7551</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-84FC-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 76
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 618
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 76
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 618
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.998346600Z" />
      <EventRecordID>7552</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-83FC-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 76
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 620
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 76
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 620
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:29.999583400Z" />
      <EventRecordID>7553</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-5DB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">6e37b788-f4af-4767-a178-14a1b810e4cc</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
prompt

ScriptBlock ID: 6e37b788-f4af-4767-a178-14a1b810e4cc
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:30.001033100Z" />
      <EventRecordID>7554</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-62B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 78
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 622
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 78
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 622
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:30.043780000Z" />
      <EventRecordID>7555</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-61B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 78
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 624
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 78
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 624
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:30.044806100Z" />
      <EventRecordID>7556</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-64B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">13592b54-2dc9-457a-bf83-9c6b676dfada</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
prompt

ScriptBlock ID: 13592b54-2dc9-457a-bf83-9c6b676dfada
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:30.046032200Z" />
      <EventRecordID>7557</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-9DFC-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 80
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 626
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 80
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 626
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:43.605213000Z" />
      <EventRecordID>7024</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=627

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=80
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: . 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=627

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=80
	ScriptName=
	CommandLine= 

Details: 
CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:43.608981900Z" />
      <EventRecordID>7558</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-9CFC-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 80
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 628
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(PSConsoleHostReadline): "PSConsoleHostReadline"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 80
        Command Name = PSConsoleHostReadline
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 628
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:43.609877100Z" />
      <EventRecordID>7559</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D9B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22</Data>
      <Data Name="ScriptBlockId">ee8016fd-b077-46b9-a5c2-53f252a74311</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

ScriptBlock ID: ee8016fd-b077-46b9-a5c2-53f252a74311
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.633623700Z" />
      <EventRecordID>7025</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=629

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=629

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7026</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=631

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=631

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.641668100Z" />
      <EventRecordID>7572</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-DAB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">13</Data>
      <Data Name="MessageTotal">13</Data>
      <Data Name="ScriptBlockText">
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">6d7585bb-c725-42ec-8541-3e65aa966a38</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (13 of 13):

    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
        


ScriptBlock ID: 6d7585bb-c725-42ec-8541-3e65aa966a38
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.642207300Z" />
      <EventRecordID>7573</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-DBB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 630
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 630
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7027</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=633

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=633

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7028</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=635

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=635

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7029</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=637

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=637

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7030</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=639

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=639

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7031</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=641

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=641

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7032</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=643

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=643

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7033</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=645

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=645

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7034</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=647

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=647

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.649263300Z" />
      <EventRecordID>7035</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=649

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=649

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.652854700Z" />
      <EventRecordID>7574</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-DFB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 632
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 632
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.653573200Z" />
      <EventRecordID>7575</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E0B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 634
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 634
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.654199100Z" />
      <EventRecordID>7576</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E1B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 636
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 636
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.654568600Z" />
      <EventRecordID>7577</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-EBB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 638
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 638
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.655613300Z" />
      <EventRecordID>7578</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-ECB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 640
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 640
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.655956800Z" />
      <EventRecordID>7579</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-42FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 642
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 642
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.656893400Z" />
      <EventRecordID>7580</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-EDB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 644
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 644
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.658156700Z" />
      <EventRecordID>7581</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-EEB9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 646
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 646
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.659465700Z" />
      <EventRecordID>7582</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-43FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 648
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 648
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.660071000Z" />
      <EventRecordID>7583</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 650
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetFirewallRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 650
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774062000Z" />
      <EventRecordID>7584</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [string]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${User},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {
          [object]$__cmdletization_value = ${IPsecRuleName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.Contains</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 26):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [string]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${User},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {
          [object]$__cmdletization_value = ${IPsecRuleName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.Contains

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774080200Z" />
      <EventRecordID>7585</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">Key('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Mode')) {
          [object]$__cmdletization_value = ${Mode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
          [object]$__cmdletization_value = ${InboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
          [object]$__cmdletization_value = ${OutboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
          [object]$__cmdletization_value = ${QuickModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
          [object]$__cmdletization_value = ${Phase2AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('KeyModule')) {
          [object]$__cmdletization_value = ${KeyModule}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
          [object]$__cmdletization_value = ${AllowWatchKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
          [object]$__cmdletization_value = ${AllowSetKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
          [object]$__cmdletization_value = ${LocalTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (2 of 26):
Key('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Mode')) {
          [object]$__cmdletization_value = ${Mode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
          [object]$__cmdletization_value = ${InboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
          [object]$__cmdletization_value = ${OutboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
          [object]$__cmdletization_value = ${QuickModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
          [object]$__cmdletization_value = ${Phase2AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('KeyModule')) {
          [object]$__cmdletization_value = ${KeyModule}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
          [object]$__cmdletization_value = ${AllowWatchKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
          [object]$__cmdletization_value = ${AllowSetKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
          [object]$__cmdletization_value = ${LocalTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774106800Z" />
      <EventRecordID>7586</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
          [object]$__cmdletization_value = ${RemoteTunnelHostname}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
          [object]$__cmdletization_value = ${ForwardPathLifetime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
          [object]$__cmdletization_value = ${EncryptedTunnelBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
          [object]$__cmdletization_value = ${RequireAuthorization}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('User')) {
          [object]$__cmdletization_value = ${User}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Machine')) {
          [object]$__cmdletization_value = ${Machine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
   </Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (3 of 26):

        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
          [object]$__cmdletization_value = ${RemoteTunnelHostname}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
          [object]$__cmdletization_value = ${ForwardPathLifetime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
          [object]$__cmdletization_value = ${EncryptedTunnelBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
          [object]$__cmdletization_value = ${RequireAuthorization}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('User')) {
          [object]$__cmdletization_value = ${User}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Machine')) {
          [object]$__cmdletization_value = ${Machine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
   

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774125400Z" />
      <EventRecordID>7587</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">         }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
        

function Show-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
        

function Find-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Find2')]
    [string]
    ${LocalAddress},

    [Parameter(ParameterSetName='Find2', Mandatory=$true)]
    [string]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Find2')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${LocalPort},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${RemotePort},

    [Parameter(ParameterSetName='Find2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Find2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Find2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Binding</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (4 of 26):
         }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
        

function Show-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
        

function Find-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Find2')]
    [string]
    ${LocalAddress},

    [Parameter(ParameterSetName='Find2', Mandatory=$true)]
    [string]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Find2')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${LocalPort},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${RemotePort},

    [Parameter(ParameterSetName='Find2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Find2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Find2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Binding

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774164500Z" />
      <EventRecordID>7588</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">s = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
        

function Get-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSet</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (5 of 26):
s = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
        

function Get-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSet

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774186400Z" />
      <EventRecordID>7589</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">Name='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName ))</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (6 of 26):
Name='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName ))

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774243800Z" />
      <EventRecordID>7590</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText"> {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
        

function Set-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${User},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup'</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (7 of 26):
 {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
        

function Set-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${User},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup'

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7036</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=651

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=651

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7037</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=653

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=653

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7038</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=655

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=655

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7039</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=657

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=657

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7040</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=659

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=659

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7041</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=661

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=661

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7042</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=663

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=663

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774269800Z" />
      <EventRecordID>7591</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">)]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Mode')) {
            [object]$__cmdletization_value = ${Mode}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
            [object]$__cmdletization_value = ${InboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
            [object]$__cmdletization_value = ${OutboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolic</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (8 of 26):
)]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Mode')) {
            [object]$__cmdletization_value = ${Mode}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
            [object]$__cmdletization_value = ${InboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
            [object]$__cmdletization_value = ${OutboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolic

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774319200Z" />
      <EventRecordID>7592</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">y'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
            [object]$__cmdletization_value = ${QuickModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
            [object]$__cmdletization_value = ${Phase2AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyModule')) {
            [object]$__cmdletization_value = ${KeyModule}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
            [object]$__cmdletization_value = ${AllowWatchKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
            [object]$__cmdletization_value = ${AllowSetKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
            [object]$__cmdletization_value = ${LocalTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
            [object]$__cmdletization_value = ${RemoteTunnelHostname}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
            [object]$__cmdletization_value = ${ForwardPathLifetime}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
            [object]$__cmdletization_value = ${EncryptedTunnelBypass}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
            [object]$__cmdletization_value = ${RequireAuthorization}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('User')) {
            [object]$__cmdletization_value = ${User}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Machine')) {
            [object]$__cmdletization_value = ${Machine}
  </Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (9 of 26):
y'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
            [object]$__cmdletization_value = ${QuickModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
            [object]$__cmdletization_value = ${Phase2AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyModule')) {
            [object]$__cmdletization_value = ${KeyModule}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
            [object]$__cmdletization_value = ${AllowWatchKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
            [object]$__cmdletization_value = ${AllowSetKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
            [object]$__cmdletization_value = ${LocalTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
            [object]$__cmdletization_value = ${RemoteTunnelHostname}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
            [object]$__cmdletization_value = ${ForwardPathLifetime}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
            [object]$__cmdletization_value = ${EncryptedTunnelBypass}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
            [object]$__cmdletization_value = ${RequireAuthorization}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('User')) {
            [object]$__cmdletization_value = ${User}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Machine')) {
            [object]$__cmdletization_value = ${Machine}
  

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774339700Z" />
      <EventRecordID>7593</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
        

function Remove-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$tr</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (10 of 26):
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
        

function Remove-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$tr

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774363400Z" />
      <EventRecordID>7594</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">11</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">ue)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmd</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (11 of 26):
ue)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmd

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774383500Z" />
      <EventRecordID>7595</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">12</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">letization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
        

function Rename-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (12 of 26):
letization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
        

function Rename-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774428700Z" />
      <EventRecordID>7596</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">13</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(Parameter</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (13 of 26):
]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(Parameter

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774449600Z" />
      <EventRecordID>7597</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">14</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">SetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
  </Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (14 of 26):
SetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
  

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774495800Z" />
      <EventRecordID>7598</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">15</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">  }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
        

function Copy-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirew</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (15 of 26):
  }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
        

function Copy-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirew

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774515800Z" />
      <EventRecordID>7599</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">16</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">allInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contai</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (16 of 26):
allInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contai

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774561000Z" />
      <EventRecordID>7600</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">17</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">ns $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, </Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (17 of 26):
ns $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, 

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774581500Z" />
      <EventRecordID>7601</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">18</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">$__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
        

function Enable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceType</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (18 of 26):
$__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
        

function Enable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceType

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774605800Z" />
      <EventRecordID>7602</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">19</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">Filter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet'</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (19 of 26):
Filter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet'

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774625300Z" />
      <EventRecordID>7603</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">20</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">) -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
        

function Disable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecP</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (20 of 26):
) -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
        

function Disable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecP

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774673800Z" />
      <EventRecordID>7604</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">21</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">hase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilde</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (21 of 26):
hase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilde

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774694300Z" />
      <EventRecordID>7605</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">22</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">r.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
        

function Sync-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${Asso</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (22 of 26):
r.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
        

function Sync-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${Asso

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774740000Z" />
      <EventRecordID>7606</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">23</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">ciatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Servers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Domains},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]
    ${AddressType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DnsServers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is </Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (23 of 26):
ciatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Servers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Domains},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]
    ${AddressType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DnsServers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is 

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774760900Z" />
      <EventRecordID>7607</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">24</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">[System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetA</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (24 of 26):
[System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetA

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7043</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=665

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=665

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7044</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=667

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=667

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7045</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=669

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=669

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7046</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=671

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=671

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7047</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=673

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=673

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7048</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=675

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=675

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774263300Z" />
      <EventRecordID>7049</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=677

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=677

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774808500Z" />
      <EventRecordID>7608</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">25</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">ll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Servers')) {
            [object]$__cmdletization_value = ${Servers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Domains')) {
            [object]$__cmdletization_value = ${Domains}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AddressType')) {
            [object]$__cmdletization_value = ${AddressType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DnsServers')) {
            [object]$__cmdletization_value = ${DnsServers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
        

function Update-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]
    ${Action},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv6Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv4Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyS</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (25 of 26):
ll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Servers')) {
            [object]$__cmdletization_value = ${Servers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Domains')) {
            [object]$__cmdletization_value = ${Domains}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AddressType')) {
            [object]$__cmdletization_value = ${AddressType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DnsServers')) {
            [object]$__cmdletization_value = ${DnsServers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
        

function Update-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]
    ${Action},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv6Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv4Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyS

ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.774824300Z" />
      <EventRecordID>7609</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-44FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">26</Data>
      <Data Name="MessageTotal">26</Data>
      <Data Name="ScriptBlockText">tore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {
            [object]$__cmdletization_value = ${IPv6Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {
            [object]$__cmdletization_value = ${IPv4Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PassThru')) {
            [object]$__cmdletization_value = ${PassThru}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">9c867db7-d37c-47b0-b8c3-e1b091c8e14f</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (26 of 26):
tore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {
            [object]$__cmdletization_value = ${IPv6Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {
            [object]$__cmdletization_value = ${IPv4Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PassThru')) {
            [object]$__cmdletization_value = ${PassThru}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
        


ScriptBlock ID: 9c867db7-d37c-47b0-b8c3-e1b091c8e14f
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.775311300Z" />
      <EventRecordID>7610</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-1BBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 652
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 652
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.775599300Z" />
      <EventRecordID>7611</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-1CBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 654
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 654
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.775898900Z" />
      <EventRecordID>7612</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-1DBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 656
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 656
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.776175200Z" />
      <EventRecordID>7613</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-1EBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 658
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Show-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 658
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.776453400Z" />
      <EventRecordID>7614</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-1FBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 660
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Find-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 660
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.776727000Z" />
      <EventRecordID>7615</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-20BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 662
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 662
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.777001400Z" />
      <EventRecordID>7616</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-21BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 664
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 664
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.785069200Z" />
      <EventRecordID>7617</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-72FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 666
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 666
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.785790100Z" />
      <EventRecordID>7618</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-73FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 668
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 668
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.786154900Z" />
      <EventRecordID>7619</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-74FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 670
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 670
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.786613000Z" />
      <EventRecordID>7620</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-30BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 672
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 672
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.787106500Z" />
      <EventRecordID>7621</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-31BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 674
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 674
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.787477400Z" />
      <EventRecordID>7622</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-32BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 676
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Sync-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 676
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.788169000Z" />
      <EventRecordID>7623</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 678
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Update-NetIPsecRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 678
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.852390000Z" />
      <EventRecordID>7050</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=679

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=679

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.852390000Z" />
      <EventRecordID>7051</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=681

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=681

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.852390000Z" />
      <EventRecordID>7052</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=683

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=683

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.852390000Z" />
      <EventRecordID>7053</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=685

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=685

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864015600Z" />
      <EventRecordID>7624</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
          [object]$__cmdletization_value = ${MainModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 11):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
          [object]$__cmdletization_value = ${MainModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864035100Z" />
      <EventRecordID>7625</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
        

function Get-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletizatio</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (2 of 11):
]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
        

function Get-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletizatio

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864058000Z" />
      <EventRecordID>7626</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">n_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
        

function Set-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParam</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (3 of 11):
n_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
        

function Set-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParam

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864077500Z" />
      <EventRecordID>7627</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">eter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
            [object]$__cmdletization_value = ${MainModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
        

function Remove-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(Para</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (4 of 11):
eter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
            [object]$__cmdletization_value = ${MainModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
        

function Remove-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(Para

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864098500Z" />
      <EventRecordID>7628</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">meterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
        

function Rename-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
  </Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (5 of 11):
meterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
        

function Rename-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
  

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864117600Z" />
      <EventRecordID>7629</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">  [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName ))</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (6 of 11):
  [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName ))

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864138100Z" />
      <EventRecordID>7630</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">7</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText"> {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
        

function Copy-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (7 of 11):
 {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
        

function Copy-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864155400Z" />
      <EventRecordID>7631</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">8</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
        

function Enable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${D</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (8 of 11):
(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
        

function Enable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${D

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864173100Z" />
      <EventRecordID>7632</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">9</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">isplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDi</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (9 of 11):
isplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDi

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864190300Z" />
      <EventRecordID>7633</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">10</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">splayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
        

function Disable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletiza</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (10 of 11):
splayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
        

function Disable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletiza

ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868015200Z" />
      <EventRecordID>7054</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=687

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=687

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868015200Z" />
      <EventRecordID>7055</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=689

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=689

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868015200Z" />
      <EventRecordID>7056</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=691

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=691

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868015200Z" />
      <EventRecordID>7057</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=693

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=693

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868015200Z" />
      <EventRecordID>7058</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=695

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=695

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868015200Z" />
      <EventRecordID>7059</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=697

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=697

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.914893700Z" />
      <EventRecordID>7060</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=699

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=699

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.864200600Z" />
      <EventRecordID>7634</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-33BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">11</Data>
      <Data Name="MessageTotal">11</Data>
      <Data Name="ScriptBlockText">tion_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">07800d4d-c39e-4953-82be-d578fde16528</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (11 of 11):
tion_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
        


ScriptBlock ID: 07800d4d-c39e-4953-82be-d578fde16528
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.865016000Z" />
      <EventRecordID>7635</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-E1FD-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 680
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 680
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.865655400Z" />
      <EventRecordID>7636</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-78BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 682
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 682
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.867785400Z" />
      <EventRecordID>7637</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-79BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 684
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 684
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.868482500Z" />
      <EventRecordID>7638</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-7ABA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 686
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 686
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.869513300Z" />
      <EventRecordID>7639</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-7BBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 688
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 688
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.870245900Z" />
      <EventRecordID>7640</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-7CBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 690
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 690
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.870712300Z" />
      <EventRecordID>7641</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-7DBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 692
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 692
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.871784600Z" />
      <EventRecordID>7642</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-7EBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 694
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 694
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.872269700Z" />
      <EventRecordID>7643</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-7FBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 696
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Enable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 696
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.873091200Z" />
      <EventRecordID>7644</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-80BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 698
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Disable-NetIPsecMainModeRule"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 698
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.914893700Z" />
      <EventRecordID>7061</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=701

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=701

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.914893700Z" />
      <EventRecordID>7062</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=703

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=703

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.914893700Z" />
      <EventRecordID>7063</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=705

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=705

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.926227500Z" />
      <EventRecordID>7645</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-80BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
        

function Set-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LocalIP')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('RemoteIP')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">88eaaf88-52fb-4f3e-bdd1-c1f4eeb0a237</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
        

function Set-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LocalIP')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('RemoteIP')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
        


ScriptBlock ID: 88eaaf88-52fb-4f3e-bdd1-c1f4eeb0a237
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.926661400Z" />
      <EventRecordID>7646</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1BFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 700
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 700
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.926945600Z" />
      <EventRecordID>7647</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1CFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 702
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 702
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.961763800Z" />
      <EventRecordID>7064</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=707

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=707

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.961763800Z" />
      <EventRecordID>7065</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=709

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=709

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.961763800Z" />
      <EventRecordID>7066</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=711

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=711

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.961763800Z" />
      <EventRecordID>7067</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=713

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=713

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.927418600Z" />
      <EventRecordID>7648</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1DFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 704
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 704
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.927948000Z" />
      <EventRecordID>7649</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-9CBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 706
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallAddressFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 706
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.973908900Z" />
      <EventRecordID>7650</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-9CBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Program},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Package},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Program})
        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Package})
        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
        

function Set-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">4898fef2-7566-49ea-b89b-6df5f374f63e</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Program},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Package},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Program})
        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Package})
        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
        

function Set-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
        


ScriptBlock ID: 4898fef2-7566-49ea-b89b-6df5f374f63e
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.974340900Z" />
      <EventRecordID>7651</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-BBBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 708
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 708
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.975048300Z" />
      <EventRecordID>7652</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-BCBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 710
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 710
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.975391700Z" />
      <EventRecordID>7653</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-58FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 712
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 712
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.975949100Z" />
      <EventRecordID>7654</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-59FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 714
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallApplicationFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 714
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.993015200Z" />
      <EventRecordID>7068</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=715

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=715

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.993015200Z" />
      <EventRecordID>7069</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=717

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=717

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.993015200Z" />
      <EventRecordID>7070</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=719

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=719

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:44.993015200Z" />
      <EventRecordID>7071</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=721

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=721

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.024268900Z" />
      <EventRecordID>7072</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=723

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=723

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.024268900Z" />
      <EventRecordID>7073</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=725

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=725

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.024268900Z" />
      <EventRecordID>7074</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=727

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=727

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.000336400Z" />
      <EventRecordID>7655</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-59FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
        

function Set-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">d807d87f-483d-4738-b834-c48526a5aa7d</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
        

function Set-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
        


ScriptBlock ID: d807d87f-483d-4738-b834-c48526a5aa7d
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.000702600Z" />
      <EventRecordID>7656</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-66FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 716
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 716
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.001582000Z" />
      <EventRecordID>7657</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-67FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 718
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 718
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.003817300Z" />
      <EventRecordID>7658</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 720
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 720
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.004282900Z" />
      <EventRecordID>7659</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-C9BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 722
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 722
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.024268900Z" />
      <EventRecordID>7075</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=729

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=729

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.026742300Z" />
      <EventRecordID>7660</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-C9BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceType})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
        

function Set-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">a56cd424-fcb4-4ff0-9284-07d2542e5f6c</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceType})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
        

function Set-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
        


ScriptBlock ID: a56cd424-fcb4-4ff0-9284-07d2542e5f6c
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.027130500Z" />
      <EventRecordID>7661</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E5BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 724
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 724
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.027515900Z" />
      <EventRecordID>7662</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E6BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 726
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 726
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.071140900Z" />
      <EventRecordID>7076</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=731

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=731

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.071140900Z" />
      <EventRecordID>7077</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=733

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=733

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.071140900Z" />
      <EventRecordID>7078</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=735

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=735

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.071140900Z" />
      <EventRecordID>7079</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=737

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=737

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.027841600Z" />
      <EventRecordID>7663</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-7DFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 728
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 728
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.028127700Z" />
      <EventRecordID>7664</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-7EFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 730
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallInterfaceTypeFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 730
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.075045900Z" />
      <EventRecordID>7666</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-7EFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">52e411d0-2bae-461e-87f9-e64e7f89fbaf</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (2 of 2):
_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
        


ScriptBlock ID: 52e411d0-2bae-461e-87f9-e64e7f89fbaf
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.076605100Z" />
      <EventRecordID>7667</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-E7BA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 732
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 732
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.076942500Z" />
      <EventRecordID>7668</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A5FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 734
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 734
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.077721600Z" />
      <EventRecordID>7669</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A6FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 736
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 736
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.078067800Z" />
      <EventRecordID>7670</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-EBBA-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 738
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSecurityFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 738
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.102389500Z" />
      <EventRecordID>7080</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=739

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=739

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.102389500Z" />
      <EventRecordID>7081</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=741

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=741

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.102389500Z" />
      <EventRecordID>7082</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=743

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=743

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.102389500Z" />
      <EventRecordID>7083</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=745

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=745

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.110452100Z" />
      <EventRecordID>7672</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A7FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 740
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 740
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.111721400Z" />
      <EventRecordID>7673</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A8FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 742
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 742
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.112045800Z" />
      <EventRecordID>7674</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A9FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 744
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 744
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.112325400Z" />
      <EventRecordID>7675</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-AAFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 746
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallPortFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 746
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.133639500Z" />
      <EventRecordID>7084</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=747

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=747

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.133639500Z" />
      <EventRecordID>7085</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=749

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=749

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.133639500Z" />
      <EventRecordID>7086</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=751

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=751

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.133639500Z" />
      <EventRecordID>7087</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=753

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=753

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.142151300Z" />
      <EventRecordID>7676</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-AAFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Service},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Service})
        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
        

function Set-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">9fcf9a30-73f9-4745-97ca-69590d08e312</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Service},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Service})
        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
        

function Set-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
        


ScriptBlock ID: 9fcf9a30-73f9-4745-97ca-69590d08e312
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.142537100Z" />
      <EventRecordID>7677</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D6FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 748
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 748
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.142855400Z" />
      <EventRecordID>7678</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D7FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 750
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 750
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.144703100Z" />
      <EventRecordID>7679</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D8FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 752
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 752
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.145622500Z" />
      <EventRecordID>7680</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-DCFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 754
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallServiceFilter"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 754
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.164891400Z" />
      <EventRecordID>7088</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=755

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=755

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.164891400Z" />
      <EventRecordID>7089</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=757

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=757

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.164891400Z" />
      <EventRecordID>7090</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=759

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=759

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.164891400Z" />
      <EventRecordID>7091</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=761

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=761

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.164891400Z" />
      <EventRecordID>7092</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=763

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=763

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.180517500Z" />
      <EventRecordID>7093</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=765

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=765

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.180517500Z" />
      <EventRecordID>7094</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=767

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=767

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.180517500Z" />
      <EventRecordID>7095</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=769

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=769

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.177705200Z" />
      <EventRecordID>7685</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-DCFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">ter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">69eda6a4-745e-4e2b-9399-e7be2e7d7042</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (5 of 5):
ter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
        


ScriptBlock ID: 69eda6a4-745e-4e2b-9399-e7be2e7d7042
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.178242100Z" />
      <EventRecordID>7686</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-EBFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 756
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 756
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.178586400Z" />
      <EventRecordID>7687</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-ECFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 758
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 758
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.178962500Z" />
      <EventRecordID>7688</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-EDFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 760
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 760
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.179316600Z" />
      <EventRecordID>7689</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-EEFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 762
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 762
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.183734200Z" />
      <EventRecordID>7690</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-EFFE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 764
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 764
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.185051100Z" />
      <EventRecordID>7691</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-06BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 766
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 766
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.185586100Z" />
      <EventRecordID>7692</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-07BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 768
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 768
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.186061800Z" />
      <EventRecordID>7693</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-F0FE-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 770
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase1AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 770
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.211765700Z" />
      <EventRecordID>7096</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=771

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=771

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.211765700Z" />
      <EventRecordID>7097</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=773

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=773

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.211765700Z" />
      <EventRecordID>7098</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=775

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=775

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.227393700Z" />
      <EventRecordID>7099</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=777

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=777

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.227393700Z" />
      <EventRecordID>7100</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=779

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=779

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.227393700Z" />
      <EventRecordID>7101</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=781

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=781

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.227393700Z" />
      <EventRecordID>7102</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=783

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=783

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.227393700Z" />
      <EventRecordID>7103</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=785

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=785

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.226232000Z" />
      <EventRecordID>7698</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-17FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 772
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 772
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.226559100Z" />
      <EventRecordID>7699</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-18FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 774
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 774
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.227775300Z" />
      <EventRecordID>7700</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-19FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 776
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 776
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.228310700Z" />
      <EventRecordID>7701</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1AFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 778
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 778
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.228640600Z" />
      <EventRecordID>7702</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1BFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 780
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 780
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.229329900Z" />
      <EventRecordID>7703</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1CFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 782
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 782
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.229916100Z" />
      <EventRecordID>7704</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1DFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 784
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 784
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.233713900Z" />
      <EventRecordID>7705</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1EFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 786
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecPhase2AuthSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 786
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7104</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=787

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=787

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7105</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=789

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=789

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7106</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=791

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=791

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7107</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=793

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=793

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7108</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=795

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=795

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7109</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=797

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=797

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.276670200Z" />
      <EventRecordID>7710</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1EFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">yDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">eeb81344-4b5c-4590-8bc3-55cc806d0d37</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (5 of 5):
yDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
        


ScriptBlock ID: eeb81344-4b5c-4590-8bc3-55cc806d0d37
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.277155700Z" />
      <EventRecordID>7711</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-4AFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 788
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 788
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.277479100Z" />
      <EventRecordID>7712</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-4BFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 790
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 790
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7110</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=799

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=799

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.274265700Z" />
      <EventRecordID>7111</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=801

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=801

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7112</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=803

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=803

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7113</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=805

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=805

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7114</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=807

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=807

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7115</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=809

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=809

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.280720100Z" />
      <EventRecordID>7713</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-4CFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 792
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 792
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.281122700Z" />
      <EventRecordID>7714</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-3EBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 794
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 794
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.282067800Z" />
      <EventRecordID>7715</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-3FBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 796
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 796
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.285643400Z" />
      <EventRecordID>7716</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-5FFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 798
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 798
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.286086000Z" />
      <EventRecordID>7717</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-44BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 800
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 800
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.286704900Z" />
      <EventRecordID>7718</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 802
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecMainModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 802
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7116</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=811

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=811

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7117</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=813

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=813

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7118</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=815

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=815

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.321141800Z" />
      <EventRecordID>7119</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=817

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=817

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.329450000Z" />
      <EventRecordID>7719</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Get-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
</Data>
      <Data Name="ScriptBlockId">5b93897d-f881-4679-ac59-2e7f8f019274</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 6):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Get-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]


ScriptBlock ID: 5b93897d-f881-4679-ac59-2e7f8f019274
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.329518900Z" />
      <EventRecordID>7720</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Set-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(Paramet</Data>
      <Data Name="ScriptBlockId">5b93897d-f881-4679-ac59-2e7f8f019274</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (2 of 6):

    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Set-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(Paramet

ScriptBlock ID: 5b93897d-f881-4679-ac59-2e7f8f019274
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.329560900Z" />
      <EventRecordID>7721</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">erSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Remove-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [Syst</Data>
      <Data Name="ScriptBlockId">5b93897d-f881-4679-ac59-2e7f8f019274</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (3 of 6):
erSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Remove-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [Syst

ScriptBlock ID: 5b93897d-f881-4679-ac59-2e7f8f019274
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.329603700Z" />
      <EventRecordID>7722</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">em.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Rename-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdleti</Data>
      <Data Name="ScriptBlockId">5b93897d-f881-4679-ac59-2e7f8f019274</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (4 of 6):
em.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Rename-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdleti

ScriptBlock ID: 5b93897d-f881-4679-ac59-2e7f8f019274
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.329644700Z" />
      <EventRecordID>7723</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">zation_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Copy-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
          </Data>
      <Data Name="ScriptBlockId">5b93897d-f881-4679-ac59-2e7f8f019274</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (5 of 6):
zation_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Copy-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
          

ScriptBlock ID: 5b93897d-f881-4679-ac59-2e7f8f019274
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.329749600Z" />
      <EventRecordID>7724</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-68FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">6</Data>
      <Data Name="MessageTotal">6</Data>
      <Data Name="ScriptBlockText">  throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">5b93897d-f881-4679-ac59-2e7f8f019274</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (6 of 6):
  throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
        


ScriptBlock ID: 5b93897d-f881-4679-ac59-2e7f8f019274
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.330263600Z" />
      <EventRecordID>7725</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-51BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 804
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 804
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.330616300Z" />
      <EventRecordID>7726</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-52BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 806
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 806
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.331002200Z" />
      <EventRecordID>7727</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-53BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 808
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 808
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.331374500Z" />
      <EventRecordID>7728</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-54BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 810
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 810
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.331795300Z" />
      <EventRecordID>7729</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-55BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 812
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 812
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.332278100Z" />
      <EventRecordID>7730</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-56BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 814
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 814
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.332787900Z" />
      <EventRecordID>7731</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A1FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 816
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Rename-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 816
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.333868500Z" />
      <EventRecordID>7732</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-A2FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 818
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Copy-NetIPsecQuickModeCryptoSet"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 818
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.368014300Z" />
      <EventRecordID>7120</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=819

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=819

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.383641800Z" />
      <EventRecordID>7121</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=821

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=821

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.383641800Z" />
      <EventRecordID>7122</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=823

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=823

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.383641800Z" />
      <EventRecordID>7123</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=825

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=825

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.414897900Z" />
      <EventRecordID>7124</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=827

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=827

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.414897900Z" />
      <EventRecordID>7125</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=829

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=829

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.381274100Z" />
      <EventRecordID>7735</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-BBFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 820
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 820
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.386428400Z" />
      <EventRecordID>7736</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-BCFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 822
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 822
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.386811400Z" />
      <EventRecordID>7737</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-C3FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 824
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 824
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.387183800Z" />
      <EventRecordID>7738</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-C4FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 826
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallProfile"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 826
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.418316800Z" />
      <EventRecordID>7739</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-C4FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                
</Data>
      <Data Name="ScriptBlockId">3d772904-3a8a-45af-b021-f28ad3c08957</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                


ScriptBlock ID: 3d772904-3a8a-45af-b021-f28ad3c08957
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.419115100Z" />
      <EventRecordID>7740</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D4FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 828
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 828
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.419520000Z" />
      <EventRecordID>7741</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 830
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 830
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.430522700Z" />
      <EventRecordID>7126</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=831

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=831

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.430522700Z" />
      <EventRecordID>7127</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=833

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=833

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.444570500Z" />
      <EventRecordID>7742</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdl</Data>
      <Data Name="ScriptBlockId">dd6e1d7d-6eea-44a8-9e26-a7549c6cc689</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 5):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdl

ScriptBlock ID: dd6e1d7d-6eea-44a8-9e26-a7549c6cc689
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.444601300Z" />
      <EventRecordID>7743</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">etization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
          [object]$__cmdletization_value = ${IcmpV6Dscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
          [object]$__cmdletization_value = ${DefBlockExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
          [object]$__cmdletization_value = ${MaxStateEntries}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
          [object]$__cmdletization_value = ${EnabledKeyingModules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
          [object]$__cmdletization_value = ${FilteringFlags}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
          [object]$__cmdletization_value = ${PublicInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
          [object]$__cmdletization_value = ${PrivateInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
          [object]$__cmdletization_value = ${PublicV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
          [object]$__cmdletization_value = ${PrivateV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_</Data>
      <Data Name="ScriptBlockId">dd6e1d7d-6eea-44a8-9e26-a7549c6cc689</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (2 of 5):
etization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
          [object]$__cmdletization_value = ${IcmpV6Dscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
          [object]$__cmdletization_value = ${DefBlockExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
          [object]$__cmdletization_value = ${MaxStateEntries}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
          [object]$__cmdletization_value = ${EnabledKeyingModules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
          [object]$__cmdletization_value = ${FilteringFlags}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
          [object]$__cmdletization_value = ${PublicInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
          [object]$__cmdletization_value = ${PrivateInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
          [object]$__cmdletization_value = ${PublicV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
          [object]$__cmdletization_value = ${PrivateV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_

ScriptBlock ID: dd6e1d7d-6eea-44a8-9e26-a7549c6cc689
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.444646500Z" />
      <EventRecordID>7744</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">3</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
        

function Get-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
        

function Set-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterT</Data>
      <Data Name="ScriptBlockId">dd6e1d7d-6eea-44a8-9e26-a7549c6cc689</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (3 of 5):
objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
        

function Get-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
        

function Set-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterT

ScriptBlock ID: dd6e1d7d-6eea-44a8-9e26-a7549c6cc689
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.444680900Z" />
      <EventRecordID>7745</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">4</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">ype = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
            [object]$__cmdletization_value = ${IcmpV6Dscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
            [object]$__cmdletization_value = ${DefBlockExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
            [object]$__cmdletization_value = ${MaxStateEntries}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
            [object]$__cmdletization_value = ${EnabledKeyingModules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
            [object]$__cmdletization_value = ${FilteringFlags}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_valu</Data>
      <Data Name="ScriptBlockId">dd6e1d7d-6eea-44a8-9e26-a7549c6cc689</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (4 of 5):
ype = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
            [object]$__cmdletization_value = ${IcmpV6Dscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
            [object]$__cmdletization_value = ${DefBlockExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
            [object]$__cmdletization_value = ${MaxStateEntries}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
            [object]$__cmdletization_value = ${EnabledKeyingModules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
            [object]$__cmdletization_value = ${FilteringFlags}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_valu

ScriptBlock ID: dd6e1d7d-6eea-44a8-9e26-a7549c6cc689
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.446143200Z" />
      <EventRecordID>7128</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=835

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=835

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.444742900Z" />
      <EventRecordID>7746</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-D5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">5</Data>
      <Data Name="MessageTotal">5</Data>
      <Data Name="ScriptBlockText">e; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
            [object]$__cmdletization_value = ${PublicInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
            [object]$__cmdletization_value = ${PrivateInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
            [object]$__cmdletization_value = ${PublicV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
            [object]$__cmdletization_value = ${PrivateV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
        

function Remove-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">dd6e1d7d-6eea-44a8-9e26-a7549c6cc689</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (5 of 5):
e; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
            [object]$__cmdletization_value = ${PublicInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
            [object]$__cmdletization_value = ${PrivateInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
            [object]$__cmdletization_value = ${PublicV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
            [object]$__cmdletization_value = ${PrivateV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
        

function Remove-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
        


ScriptBlock ID: dd6e1d7d-6eea-44a8-9e26-a7549c6cc689
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.445247100Z" />
      <EventRecordID>7747</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-98BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 832
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 832
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.446143200Z" />
      <EventRecordID>7129</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=837

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=837

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.446143200Z" />
      <EventRecordID>7130</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=839

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=839

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.446143200Z" />
      <EventRecordID>7131</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=841

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=841

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.449572400Z" />
      <EventRecordID>7748</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-99BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 834
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 834
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.450383200Z" />
      <EventRecordID>7749</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-9DBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 836
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="New-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 836
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.450956900Z" />
      <EventRecordID>7750</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-9EBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 838
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 838
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.451763500Z" />
      <EventRecordID>7751</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-E5FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 840
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 840
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.452307300Z" />
      <EventRecordID>7752</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-E6FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 842
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecDospSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 842
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.461767100Z" />
      <EventRecordID>7132</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=843

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=843

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.461767100Z" />
      <EventRecordID>7133</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=845

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=845

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.461767100Z" />
      <EventRecordID>7134</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=847

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=847

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.461767100Z" />
      <EventRecordID>7135</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=849

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=849

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.462721900Z" />
      <EventRecordID>7753</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-E6FF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                
</Data>
      <Data Name="ScriptBlockId">721f7023-42e1-41e9-8208-30a085931e51</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                


ScriptBlock ID: 721f7023-42e1-41e9-8208-30a085931e51
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.463193000Z" />
      <EventRecordID>7754</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-AABB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 844
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 844
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.463563500Z" />
      <EventRecordID>7755</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-ABBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 846
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 846
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.476109400Z" />
      <EventRecordID>7756</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-ABBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
        

function Remove-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">08af89d5-c092-4cd9-9a57-d8e11ab30ecb</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
        

function Remove-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
        


ScriptBlock ID: 08af89d5-c092-4cd9-9a57-d8e11ab30ecb
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.476791200Z" />
      <EventRecordID>7757</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-B7BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 848
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 848
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.477392300Z" />
      <EventRecordID>7136</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=851

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=851

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.477392300Z" />
      <EventRecordID>7137</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=853

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=853

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.493016100Z" />
      <EventRecordID>7138</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=855

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=855

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.493016100Z" />
      <EventRecordID>7139</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=857

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=857

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.493016100Z" />
      <EventRecordID>7140</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=859

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=859

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.493016100Z" />
      <EventRecordID>7141</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=861

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=861

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.477223600Z" />
      <EventRecordID>7758</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-B8BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 850
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 850
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.477606600Z" />
      <EventRecordID>7759</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-B9BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 852
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 852
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.480191000Z" />
      <EventRecordID>7760</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-BABB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 854
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecMainModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 854
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.499719400Z" />
      <EventRecordID>7761</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-BABB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
        

function Remove-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">bc0cf37a-581b-4695-a98d-86ebf3c417a4</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
        

function Remove-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
        


ScriptBlock ID: bc0cf37a-581b-4695-a98d-86ebf3c417a4
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.500319100Z" />
      <EventRecordID>7762</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-FFFF-5F42ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 856
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 856
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.500748300Z" />
      <EventRecordID>7763</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-F9BB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 858
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 858
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.501085200Z" />
      <EventRecordID>7764</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FABB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 860
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 860
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.501437000Z" />
      <EventRecordID>7765</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FBBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 862
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Remove-NetIPsecQuickModeSA"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 862
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.524268900Z" />
      <EventRecordID>7142</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=863

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=863

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.524268900Z" />
      <EventRecordID>7143</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=865

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=865

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.524268900Z" />
      <EventRecordID>7144</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=867

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=867

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.524268900Z" />
      <EventRecordID>7145</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=869

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=869

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.531000600Z" />
      <EventRecordID>7766</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FBBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
        

function Set-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]
    ${Exemptions},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulFtp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulPptp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${RequireFullAuthSupport},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]
    ${CertValidationLevel},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]
    ${AllowIPsecThroughNAT},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSAIdleTimeSeconds},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]
    ${KeyEncoding},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]
    ${EnablePacketQueuing},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Exemptions')) {
            [object]$__cmdletization_value = ${Exemptions}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {
            [object]$__cmdletization_value = ${EnableStatefulFtp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {
            [object]$__cmdletization_value = ${EnableStatefulPptp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$_</Data>
      <Data Name="ScriptBlockId">a95d3770-1255-423d-a432-8b6ee6d07f4e</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 2):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
        

function Set-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]
    ${Exemptions},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulFtp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulPptp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${RequireFullAuthSupport},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]
    ${CertValidationLevel},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]
    ${AllowIPsecThroughNAT},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSAIdleTimeSeconds},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]
    ${KeyEncoding},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]
    ${EnablePacketQueuing},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Exemptions')) {
            [object]$__cmdletization_value = ${Exemptions}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {
            [object]$__cmdletization_value = ${EnableStatefulFtp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {
            [object]$__cmdletization_value = ${EnableStatefulPptp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$_

ScriptBlock ID: a95d3770-1255-423d-a432-8b6ee6d07f4e
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.531028600Z" />
      <EventRecordID>7767</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-FBBB-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">2</Data>
      <Data Name="MessageTotal">2</Data>
      <Data Name="ScriptBlockText">_cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {
            [object]$__cmdletization_value = ${RequireFullAuthSupport}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {
            [object]$__cmdletization_value = ${CertValidationLevel}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {
            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {
            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {
            [object]$__cmdletization_value = ${KeyEncoding}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {
            [object]$__cmdletization_value = ${EnablePacketQueuing}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">a95d3770-1255-423d-a432-8b6ee6d07f4e</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (2 of 2):
_cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {
            [object]$__cmdletization_value = ${RequireFullAuthSupport}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {
            [object]$__cmdletization_value = ${CertValidationLevel}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {
            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {
            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {
            [object]$__cmdletization_value = ${KeyEncoding}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {
            [object]$__cmdletization_value = ${EnablePacketQueuing}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
        


ScriptBlock ID: a95d3770-1255-423d-a432-8b6ee6d07f4e
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.531474000Z" />
      <EventRecordID>7768</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-0F00-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 864
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 864
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.533232200Z" />
      <EventRecordID>7769</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-1000-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 866
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 866
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.535284900Z" />
      <EventRecordID>7770</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-07BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 868
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Get-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 868
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.535849300Z" />
      <EventRecordID>7771</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0BBC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 870
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Set-NetFirewallSetting"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 870
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.555516600Z" />
      <EventRecordID>7146</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=871

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=871

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.555516600Z" />
      <EventRecordID>7147</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=873

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=873

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.555516600Z" />
      <EventRecordID>7148</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=875

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=875

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.555516600Z" />
      <EventRecordID>7149</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=877

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
</Data>
      <Data>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=877

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=82
	ScriptName=
	CommandLine=Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
 

Details: 
CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>3</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.555299400Z" />
      <EventRecordID>7772</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-0BBC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Open-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([System.String])]
    param(
    
    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Open0')]
    [string]
    ${DomainController},

    [Parameter(ParameterSetName='Open0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Open0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Open0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DomainController')) {
          [object]$__cmdletization_value = ${DomainController}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
        

function Save-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='Save1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Save1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Save1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
        
</Data>
      <Data Name="ScriptBlockId">098663f3-4944-412f-ac45-ff78b04a3d71</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Open-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([System.String])]
    param(
    
    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Open0')]
    [string]
    ${DomainController},

    [Parameter(ParameterSetName='Open0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Open0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Open0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DomainController')) {
          [object]$__cmdletization_value = ${DomainController}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
        

function Save-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='Save1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Save1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Save1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
        


ScriptBlock ID: 098663f3-4944-412f-ac45-ff78b04a3d71
Path: </Message>
      <Level>Warning</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.555759300Z" />
      <EventRecordID>7773</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-15BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 872
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 872
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.556191300Z" />
      <EventRecordID>7774</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-16BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 874
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value=""


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 874
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.556601800Z" />
      <EventRecordID>7775</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-17BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 876
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Open-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 876
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.557402400Z" />
      <EventRecordID>7776</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-18BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 878
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Export-ModuleMember): "Export-ModuleMember"
ParameterBinding(Export-ModuleMember): name="Function"; value="Save-NetGPO"
ParameterBinding(Export-ModuleMember): name="Alias"; value="*"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 82
        Command Name = Export-ModuleMember
        Command Type = Cmdlet
        Script Name = 
        Command Path = 
        Sequence Number = 878
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.457482700Z" />
      <EventRecordID>7150</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=879

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=81
	ScriptName=
	CommandLine=New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22</Data>
      <Data>CommandInvocation(New-NetFirewallRule): "New-NetFirewallRule"
ParameterBinding(New-NetFirewallRule): name="Name"; value="sshd"
ParameterBinding(New-NetFirewallRule): name="DisplayName"; value="OpenSSH Server (sshd)"
ParameterBinding(New-NetFirewallRule): name="Enabled"; value="True"
ParameterBinding(New-NetFirewallRule): name="Direction"; value="Inbound"
ParameterBinding(New-NetFirewallRule): name="Protocol"; value="TCP"
ParameterBinding(New-NetFirewallRule): name="Action"; value="Allow"
ParameterBinding(New-NetFirewallRule): name="LocalPort"; value="22"
ParameterBinding(New-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(New-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(New-NetFirewallRule): name="Description"; value=""
ParameterBinding(New-NetFirewallRule): name="Group"; value=""
ParameterBinding(New-NetFirewallRule): name="LooseSourceMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="LocalOnlyMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="Owner"; value=""
ParameterBinding(New-NetFirewallRule): name="Program"; value=""
ParameterBinding(New-NetFirewallRule): name="Package"; value=""
ParameterBinding(New-NetFirewallRule): name="Service"; value=""
ParameterBinding(New-NetFirewallRule): name="LocalUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteMachine"; value=""
ParameterBinding(New-NetFirewallRule): name="OverrideBlockRules"; value="False"
ParameterBinding(New-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(New-NetFirewallRule): name="AsJob"; value="False"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=879

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=81
	ScriptName=
	CommandLine=New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 

Details: 
CommandInvocation(New-NetFirewallRule): "New-NetFirewallRule"
ParameterBinding(New-NetFirewallRule): name="Name"; value="sshd"
ParameterBinding(New-NetFirewallRule): name="DisplayName"; value="OpenSSH Server (sshd)"
ParameterBinding(New-NetFirewallRule): name="Enabled"; value="True"
ParameterBinding(New-NetFirewallRule): name="Direction"; value="Inbound"
ParameterBinding(New-NetFirewallRule): name="Protocol"; value="TCP"
ParameterBinding(New-NetFirewallRule): name="Action"; value="Allow"
ParameterBinding(New-NetFirewallRule): name="LocalPort"; value="22"
ParameterBinding(New-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(New-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(New-NetFirewallRule): name="Description"; value=""
ParameterBinding(New-NetFirewallRule): name="Group"; value=""
ParameterBinding(New-NetFirewallRule): name="LooseSourceMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="LocalOnlyMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="Owner"; value=""
ParameterBinding(New-NetFirewallRule): name="Program"; value=""
ParameterBinding(New-NetFirewallRule): name="Package"; value=""
ParameterBinding(New-NetFirewallRule): name="Service"; value=""
ParameterBinding(New-NetFirewallRule): name="LocalUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteMachine"; value=""
ParameterBinding(New-NetFirewallRule): name="OverrideBlockRules"; value="False"
ParameterBinding(New-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(New-NetFirewallRule): name="AsJob"; value="False"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.457482700Z" />
      <EventRecordID>7151</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>
      </Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=881

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=81
	ScriptName=
	CommandLine=</Data>
      <Data>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?sshd", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line: . 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=881

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=81
	ScriptName=
	CommandLine= 

Details: 
CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?sshd", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="PowerShell" />
      <EventID Qualifiers="0">800</EventID>
      <Level>4</Level>
      <Task>8</Task>
      <Keywords>0x80000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.473115400Z" />
      <EventRecordID>7152</EventRecordID>
      <Channel>Windows PowerShell</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data>    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>	DetailSequence=1
	DetailTotal=1

	SequenceNumber=883

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=84
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
</Data>
      <Data>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Pipeline execution details for command line:     Microsoft.PowerShell.Core\Set-StrictMode -Off
. 

Context Information: 
	DetailSequence=1
	DetailTotal=1

	SequenceNumber=883

	UserId=OFFSEC\admmig
	HostName=ConsoleHost
	HostVersion=5.1.14393.3383
	HostId=d72f218b-82c7-499c-97cb-c80e944516ab
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.14393.3383
	RunspaceId=4ecdbb14-73d6-41a0-8b4a-662d7fa34856
	PipelineId=84
	ScriptName=C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
	CommandLine=    Microsoft.PowerShell.Core\Set-StrictMode -Off
 

Details: 
CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Message>
      <Level>Information</Level>
      <Task>Pipeline Execution Details</Task>
      <Opcode>Info</Opcode>
      <Channel>
      </Channel>
      <Provider>
      </Provider>
      <Keywords>
        <Keyword>Classic</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:45.683367000Z" />
      <EventRecordID>7777</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-32BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}</Data>
      <Data Name="ScriptBlockId">4a0845d0-c609-459b-bd06-58ffb61c9519</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}

ScriptBlock ID: 4a0845d0-c609-459b-bd06-58ffb61c9519
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-Windows Firewall With Advanced Security" Guid="{D1BC9AFF-2ABF-4D71-9146-ECB2A986EB85}" />
      <EventID>2004</EventID>
      <Version>0</Version>
      <Level>4</Level>
      <Task>0</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000020000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.214159900Z" />
      <EventRecordID>434</EventRecordID>
      <Correlation />
      <Execution ProcessID="1076" ThreadID="6804" />
      <Channel>Microsoft-Windows-Windows Firewall With Advanced Security/Firewall</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-19" />
    </System>
    <EventData>
      <Data Name="RuleId">sshd</Data>
      <Data Name="RuleName">OpenSSH Server (sshd)</Data>
      <Data Name="Origin">1</Data>
      <Data Name="ApplicationPath">
      </Data>
      <Data Name="ServiceName">
      </Data>
      <Data Name="Direction">1</Data>
      <Data Name="Protocol">6</Data>
      <Data Name="LocalPorts">22</Data>
      <Data Name="RemotePorts">*</Data>
      <Data Name="Action">3</Data>
      <Data Name="Profiles">2147483647</Data>
      <Data Name="LocalAddresses">*</Data>
      <Data Name="RemoteAddresses">*</Data>
      <Data Name="RemoteMachineAuthorizationList">
      </Data>
      <Data Name="RemoteUserAuthorizationList">
      </Data>
      <Data Name="EmbeddedContext">
      </Data>
      <Data Name="Flags">1</Data>
      <Data Name="Active">1</Data>
      <Data Name="EdgeTraversal">0</Data>
      <Data Name="LooseSourceMapped">0</Data>
      <Data Name="SecurityOptions">0</Data>
      <Data Name="ModifyingUser">S-1-5-21-4230534742-2542757381-3142984815-1111</Data>
      <Data Name="ModifyingApplication">C:\Windows\System32\wbem\WmiPrvSE.exe</Data>
      <Data Name="SchemaVersion">538</Data>
      <Data Name="RuleStatus">65536</Data>
      <Data Name="LocalOnlyMapped">0</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>A rule has been added to the Windows Firewall exception list.

Added Rule:
	Rule ID:	sshd
	Rule Name:	OpenSSH Server (sshd)
	Origin:	Local
	Active:	Yes
	Direction:	Inbound
	Profiles:	Private,Domain, Public
	Action:	Allow
	Application Path:	
	Service Name:	
	Protocol:	TCP
	Security Options:	None
	Edge Traversal:	None
	Modifying User:	S-1-5-21-4230534742-2542757381-3142984815-1111
	Modifying Application:	C:\Windows\System32\wbem\WmiPrvSE.exe</Message>
      <Level>Information</Level>
      <Task>
      </Task>
      <Opcode>Info</Opcode>
      <Channel>Microsoft-Windows-Windows Firewall With Advanced Security/Firewall</Channel>
      <Provider>Microsoft-Windows-Windows Firewall With Advanced Security</Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.469185600Z" />
      <EventRecordID>7778</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-5A00-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 81
        Command Name = New-NetFirewallRule
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 880
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(New-NetFirewallRule): "New-NetFirewallRule"
ParameterBinding(New-NetFirewallRule): name="Name"; value="sshd"
ParameterBinding(New-NetFirewallRule): name="DisplayName"; value="OpenSSH Server (sshd)"
ParameterBinding(New-NetFirewallRule): name="Enabled"; value="True"
ParameterBinding(New-NetFirewallRule): name="Direction"; value="Inbound"
ParameterBinding(New-NetFirewallRule): name="Protocol"; value="TCP"
ParameterBinding(New-NetFirewallRule): name="Action"; value="Allow"
ParameterBinding(New-NetFirewallRule): name="LocalPort"; value="22"
ParameterBinding(New-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(New-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(New-NetFirewallRule): name="Description"; value=""
ParameterBinding(New-NetFirewallRule): name="Group"; value=""
ParameterBinding(New-NetFirewallRule): name="LooseSourceMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="LocalOnlyMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="Owner"; value=""
ParameterBinding(New-NetFirewallRule): name="Program"; value=""
ParameterBinding(New-NetFirewallRule): name="Package"; value=""
ParameterBinding(New-NetFirewallRule): name="Service"; value=""
ParameterBinding(New-NetFirewallRule): name="LocalUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteMachine"; value=""
ParameterBinding(New-NetFirewallRule): name="OverrideBlockRules"; value="False"
ParameterBinding(New-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(New-NetFirewallRule): name="AsJob"; value="False"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(New-NetFirewallRule): "New-NetFirewallRule"
ParameterBinding(New-NetFirewallRule): name="Name"; value="sshd"
ParameterBinding(New-NetFirewallRule): name="DisplayName"; value="OpenSSH Server (sshd)"
ParameterBinding(New-NetFirewallRule): name="Enabled"; value="True"
ParameterBinding(New-NetFirewallRule): name="Direction"; value="Inbound"
ParameterBinding(New-NetFirewallRule): name="Protocol"; value="TCP"
ParameterBinding(New-NetFirewallRule): name="Action"; value="Allow"
ParameterBinding(New-NetFirewallRule): name="LocalPort"; value="22"
ParameterBinding(New-NetFirewallRule): name="PolicyStore"; value=""
ParameterBinding(New-NetFirewallRule): name="GPOSession"; value=""
ParameterBinding(New-NetFirewallRule): name="Description"; value=""
ParameterBinding(New-NetFirewallRule): name="Group"; value=""
ParameterBinding(New-NetFirewallRule): name="LooseSourceMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="LocalOnlyMapping"; value="False"
ParameterBinding(New-NetFirewallRule): name="Owner"; value=""
ParameterBinding(New-NetFirewallRule): name="Program"; value=""
ParameterBinding(New-NetFirewallRule): name="Package"; value=""
ParameterBinding(New-NetFirewallRule): name="Service"; value=""
ParameterBinding(New-NetFirewallRule): name="LocalUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteUser"; value=""
ParameterBinding(New-NetFirewallRule): name="RemoteMachine"; value=""
ParameterBinding(New-NetFirewallRule): name="OverrideBlockRules"; value="False"
ParameterBinding(New-NetFirewallRule): name="ThrottleLimit"; value="0"
ParameterBinding(New-NetFirewallRule): name="AsJob"; value="False"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 81
        Command Name = New-NetFirewallRule
        Command Type = Function
        Script Name = 
        Command Path = 
        Sequence Number = 880
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.471125100Z" />
      <EventRecordID>7779</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-D9B9-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 81
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 882
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?sshd", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Out-Default): "Out-Default"
ParameterBinding(Out-Default): name="InputObject"; value="MSFT_NetFirewallRule (CreationClassName = "MSFT?FW?FirewallRule?sshd", PolicyRuleName = "", SystemCreationClassName = "", SystemName = "")"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 81
        Command Name = 
        Command Type = Script
        Script Name = 
        Command Path = 
        Sequence Number = 882
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4104</EventID>
      <Version>1</Version>
      <Level>5</Level>
      <Task>2</Task>
      <Opcode>15</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.472880900Z" />
      <EventRecordID>7780</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0001-37BC-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="MessageNumber">1</Data>
      <Data Name="MessageTotal">1</Data>
      <Data Name="ScriptBlockText">prompt</Data>
      <Data Name="ScriptBlockId">1fcc3275-9c1a-4325-9bdf-20062daccc8a</Data>
      <Data Name="Path">
      </Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>Creating Scriptblock text (1 of 1):
prompt

ScriptBlock ID: 1fcc3275-9c1a-4325-9bdf-20062daccc8a
Path: </Message>
      <Level>Verbose</Level>
      <Task>Execute a Remote Command</Task>
      <Opcode>On create calls</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-PowerShell" Guid="{A0C1853B-5C40-4B15-8766-3CF1C58F985A}" />
      <EventID>4103</EventID>
      <Version>1</Version>
      <Level>4</Level>
      <Task>106</Task>
      <Opcode>20</Opcode>
      <Keywords>0x0</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:09:46.475258900Z" />
      <EventRecordID>7781</EventRecordID>
      <Correlation ActivityID="{42422748-35ED-0000-5E00-6042ED35D701}" />
      <Execution ProcessID="4040" ThreadID="5280" />
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security UserID="S-1-5-21-4230534742-2542757381-3142984815-1111" />
    </System>
    <EventData>
      <Data Name="ContextInfo">        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 84
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 884
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell
</Data>
      <Data Name="UserData">
      </Data>
      <Data Name="Payload">CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"
</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>CommandInvocation(Set-StrictMode): "Set-StrictMode"
ParameterBinding(Set-StrictMode): name="Off"; value="True"


Context:
        Severity = Informational
        Host Name = ConsoleHost
        Host Version = 5.1.14393.3383
        Host ID = d72f218b-82c7-499c-97cb-c80e944516ab
        Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        Engine Version = 5.1.14393.3383
        Runspace ID = 4ecdbb14-73d6-41a0-8b4a-662d7fa34856
        Pipeline ID = 84
        Command Name = Set-StrictMode
        Command Type = Cmdlet
        Script Name = C:\Program Files\WindowsPowerShell\Modules\PSReadline\1.2\PSReadLine.psm1
        Command Path = 
        Sequence Number = 884
        User = OFFSEC\admmig
        Connected User = 
        Shell ID = Microsoft.PowerShell


User Data:

</Message>
      <Level>Information</Level>
      <Task>Executing Pipeline</Task>
      <Opcode>To be used when operation is just executing a method</Opcode>
      <Channel>Microsoft-Windows-PowerShell/Operational</Channel>
      <Provider>
      </Provider>
      <Keywords>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-Security-Auditing" Guid="{54849625-5478-4994-A5BA-3E3B0328C30D}" />
      <EventID>4688</EventID>
      <Version>2</Version>
      <Level>0</Level>
      <Task>13312</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8020000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:10:03.015332100Z" />
      <EventRecordID>396950</EventRecordID>
      <Correlation />
      <Execution ProcessID="4" ThreadID="3116" />
      <Channel>Security</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data Name="SubjectUserSid">S-1-5-18</Data>
      <Data Name="SubjectUserName">SRVDEFENDER01$</Data>
      <Data Name="SubjectDomainName">OFFSEC</Data>
      <Data Name="SubjectLogonId">0x3e7</Data>
      <Data Name="NewProcessId">0x3cc</Data>
      <Data Name="NewProcessName">C:\Windows\System32\cscript.exe</Data>
      <Data Name="TokenElevationType">%%1936</Data>
      <Data Name="ProcessId">0x1638</Data>
      <Data Name="CommandLine">"C:\Windows\system32\cscript.exe" /nologo "MonitorKnowledgeDiscovery.vbs"</Data>
      <Data Name="TargetUserSid">S-1-0-0</Data>
      <Data Name="TargetUserName">-</Data>
      <Data Name="TargetDomainName">-</Data>
      <Data Name="TargetLogonId">0x0</Data>
      <Data Name="ParentProcessName">C:\Program Files\Microsoft Monitoring Agent\Agent\MonitoringHost.exe</Data>
      <Data Name="MandatoryLabel">S-1-16-16384</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>A new process has been created.

Creator Subject:
	Security ID:		S-1-5-18
	Account Name:		SRVDEFENDER01$
	Account Domain:		OFFSEC
	Logon ID:		0x3E7

Target Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Process Information:
	New Process ID:		0x3cc
	New Process Name:	C:\Windows\System32\cscript.exe
	Token Elevation Type:	%%1936
	Mandatory Label:		S-1-16-16384
	Creator Process ID:	0x1638
	Creator Process Name:	C:\Program Files\Microsoft Monitoring Agent\Agent\MonitoringHost.exe
	Process Command Line:	"C:\Windows\system32\cscript.exe" /nologo "MonitorKnowledgeDiscovery.vbs"

Token Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.

Type 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.

Type 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.

Type 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator.</Message>
      <Level>Information</Level>
      <Task>Process Creation</Task>
      <Opcode>Info</Opcode>
      <Channel>Security</Channel>
      <Provider>Microsoft Windows security auditing.</Provider>
      <Keywords>
        <Keyword>Audit Success</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
  <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
    <System>
      <Provider Name="Microsoft-Windows-Security-Auditing" Guid="{54849625-5478-4994-A5BA-3E3B0328C30D}" />
      <EventID>4688</EventID>
      <Version>2</Version>
      <Level>0</Level>
      <Task>13312</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8020000000000000</Keywords>
      <TimeCreated SystemTime="2021-04-23T10:10:03.058727700Z" />
      <EventRecordID>396951</EventRecordID>
      <Correlation />
      <Execution ProcessID="4" ThreadID="3116" />
      <Channel>Security</Channel>
      <Computer>srvdefender01.offsec.lan</Computer>
      <Security />
    </System>
    <EventData>
      <Data Name="SubjectUserSid">S-1-5-18</Data>
      <Data Name="SubjectUserName">SRVDEFENDER01$</Data>
      <Data Name="SubjectDomainName">OFFSEC</Data>
      <Data Name="SubjectLogonId">0x3e7</Data>
      <Data Name="NewProcessId">0xe20</Data>
      <Data Name="NewProcessName">C:\Windows\System32\conhost.exe</Data>
      <Data Name="TokenElevationType">%%1936</Data>
      <Data Name="ProcessId">0x3cc</Data>
      <Data Name="CommandLine">\??\C:\Windows\system32\conhost.exe 0xffffffff -ForceV1</Data>
      <Data Name="TargetUserSid">S-1-0-0</Data>
      <Data Name="TargetUserName">-</Data>
      <Data Name="TargetDomainName">-</Data>
      <Data Name="TargetLogonId">0x0</Data>
      <Data Name="ParentProcessName">C:\Windows\System32\cscript.exe</Data>
      <Data Name="MandatoryLabel">S-1-16-16384</Data>
    </EventData>
    <RenderingInfo Culture="en-US">
      <Message>A new process has been created.

Creator Subject:
	Security ID:		S-1-5-18
	Account Name:		SRVDEFENDER01$
	Account Domain:		OFFSEC
	Logon ID:		0x3E7

Target Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Process Information:
	New Process ID:		0xe20
	New Process Name:	C:\Windows\System32\conhost.exe
	Token Elevation Type:	%%1936
	Mandatory Label:		S-1-16-16384
	Creator Process ID:	0x3cc
	Creator Process Name:	C:\Windows\System32\cscript.exe
	Process Command Line:	\??\C:\Windows\system32\conhost.exe 0xffffffff -ForceV1

Token Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.

Type 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.

Type 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.

Type 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator.</Message>
      <Level>Information</Level>
      <Task>Process Creation</Task>
      <Opcode>Info</Opcode>
      <Channel>Security</Channel>
      <Provider>Microsoft Windows security auditing.</Provider>
      <Keywords>
        <Keyword>Audit Success</Keyword>
      </Keywords>
    </RenderingInfo>
  </Event>
</root>